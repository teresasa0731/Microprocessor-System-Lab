                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _light_up
                                     13 	.globl _shift_right
                                     14 	.globl _shift_left
                                     15 	.globl _read_curINPUT
                                     16 	.globl _scan_row
                                     17 	.globl _delay_ms
                                     18 	.globl _CY
                                     19 	.globl _AC
                                     20 	.globl _F0
                                     21 	.globl _RS1
                                     22 	.globl _RS0
                                     23 	.globl _OV
                                     24 	.globl _F1
                                     25 	.globl _P
                                     26 	.globl _PS
                                     27 	.globl _PT1
                                     28 	.globl _PX1
                                     29 	.globl _PT0
                                     30 	.globl _PX0
                                     31 	.globl _RD
                                     32 	.globl _WR
                                     33 	.globl _T1
                                     34 	.globl _T0
                                     35 	.globl _INT1
                                     36 	.globl _INT0
                                     37 	.globl _TXD
                                     38 	.globl _RXD
                                     39 	.globl _P3_7
                                     40 	.globl _P3_6
                                     41 	.globl _P3_5
                                     42 	.globl _P3_4
                                     43 	.globl _P3_3
                                     44 	.globl _P3_2
                                     45 	.globl _P3_1
                                     46 	.globl _P3_0
                                     47 	.globl _EA
                                     48 	.globl _ES
                                     49 	.globl _ET1
                                     50 	.globl _EX1
                                     51 	.globl _ET0
                                     52 	.globl _EX0
                                     53 	.globl _P2_7
                                     54 	.globl _P2_6
                                     55 	.globl _P2_5
                                     56 	.globl _P2_4
                                     57 	.globl _P2_3
                                     58 	.globl _P2_2
                                     59 	.globl _P2_1
                                     60 	.globl _P2_0
                                     61 	.globl _SM0
                                     62 	.globl _SM1
                                     63 	.globl _SM2
                                     64 	.globl _REN
                                     65 	.globl _TB8
                                     66 	.globl _RB8
                                     67 	.globl _TI
                                     68 	.globl _RI
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _TF1
                                     78 	.globl _TR1
                                     79 	.globl _TF0
                                     80 	.globl _TR0
                                     81 	.globl _IE1
                                     82 	.globl _IT1
                                     83 	.globl _IE0
                                     84 	.globl _IT0
                                     85 	.globl _P0_7
                                     86 	.globl _P0_6
                                     87 	.globl _P0_5
                                     88 	.globl _P0_4
                                     89 	.globl _P0_3
                                     90 	.globl _P0_2
                                     91 	.globl _P0_1
                                     92 	.globl _P0_0
                                     93 	.globl _B
                                     94 	.globl _ACC
                                     95 	.globl _PSW
                                     96 	.globl _IP
                                     97 	.globl _P3
                                     98 	.globl _IE
                                     99 	.globl _P2
                                    100 	.globl _SBUF
                                    101 	.globl _SCON
                                    102 	.globl _P1
                                    103 	.globl _TH1
                                    104 	.globl _TH0
                                    105 	.globl _TL1
                                    106 	.globl _TL0
                                    107 	.globl _TMOD
                                    108 	.globl _TCON
                                    109 	.globl _PCON
                                    110 	.globl _DPH
                                    111 	.globl _DPL
                                    112 	.globl _SP
                                    113 	.globl _P0
                                    114 	.globl _light_up_PARM_2
                                    115 	.globl _shift_right_PARM_2
                                    116 	.globl _shift_left_PARM_2
                                    117 	.globl _patt
                                    118 	.globl _count
                                    119 	.globl _prestate
                                    120 	.globl _state
                                    121 	.globl _curINPUT
                                    122 ;--------------------------------------------------------
                                    123 ; special function registers
                                    124 ;--------------------------------------------------------
                                    125 	.area RSEG    (ABS,DATA)
      000000                        126 	.org 0x0000
                           000080   127 _P0	=	0x0080
                           000081   128 _SP	=	0x0081
                           000082   129 _DPL	=	0x0082
                           000083   130 _DPH	=	0x0083
                           000087   131 _PCON	=	0x0087
                           000088   132 _TCON	=	0x0088
                           000089   133 _TMOD	=	0x0089
                           00008A   134 _TL0	=	0x008a
                           00008B   135 _TL1	=	0x008b
                           00008C   136 _TH0	=	0x008c
                           00008D   137 _TH1	=	0x008d
                           000090   138 _P1	=	0x0090
                           000098   139 _SCON	=	0x0098
                           000099   140 _SBUF	=	0x0099
                           0000A0   141 _P2	=	0x00a0
                           0000A8   142 _IE	=	0x00a8
                           0000B0   143 _P3	=	0x00b0
                           0000B8   144 _IP	=	0x00b8
                           0000D0   145 _PSW	=	0x00d0
                           0000E0   146 _ACC	=	0x00e0
                           0000F0   147 _B	=	0x00f0
                                    148 ;--------------------------------------------------------
                                    149 ; special function bits
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0_0	=	0x0080
                           000081   154 _P0_1	=	0x0081
                           000082   155 _P0_2	=	0x0082
                           000083   156 _P0_3	=	0x0083
                           000084   157 _P0_4	=	0x0084
                           000085   158 _P0_5	=	0x0085
                           000086   159 _P0_6	=	0x0086
                           000087   160 _P0_7	=	0x0087
                           000088   161 _IT0	=	0x0088
                           000089   162 _IE0	=	0x0089
                           00008A   163 _IT1	=	0x008a
                           00008B   164 _IE1	=	0x008b
                           00008C   165 _TR0	=	0x008c
                           00008D   166 _TF0	=	0x008d
                           00008E   167 _TR1	=	0x008e
                           00008F   168 _TF1	=	0x008f
                           000090   169 _P1_0	=	0x0090
                           000091   170 _P1_1	=	0x0091
                           000092   171 _P1_2	=	0x0092
                           000093   172 _P1_3	=	0x0093
                           000094   173 _P1_4	=	0x0094
                           000095   174 _P1_5	=	0x0095
                           000096   175 _P1_6	=	0x0096
                           000097   176 _P1_7	=	0x0097
                           000098   177 _RI	=	0x0098
                           000099   178 _TI	=	0x0099
                           00009A   179 _RB8	=	0x009a
                           00009B   180 _TB8	=	0x009b
                           00009C   181 _REN	=	0x009c
                           00009D   182 _SM2	=	0x009d
                           00009E   183 _SM1	=	0x009e
                           00009F   184 _SM0	=	0x009f
                           0000A0   185 _P2_0	=	0x00a0
                           0000A1   186 _P2_1	=	0x00a1
                           0000A2   187 _P2_2	=	0x00a2
                           0000A3   188 _P2_3	=	0x00a3
                           0000A4   189 _P2_4	=	0x00a4
                           0000A5   190 _P2_5	=	0x00a5
                           0000A6   191 _P2_6	=	0x00a6
                           0000A7   192 _P2_7	=	0x00a7
                           0000A8   193 _EX0	=	0x00a8
                           0000A9   194 _ET0	=	0x00a9
                           0000AA   195 _EX1	=	0x00aa
                           0000AB   196 _ET1	=	0x00ab
                           0000AC   197 _ES	=	0x00ac
                           0000AF   198 _EA	=	0x00af
                           0000B0   199 _P3_0	=	0x00b0
                           0000B1   200 _P3_1	=	0x00b1
                           0000B2   201 _P3_2	=	0x00b2
                           0000B3   202 _P3_3	=	0x00b3
                           0000B4   203 _P3_4	=	0x00b4
                           0000B5   204 _P3_5	=	0x00b5
                           0000B6   205 _P3_6	=	0x00b6
                           0000B7   206 _P3_7	=	0x00b7
                           0000B0   207 _RXD	=	0x00b0
                           0000B1   208 _TXD	=	0x00b1
                           0000B2   209 _INT0	=	0x00b2
                           0000B3   210 _INT1	=	0x00b3
                           0000B4   211 _T0	=	0x00b4
                           0000B5   212 _T1	=	0x00b5
                           0000B6   213 _WR	=	0x00b6
                           0000B7   214 _RD	=	0x00b7
                           0000B8   215 _PX0	=	0x00b8
                           0000B9   216 _PT0	=	0x00b9
                           0000BA   217 _PX1	=	0x00ba
                           0000BB   218 _PT1	=	0x00bb
                           0000BC   219 _PS	=	0x00bc
                           0000D0   220 _P	=	0x00d0
                           0000D1   221 _F1	=	0x00d1
                           0000D2   222 _OV	=	0x00d2
                           0000D3   223 _RS0	=	0x00d3
                           0000D4   224 _RS1	=	0x00d4
                           0000D5   225 _F0	=	0x00d5
                           0000D6   226 _AC	=	0x00d6
                           0000D7   227 _CY	=	0x00d7
                                    228 ;--------------------------------------------------------
                                    229 ; overlayable register banks
                                    230 ;--------------------------------------------------------
                                    231 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        232 	.ds 8
                                    233 ;--------------------------------------------------------
                                    234 ; internal ram data
                                    235 ;--------------------------------------------------------
                                    236 	.area DSEG    (DATA)
      000000                        237 _curINPUT::
      000000                        238 	.ds 18
      000012                        239 _state::
      000012                        240 	.ds 18
      000024                        241 _prestate::
      000024                        242 	.ds 18
      000036                        243 _count::
      000036                        244 	.ds 18
      000048                        245 _patt::
      000048                        246 	.ds 1
      000049                        247 _shift_left_PARM_2:
      000049                        248 	.ds 1
      00004A                        249 _shift_right_PARM_2:
      00004A                        250 	.ds 1
      00004B                        251 _light_up_PARM_2:
      00004B                        252 	.ds 1
      00004C                        253 _main_long_flag_65536_20:
      00004C                        254 	.ds 2
      00004E                        255 _main_sloc0_1_0:
      00004E                        256 	.ds 2
                                    257 ;--------------------------------------------------------
                                    258 ; overlayable items in internal ram
                                    259 ;--------------------------------------------------------
                                    260 	.area	OSEG    (OVR,DATA)
                                    261 ;--------------------------------------------------------
                                    262 ; Stack segment in internal ram
                                    263 ;--------------------------------------------------------
                                    264 	.area SSEG
      000000                        265 __start__stack:
      000000                        266 	.ds	1
                                    267 
                                    268 ;--------------------------------------------------------
                                    269 ; indirectly addressable internal ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area ISEG    (DATA)
                                    272 ;--------------------------------------------------------
                                    273 ; absolute internal ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area IABS    (ABS,DATA)
                                    276 	.area IABS    (ABS,DATA)
                                    277 ;--------------------------------------------------------
                                    278 ; bit data
                                    279 ;--------------------------------------------------------
                                    280 	.area BSEG    (BIT)
                                    281 ;--------------------------------------------------------
                                    282 ; paged external ram data
                                    283 ;--------------------------------------------------------
                                    284 	.area PSEG    (PAG,XDATA)
                                    285 ;--------------------------------------------------------
                                    286 ; uninitialized external ram data
                                    287 ;--------------------------------------------------------
                                    288 	.area XSEG    (XDATA)
                                    289 ;--------------------------------------------------------
                                    290 ; absolute external ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area XABS    (ABS,XDATA)
                                    293 ;--------------------------------------------------------
                                    294 ; initialized external ram data
                                    295 ;--------------------------------------------------------
                                    296 	.area XISEG   (XDATA)
                                    297 	.area HOME    (CODE)
                                    298 	.area GSINIT0 (CODE)
                                    299 	.area GSINIT1 (CODE)
                                    300 	.area GSINIT2 (CODE)
                                    301 	.area GSINIT3 (CODE)
                                    302 	.area GSINIT4 (CODE)
                                    303 	.area GSINIT5 (CODE)
                                    304 	.area GSINIT  (CODE)
                                    305 	.area GSFINAL (CODE)
                                    306 	.area CSEG    (CODE)
                                    307 ;--------------------------------------------------------
                                    308 ; interrupt vector
                                    309 ;--------------------------------------------------------
                                    310 	.area HOME    (CODE)
      000000                        311 __interrupt_vect:
      000000 02r00r00         [24]  312 	ljmp	__sdcc_gsinit_startup
                                    313 ;--------------------------------------------------------
                                    314 ; global & static initialisations
                                    315 ;--------------------------------------------------------
                                    316 	.area HOME    (CODE)
                                    317 	.area GSINIT  (CODE)
                                    318 	.area GSFINAL (CODE)
                                    319 	.area GSINIT  (CODE)
                                    320 	.globl __sdcc_gsinit_startup
                                    321 	.globl __sdcc_program_startup
                                    322 	.globl __start__stack
                                    323 	.globl __mcs51_genXINIT
                                    324 	.globl __mcs51_genXRAMCLEAR
                                    325 	.globl __mcs51_genRAMCLEAR
                                    326 ;	./src/main.c:23: unsigned char patt = 0x80; // led value
      000000 75*48 80         [24]  327 	mov	_patt,#0x80
                                    328 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  329 	ljmp	__sdcc_program_startup
                                    330 ;--------------------------------------------------------
                                    331 ; Home
                                    332 ;--------------------------------------------------------
                                    333 	.area HOME    (CODE)
                                    334 	.area HOME    (CODE)
      000003                        335 __sdcc_program_startup:
      000003 02r01r21         [24]  336 	ljmp	_main
                                    337 ;	return from main will return to caller
                                    338 ;--------------------------------------------------------
                                    339 ; code
                                    340 ;--------------------------------------------------------
                                    341 	.area CSEG    (CODE)
                                    342 ;------------------------------------------------------------
                                    343 ;Allocation info for local variables in function 'scan_row'
                                    344 ;------------------------------------------------------------
                                    345 ;row                       Allocated to registers r6 r7 
                                    346 ;------------------------------------------------------------
                                    347 ;	./src/main.c:26: void scan_row(unsigned int row)
                                    348 ;	-----------------------------------------
                                    349 ;	 function scan_row
                                    350 ;	-----------------------------------------
      000000                        351 _scan_row:
                           000007   352 	ar7 = 0x07
                           000006   353 	ar6 = 0x06
                           000005   354 	ar5 = 0x05
                           000004   355 	ar4 = 0x04
                           000003   356 	ar3 = 0x03
                           000002   357 	ar2 = 0x02
                           000001   358 	ar1 = 0x01
                           000000   359 	ar0 = 0x00
      000000 AE 82            [24]  360 	mov	r6,dpl
      000002 AF 83            [24]  361 	mov	r7,dph
                                    362 ;	./src/main.c:28: switch (row)
      000004 BE 00 05         [24]  363 	cjne	r6,#0x00,00120$
      000007 BF 00 02         [24]  364 	cjne	r7,#0x00,00120$
      00000A 80 10            [24]  365 	sjmp	00101$
      00000C                        366 00120$:
      00000C BE 01 05         [24]  367 	cjne	r6,#0x01,00121$
      00000F BF 00 02         [24]  368 	cjne	r7,#0x00,00121$
      000012 80 0F            [24]  369 	sjmp	00102$
      000014                        370 00121$:
                                    371 ;	./src/main.c:30: case 0:
      000014 BE 02 19         [24]  372 	cjne	r6,#0x02,00106$
      000017 BF 00 16         [24]  373 	cjne	r7,#0x00,00106$
      00001A 80 0E            [24]  374 	sjmp	00103$
      00001C                        375 00101$:
                                    376 ;	./src/main.c:32: OUTPUT0 = 0; // row1 output 0
                                    377 ;	assignBit
      00001C C2 84            [12]  378 	clr	_P0_4
                                    379 ;	./src/main.c:33: OUTPUT1 = 1; // row2 output 1
                                    380 ;	assignBit
      00001E D2 83            [12]  381 	setb	_P0_3
                                    382 ;	./src/main.c:34: OUTPUT2 = 1; // row3 output 1
                                    383 ;	assignBit
      000020 D2 82            [12]  384 	setb	_P0_2
                                    385 ;	./src/main.c:35: break;
                                    386 ;	./src/main.c:37: case 1:
      000022 22               [24]  387 	ret
      000023                        388 00102$:
                                    389 ;	./src/main.c:38: OUTPUT0 = 1; // row1 output 1
                                    390 ;	assignBit
      000023 D2 84            [12]  391 	setb	_P0_4
                                    392 ;	./src/main.c:39: OUTPUT1 = 0; // row2 output 0
                                    393 ;	assignBit
      000025 C2 83            [12]  394 	clr	_P0_3
                                    395 ;	./src/main.c:40: OUTPUT2 = 1; // row3 output 1
                                    396 ;	assignBit
      000027 D2 82            [12]  397 	setb	_P0_2
                                    398 ;	./src/main.c:41: break;
                                    399 ;	./src/main.c:43: case 2:
      000029 22               [24]  400 	ret
      00002A                        401 00103$:
                                    402 ;	./src/main.c:44: OUTPUT0 = 1; // row1 output 1
                                    403 ;	assignBit
      00002A D2 84            [12]  404 	setb	_P0_4
                                    405 ;	./src/main.c:45: OUTPUT1 = 1; // row2 output 1
                                    406 ;	assignBit
      00002C D2 83            [12]  407 	setb	_P0_3
                                    408 ;	./src/main.c:46: OUTPUT2 = 0; // row3 output 0
                                    409 ;	assignBit
      00002E C2 82            [12]  410 	clr	_P0_2
                                    411 ;	./src/main.c:51: }
      000030                        412 00106$:
                                    413 ;	./src/main.c:52: }
      000030 22               [24]  414 	ret
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'read_curINPUT'
                                    417 ;------------------------------------------------------------
                                    418 ;i                         Allocated to registers r6 r7 
                                    419 ;------------------------------------------------------------
                                    420 ;	./src/main.c:53: void read_curINPUT(void)
                                    421 ;	-----------------------------------------
                                    422 ;	 function read_curINPUT
                                    423 ;	-----------------------------------------
      000031                        424 _read_curINPUT:
                                    425 ;	./src/main.c:55: for (int i = 0; i < 3; i++)
      000031 7E 00            [12]  426 	mov	r6,#0x00
      000033 7F 00            [12]  427 	mov	r7,#0x00
      000035                        428 00103$:
      000035 C3               [12]  429 	clr	c
      000036 EE               [12]  430 	mov	a,r6
      000037 94 03            [12]  431 	subb	a,#0x03
      000039 EF               [12]  432 	mov	a,r7
      00003A 64 80            [12]  433 	xrl	a,#0x80
      00003C 94 80            [12]  434 	subb	a,#0x80
      00003E 50 58            [24]  435 	jnc	00105$
                                    436 ;	./src/main.c:57: scan_row(i);
      000040 8E 82            [24]  437 	mov	dpl,r6
      000042 8F 83            [24]  438 	mov	dph,r7
      000044 C0 07            [24]  439 	push	ar7
      000046 C0 06            [24]  440 	push	ar6
      000048 12r00r00         [24]  441 	lcall	_scan_row
      00004B D0 06            [24]  442 	pop	ar6
      00004D D0 07            [24]  443 	pop	ar7
                                    444 ;	./src/main.c:58: curINPUT[i * 3 + 0] = INPUT0;
      00004F 8E 05            [24]  445 	mov	ar5,r6
      000051 ED               [12]  446 	mov	a,r5
      000052 75 F0 03         [24]  447 	mov	b,#0x03
      000055 A4               [48]  448 	mul	ab
      000056 FD               [12]  449 	mov	r5,a
      000057 25 E0            [12]  450 	add	a,acc
      000059 24r00            [12]  451 	add	a,#_curINPUT
      00005B F9               [12]  452 	mov	r1,a
      00005C A2 87            [12]  453 	mov	c,_P0_7
      00005E E4               [12]  454 	clr	a
      00005F 33               [12]  455 	rlc	a
      000060 FB               [12]  456 	mov	r3,a
      000061 7C 00            [12]  457 	mov	r4,#0x00
      000063 A7 03            [24]  458 	mov	@r1,ar3
      000065 09               [12]  459 	inc	r1
      000066 A7 04            [24]  460 	mov	@r1,ar4
      000068 19               [12]  461 	dec	r1
                                    462 ;	./src/main.c:59: curINPUT[i * 3 + 1] = INPUT1;
      000069 ED               [12]  463 	mov	a,r5
      00006A 04               [12]  464 	inc	a
      00006B 25 E0            [12]  465 	add	a,acc
      00006D 24r00            [12]  466 	add	a,#_curINPUT
      00006F F9               [12]  467 	mov	r1,a
      000070 A2 86            [12]  468 	mov	c,_P0_6
      000072 E4               [12]  469 	clr	a
      000073 33               [12]  470 	rlc	a
      000074 FB               [12]  471 	mov	r3,a
      000075 7C 00            [12]  472 	mov	r4,#0x00
      000077 A7 03            [24]  473 	mov	@r1,ar3
      000079 09               [12]  474 	inc	r1
      00007A A7 04            [24]  475 	mov	@r1,ar4
      00007C 19               [12]  476 	dec	r1
                                    477 ;	./src/main.c:60: curINPUT[i * 3 + 2] = INPUT2;
      00007D 0D               [12]  478 	inc	r5
      00007E 0D               [12]  479 	inc	r5
      00007F ED               [12]  480 	mov	a,r5
      000080 2D               [12]  481 	add	a,r5
      000081 24r00            [12]  482 	add	a,#_curINPUT
      000083 F9               [12]  483 	mov	r1,a
      000084 A2 85            [12]  484 	mov	c,_P0_5
      000086 E4               [12]  485 	clr	a
      000087 33               [12]  486 	rlc	a
      000088 FC               [12]  487 	mov	r4,a
      000089 7D 00            [12]  488 	mov	r5,#0x00
      00008B A7 04            [24]  489 	mov	@r1,ar4
      00008D 09               [12]  490 	inc	r1
      00008E A7 05            [24]  491 	mov	@r1,ar5
      000090 19               [12]  492 	dec	r1
                                    493 ;	./src/main.c:55: for (int i = 0; i < 3; i++)
      000091 0E               [12]  494 	inc	r6
      000092 BE 00 A0         [24]  495 	cjne	r6,#0x00,00103$
      000095 0F               [12]  496 	inc	r7
      000096 80 9D            [24]  497 	sjmp	00103$
      000098                        498 00105$:
                                    499 ;	./src/main.c:62: }
      000098 22               [24]  500 	ret
                                    501 ;------------------------------------------------------------
                                    502 ;Allocation info for local variables in function 'shift_left'
                                    503 ;------------------------------------------------------------
                                    504 ;patt                      Allocated with name '_shift_left_PARM_2'
                                    505 ;bit                       Allocated to registers r6 r7 
                                    506 ;i                         Allocated to registers r4 r5 
                                    507 ;------------------------------------------------------------
                                    508 ;	./src/main.c:63: unsigned char shift_left(unsigned int bit, unsigned char patt)
                                    509 ;	-----------------------------------------
                                    510 ;	 function shift_left
                                    511 ;	-----------------------------------------
      000099                        512 _shift_left:
      000099 AE 82            [24]  513 	mov	r6,dpl
      00009B AF 83            [24]  514 	mov	r7,dph
                                    515 ;	./src/main.c:65: for (int i = 0; i < bit; i++)
      00009D 7C 00            [12]  516 	mov	r4,#0x00
      00009F 7D 00            [12]  517 	mov	r5,#0x00
      0000A1                        518 00105$:
      0000A1 8C 02            [24]  519 	mov	ar2,r4
      0000A3 8D 03            [24]  520 	mov	ar3,r5
      0000A5 C3               [12]  521 	clr	c
      0000A6 EA               [12]  522 	mov	a,r2
      0000A7 9E               [12]  523 	subb	a,r6
      0000A8 EB               [12]  524 	mov	a,r3
      0000A9 9F               [12]  525 	subb	a,r7
      0000AA 50 12            [24]  526 	jnc	00103$
                                    527 ;	./src/main.c:67: patt = patt >> 1;
      0000AC E5*49            [12]  528 	mov	a,_shift_left_PARM_2
      0000AE C3               [12]  529 	clr	c
      0000AF 13               [12]  530 	rrc	a
                                    531 ;	./src/main.c:68: if (patt == 0x00)
      0000B0 F5*49            [12]  532 	mov	_shift_left_PARM_2,a
      0000B2 70 03            [24]  533 	jnz	00106$
                                    534 ;	./src/main.c:69: patt = 0x80;
      0000B4 75*49 80         [24]  535 	mov	_shift_left_PARM_2,#0x80
      0000B7                        536 00106$:
                                    537 ;	./src/main.c:65: for (int i = 0; i < bit; i++)
      0000B7 0C               [12]  538 	inc	r4
      0000B8 BC 00 E6         [24]  539 	cjne	r4,#0x00,00105$
      0000BB 0D               [12]  540 	inc	r5
      0000BC 80 E3            [24]  541 	sjmp	00105$
      0000BE                        542 00103$:
                                    543 ;	./src/main.c:72: led = ~patt;
      0000BE E5*49            [12]  544 	mov	a,_shift_left_PARM_2
      0000C0 F4               [12]  545 	cpl	a
      0000C1 F5 90            [12]  546 	mov	_P1,a
                                    547 ;	./src/main.c:73: delay_ms(20);
      0000C3 90 00 14         [24]  548 	mov	dptr,#0x0014
      0000C6 12r00r00         [24]  549 	lcall	_delay_ms
                                    550 ;	./src/main.c:74: return patt;
      0000C9 85*49 82         [24]  551 	mov	dpl,_shift_left_PARM_2
                                    552 ;	./src/main.c:75: }
      0000CC 22               [24]  553 	ret
                                    554 ;------------------------------------------------------------
                                    555 ;Allocation info for local variables in function 'shift_right'
                                    556 ;------------------------------------------------------------
                                    557 ;patt                      Allocated with name '_shift_right_PARM_2'
                                    558 ;bit                       Allocated to registers r6 r7 
                                    559 ;------------------------------------------------------------
                                    560 ;	./src/main.c:76: unsigned char shift_right(unsigned int bit, unsigned char patt)
                                    561 ;	-----------------------------------------
                                    562 ;	 function shift_right
                                    563 ;	-----------------------------------------
      0000CD                        564 _shift_right:
      0000CD AE 82            [24]  565 	mov	r6,dpl
                                    566 ;	./src/main.c:78: if (patt == 0x80)
      0000CF 74 80            [12]  567 	mov	a,#0x80
      0000D1 B5*4A 05         [24]  568 	cjne	a,_shift_right_PARM_2,00102$
                                    569 ;	./src/main.c:79: patt = 0x00 + 1;
      0000D4 75*4A 01         [24]  570 	mov	_shift_right_PARM_2,#0x01
      0000D7 80 0F            [24]  571 	sjmp	00103$
      0000D9                        572 00102$:
                                    573 ;	./src/main.c:81: patt = patt << bit;
      0000D9 8E F0            [24]  574 	mov	b,r6
      0000DB 05 F0            [12]  575 	inc	b
      0000DD E5*4A            [12]  576 	mov	a,_shift_right_PARM_2
      0000DF 80 02            [24]  577 	sjmp	00114$
      0000E1                        578 00112$:
      0000E1 25 E0            [12]  579 	add	a,acc
      0000E3                        580 00114$:
      0000E3 D5 F0 FB         [24]  581 	djnz	b,00112$
      0000E6 F5*4A            [12]  582 	mov	_shift_right_PARM_2,a
      0000E8                        583 00103$:
                                    584 ;	./src/main.c:83: led = ~patt;
      0000E8 E5*4A            [12]  585 	mov	a,_shift_right_PARM_2
      0000EA F4               [12]  586 	cpl	a
      0000EB F5 90            [12]  587 	mov	_P1,a
                                    588 ;	./src/main.c:84: delay_ms(20);
      0000ED 90 00 14         [24]  589 	mov	dptr,#0x0014
      0000F0 12r00r00         [24]  590 	lcall	_delay_ms
                                    591 ;	./src/main.c:85: return patt;
      0000F3 85*4A 82         [24]  592 	mov	dpl,_shift_right_PARM_2
                                    593 ;	./src/main.c:86: }
      0000F6 22               [24]  594 	ret
                                    595 ;------------------------------------------------------------
                                    596 ;Allocation info for local variables in function 'light_up'
                                    597 ;------------------------------------------------------------
                                    598 ;patt                      Allocated with name '_light_up_PARM_2'
                                    599 ;idx                       Allocated to registers r6 r7 
                                    600 ;------------------------------------------------------------
                                    601 ;	./src/main.c:87: unsigned char light_up(unsigned int idx, unsigned char patt)
                                    602 ;	-----------------------------------------
                                    603 ;	 function light_up
                                    604 ;	-----------------------------------------
      0000F7                        605 _light_up:
      0000F7 AE 82            [24]  606 	mov	r6,dpl
      0000F9 AF 83            [24]  607 	mov	r7,dph
                                    608 ;	./src/main.c:89: switch (idx)
      0000FB BE 09 05         [24]  609 	cjne	r6,#0x09,00110$
      0000FE BF 00 02         [24]  610 	cjne	r7,#0x00,00110$
      000101 80 0F            [24]  611 	sjmp	00103$
      000103                        612 00110$:
                                    613 ;	./src/main.c:95: patt = (0x00 + 1) << idx;
      000103 8E F0            [24]  614 	mov	b,r6
      000105 05 F0            [12]  615 	inc	b
      000107 74 01            [12]  616 	mov	a,#0x01
      000109 80 02            [24]  617 	sjmp	00113$
      00010B                        618 00111$:
      00010B 25 E0            [12]  619 	add	a,acc
      00010D                        620 00113$:
      00010D D5 F0 FB         [24]  621 	djnz	b,00111$
      000110 F5*4B            [12]  622 	mov	_light_up_PARM_2,a
                                    623 ;	./src/main.c:97: }
      000112                        624 00103$:
                                    625 ;	./src/main.c:99: led = ~patt;
      000112 E5*4B            [12]  626 	mov	a,_light_up_PARM_2
      000114 F4               [12]  627 	cpl	a
      000115 F5 90            [12]  628 	mov	_P1,a
                                    629 ;	./src/main.c:100: delay_ms(20);
      000117 90 00 14         [24]  630 	mov	dptr,#0x0014
      00011A 12r00r00         [24]  631 	lcall	_delay_ms
                                    632 ;	./src/main.c:101: return patt;
      00011D 85*4B 82         [24]  633 	mov	dpl,_light_up_PARM_2
                                    634 ;	./src/main.c:102: }
      000120 22               [24]  635 	ret
                                    636 ;------------------------------------------------------------
                                    637 ;Allocation info for local variables in function 'main'
                                    638 ;------------------------------------------------------------
                                    639 ;long_flag                 Allocated with name '_main_long_flag_65536_20'
                                    640 ;i                         Allocated to registers r4 r5 
                                    641 ;i                         Allocated to registers r4 r5 
                                    642 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    643 ;------------------------------------------------------------
                                    644 ;	./src/main.c:104: void main(void)
                                    645 ;	-----------------------------------------
                                    646 ;	 function main
                                    647 ;	-----------------------------------------
      000121                        648 _main:
                                    649 ;	./src/main.c:107: int long_flag = 0;
      000121 E4               [12]  650 	clr	a
      000122 F5*4C            [12]  651 	mov	_main_long_flag_65536_20,a
      000124 F5*4D            [12]  652 	mov	(_main_long_flag_65536_20 + 1),a
                                    653 ;	./src/main.c:109: for (int i = 0; i < 9; i++)
      000126 7C 00            [12]  654 	mov	r4,#0x00
      000128 7D 00            [12]  655 	mov	r5,#0x00
      00012A                        656 00151$:
      00012A C3               [12]  657 	clr	c
      00012B EC               [12]  658 	mov	a,r4
      00012C 94 09            [12]  659 	subb	a,#0x09
      00012E ED               [12]  660 	mov	a,r5
      00012F 64 80            [12]  661 	xrl	a,#0x80
      000131 94 80            [12]  662 	subb	a,#0x80
      000133 50 31            [24]  663 	jnc	00148$
                                    664 ;	./src/main.c:111: curINPUT[i] = LEVEL_HIGH;
      000135 EC               [12]  665 	mov	a,r4
      000136 2C               [12]  666 	add	a,r4
      000137 FA               [12]  667 	mov	r2,a
      000138 ED               [12]  668 	mov	a,r5
      000139 33               [12]  669 	rlc	a
      00013A FB               [12]  670 	mov	r3,a
      00013B EA               [12]  671 	mov	a,r2
      00013C 24r00            [12]  672 	add	a,#_curINPUT
      00013E F8               [12]  673 	mov	r0,a
      00013F 76 01            [12]  674 	mov	@r0,#0x01
      000141 08               [12]  675 	inc	r0
      000142 76 00            [12]  676 	mov	@r0,#0x00
                                    677 ;	./src/main.c:112: state[i] = BTN_RELEASED;
      000144 EA               [12]  678 	mov	a,r2
      000145 24r12            [12]  679 	add	a,#_state
      000147 F8               [12]  680 	mov	r0,a
      000148 76 00            [12]  681 	mov	@r0,#0x00
      00014A 08               [12]  682 	inc	r0
      00014B 76 00            [12]  683 	mov	@r0,#0x00
                                    684 ;	./src/main.c:113: prestate[i] = BTN_RELEASED;
      00014D EA               [12]  685 	mov	a,r2
      00014E 24r24            [12]  686 	add	a,#_prestate
      000150 F8               [12]  687 	mov	r0,a
      000151 76 00            [12]  688 	mov	@r0,#0x00
      000153 08               [12]  689 	inc	r0
      000154 76 00            [12]  690 	mov	@r0,#0x00
                                    691 ;	./src/main.c:114: count[i] = 0;
      000156 EA               [12]  692 	mov	a,r2
      000157 24r36            [12]  693 	add	a,#_count
      000159 F8               [12]  694 	mov	r0,a
      00015A 76 00            [12]  695 	mov	@r0,#0x00
      00015C 08               [12]  696 	inc	r0
      00015D 76 00            [12]  697 	mov	@r0,#0x00
                                    698 ;	./src/main.c:109: for (int i = 0; i < 9; i++)
      00015F 0C               [12]  699 	inc	r4
                                    700 ;	./src/main.c:117: while (1)
      000160 BC 00 C7         [24]  701 	cjne	r4,#0x00,00151$
      000163 0D               [12]  702 	inc	r5
      000164 80 C4            [24]  703 	sjmp	00151$
      000166                        704 00148$:
                                    705 ;	./src/main.c:119: delay_ms(20);
      000166 90 00 14         [24]  706 	mov	dptr,#0x0014
      000169 12r00r00         [24]  707 	lcall	_delay_ms
                                    708 ;	./src/main.c:120: read_curINPUT();
      00016C 12r00r31         [24]  709 	lcall	_read_curINPUT
                                    710 ;	./src/main.c:123: for (int i = 0; i < 9; i++)
      00016F 7C 00            [12]  711 	mov	r4,#0x00
      000171 7D 00            [12]  712 	mov	r5,#0x00
      000173                        713 00154$:
      000173 C3               [12]  714 	clr	c
      000174 EC               [12]  715 	mov	a,r4
      000175 94 09            [12]  716 	subb	a,#0x09
      000177 ED               [12]  717 	mov	a,r5
      000178 64 80            [12]  718 	xrl	a,#0x80
      00017A 94 80            [12]  719 	subb	a,#0x80
      00017C 50 E8            [24]  720 	jnc	00148$
                                    721 ;	./src/main.c:125: switch (state[i])
      00017E EC               [12]  722 	mov	a,r4
      00017F 2C               [12]  723 	add	a,r4
      000180 FA               [12]  724 	mov	r2,a
      000181 ED               [12]  725 	mov	a,r5
      000182 33               [12]  726 	rlc	a
      000183 FB               [12]  727 	mov	r3,a
      000184 EA               [12]  728 	mov	a,r2
      000185 24r12            [12]  729 	add	a,#_state
      000187 F9               [12]  730 	mov	r1,a
      000188 87*4E            [24]  731 	mov	_main_sloc0_1_0,@r1
      00018A 09               [12]  732 	inc	r1
      00018B 87*4F            [24]  733 	mov	(_main_sloc0_1_0 + 1),@r1
      00018D 19               [12]  734 	dec	r1
      00018E C3               [12]  735 	clr	c
      00018F 74 03            [12]  736 	mov	a,#0x03
      000191 95*4E            [12]  737 	subb	a,_main_sloc0_1_0
      000193 E4               [12]  738 	clr	a
      000194 95*4F            [12]  739 	subb	a,(_main_sloc0_1_0 + 1)
      000196 50 03            [24]  740 	jnc	00242$
      000198 02r02r58         [24]  741 	ljmp	00121$
      00019B                        742 00242$:
      00019B E5*4E            [12]  743 	mov	a,_main_sloc0_1_0
      00019D 75 F0 03         [24]  744 	mov	b,#0x03
      0001A0 A4               [48]  745 	mul	ab
      0001A1 90r01rA5         [24]  746 	mov	dptr,#00243$
      0001A4 73               [24]  747 	jmp	@a+dptr
      0001A5                        748 00243$:
      0001A5 02r01rB1         [24]  749 	ljmp	00102$
      0001A8 02r01rCB         [24]  750 	ljmp	00105$
      0001AB 02r01rEA         [24]  751 	ljmp	00109$
      0001AE 02r02r33         [24]  752 	ljmp	00116$
                                    753 ;	./src/main.c:127: case BTN_RELEASED:
      0001B1                        754 00102$:
                                    755 ;	./src/main.c:128: if (curINPUT[i] == LEVEL_LOW)
      0001B1 EA               [12]  756 	mov	a,r2
      0001B2 24r00            [12]  757 	add	a,#_curINPUT
      0001B4 F8               [12]  758 	mov	r0,a
      0001B5 86 06            [24]  759 	mov	ar6,@r0
      0001B7 08               [12]  760 	inc	r0
      0001B8 86 07            [24]  761 	mov	ar7,@r0
      0001BA 18               [12]  762 	dec	r0
      0001BB EE               [12]  763 	mov	a,r6
      0001BC 4F               [12]  764 	orl	a,r7
      0001BD 60 03            [24]  765 	jz	00244$
      0001BF 02r02r58         [24]  766 	ljmp	00121$
      0001C2                        767 00244$:
                                    768 ;	./src/main.c:129: state[i] = BTN_DEBOUNCED;
      0001C2 77 01            [12]  769 	mov	@r1,#0x01
      0001C4 09               [12]  770 	inc	r1
      0001C5 77 00            [12]  771 	mov	@r1,#0x00
      0001C7 19               [12]  772 	dec	r1
                                    773 ;	./src/main.c:130: break;
      0001C8 02r02r58         [24]  774 	ljmp	00121$
                                    775 ;	./src/main.c:131: case BTN_DEBOUNCED:
      0001CB                        776 00105$:
                                    777 ;	./src/main.c:132: if (curINPUT[i] == LEVEL_LOW)
      0001CB EA               [12]  778 	mov	a,r2
      0001CC 24r00            [12]  779 	add	a,#_curINPUT
      0001CE F8               [12]  780 	mov	r0,a
      0001CF 86 06            [24]  781 	mov	ar6,@r0
      0001D1 08               [12]  782 	inc	r0
      0001D2 86 07            [24]  783 	mov	ar7,@r0
      0001D4 18               [12]  784 	dec	r0
      0001D5 EE               [12]  785 	mov	a,r6
      0001D6 4F               [12]  786 	orl	a,r7
      0001D7 70 09            [24]  787 	jnz	00107$
                                    788 ;	./src/main.c:133: state[i] = BTN_PRESSED;
      0001D9 77 02            [12]  789 	mov	@r1,#0x02
      0001DB 09               [12]  790 	inc	r1
      0001DC 77 00            [12]  791 	mov	@r1,#0x00
      0001DE 19               [12]  792 	dec	r1
      0001DF 02r02r58         [24]  793 	ljmp	00121$
      0001E2                        794 00107$:
                                    795 ;	./src/main.c:135: state[i] = BTN_RELEASED;
      0001E2 77 00            [12]  796 	mov	@r1,#0x00
      0001E4 09               [12]  797 	inc	r1
      0001E5 77 00            [12]  798 	mov	@r1,#0x00
      0001E7 19               [12]  799 	dec	r1
                                    800 ;	./src/main.c:136: break;
                                    801 ;	./src/main.c:137: case BTN_PRESSED:
      0001E8 80 6E            [24]  802 	sjmp	00121$
      0001EA                        803 00109$:
                                    804 ;	./src/main.c:138: if (curINPUT[i] == LEVEL_LOW)
      0001EA EA               [12]  805 	mov	a,r2
      0001EB 24r00            [12]  806 	add	a,#_curINPUT
      0001ED F8               [12]  807 	mov	r0,a
      0001EE 86 06            [24]  808 	mov	ar6,@r0
      0001F0 08               [12]  809 	inc	r0
      0001F1 86 07            [24]  810 	mov	ar7,@r0
      0001F3 18               [12]  811 	dec	r0
      0001F4 EE               [12]  812 	mov	a,r6
      0001F5 4F               [12]  813 	orl	a,r7
      0001F6 70 33            [24]  814 	jnz	00114$
                                    815 ;	./src/main.c:140: count[i]++;
      0001F8 EA               [12]  816 	mov	a,r2
      0001F9 24r36            [12]  817 	add	a,#_count
      0001FB F8               [12]  818 	mov	r0,a
      0001FC 86 06            [24]  819 	mov	ar6,@r0
      0001FE 08               [12]  820 	inc	r0
      0001FF 86 07            [24]  821 	mov	ar7,@r0
      000201 18               [12]  822 	dec	r0
      000202 0E               [12]  823 	inc	r6
      000203 BE 00 01         [24]  824 	cjne	r6,#0x00,00247$
      000206 0F               [12]  825 	inc	r7
      000207                        826 00247$:
      000207 A6 06            [24]  827 	mov	@r0,ar6
      000209 08               [12]  828 	inc	r0
      00020A A6 07            [24]  829 	mov	@r0,ar7
      00020C 18               [12]  830 	dec	r0
                                    831 ;	./src/main.c:141: if (count[i] > 50)
      00020D C3               [12]  832 	clr	c
      00020E 74 32            [12]  833 	mov	a,#0x32
      000210 9E               [12]  834 	subb	a,r6
      000211 E4               [12]  835 	clr	a
      000212 9F               [12]  836 	subb	a,r7
      000213 50 0E            [24]  837 	jnc	00111$
                                    838 ;	./src/main.c:143: state[i] = BTN_LONG_PRESSED;
      000215 77 03            [12]  839 	mov	@r1,#0x03
      000217 09               [12]  840 	inc	r1
      000218 77 00            [12]  841 	mov	@r1,#0x00
      00021A 19               [12]  842 	dec	r1
                                    843 ;	./src/main.c:144: long_flag = 1;
      00021B 75*4C 01         [24]  844 	mov	_main_long_flag_65536_20,#0x01
      00021E 75*4D 00         [24]  845 	mov	(_main_long_flag_65536_20 + 1),#0x00
      000221 80 35            [24]  846 	sjmp	00121$
      000223                        847 00111$:
                                    848 ;	./src/main.c:148: state[i] = BTN_PRESSED;
      000223 77 02            [12]  849 	mov	@r1,#0x02
      000225 09               [12]  850 	inc	r1
      000226 77 00            [12]  851 	mov	@r1,#0x00
      000228 19               [12]  852 	dec	r1
      000229 80 2D            [24]  853 	sjmp	00121$
      00022B                        854 00114$:
                                    855 ;	./src/main.c:151: state[i] = BTN_RELEASED;
      00022B 77 00            [12]  856 	mov	@r1,#0x00
      00022D 09               [12]  857 	inc	r1
      00022E 77 00            [12]  858 	mov	@r1,#0x00
      000230 19               [12]  859 	dec	r1
                                    860 ;	./src/main.c:152: break;
                                    861 ;	./src/main.c:153: case BTN_LONG_PRESSED:
      000231 80 25            [24]  862 	sjmp	00121$
      000233                        863 00116$:
                                    864 ;	./src/main.c:154: if (curINPUT[i] == LEVEL_LOW)
      000233 EA               [12]  865 	mov	a,r2
      000234 24r00            [12]  866 	add	a,#_curINPUT
      000236 F8               [12]  867 	mov	r0,a
      000237 86 06            [24]  868 	mov	ar6,@r0
      000239 08               [12]  869 	inc	r0
      00023A 86 07            [24]  870 	mov	ar7,@r0
      00023C 18               [12]  871 	dec	r0
      00023D EE               [12]  872 	mov	a,r6
      00023E 4F               [12]  873 	orl	a,r7
      00023F 70 08            [24]  874 	jnz	00118$
                                    875 ;	./src/main.c:155: state[i] = BTN_LONG_PRESSED;
      000241 77 03            [12]  876 	mov	@r1,#0x03
      000243 09               [12]  877 	inc	r1
      000244 77 00            [12]  878 	mov	@r1,#0x00
      000246 19               [12]  879 	dec	r1
      000247 80 0F            [24]  880 	sjmp	00121$
      000249                        881 00118$:
                                    882 ;	./src/main.c:158: state[i] = BTN_RELEASED;
      000249 77 00            [12]  883 	mov	@r1,#0x00
      00024B 09               [12]  884 	inc	r1
      00024C 77 00            [12]  885 	mov	@r1,#0x00
      00024E 19               [12]  886 	dec	r1
                                    887 ;	./src/main.c:159: count[i] = 0;
      00024F EA               [12]  888 	mov	a,r2
      000250 24r36            [12]  889 	add	a,#_count
      000252 F8               [12]  890 	mov	r0,a
      000253 76 00            [12]  891 	mov	@r0,#0x00
      000255 08               [12]  892 	inc	r0
      000256 76 00            [12]  893 	mov	@r0,#0x00
                                    894 ;	./src/main.c:164: }
      000258                        895 00121$:
                                    896 ;	./src/main.c:167: if ((state[i] == BTN_RELEASED) && (prestate[i] == BTN_PRESSED))
      000258 EC               [12]  897 	mov	a,r4
      000259 2C               [12]  898 	add	a,r4
      00025A FE               [12]  899 	mov	r6,a
      00025B ED               [12]  900 	mov	a,r5
      00025C 33               [12]  901 	rlc	a
      00025D FF               [12]  902 	mov	r7,a
      00025E EE               [12]  903 	mov	a,r6
      00025F 24r12            [12]  904 	add	a,#_state
      000261 F9               [12]  905 	mov	r1,a
      000262 87 02            [24]  906 	mov	ar2,@r1
      000264 09               [12]  907 	inc	r1
      000265 87 03            [24]  908 	mov	ar3,@r1
      000267 19               [12]  909 	dec	r1
      000268 EA               [12]  910 	mov	a,r2
      000269 4B               [12]  911 	orl	a,r3
      00026A 60 03            [24]  912 	jz	00250$
      00026C 02r03r97         [24]  913 	ljmp	00143$
      00026F                        914 00250$:
      00026F EE               [12]  915 	mov	a,r6
      000270 24r24            [12]  916 	add	a,#_prestate
      000272 F9               [12]  917 	mov	r1,a
      000273 87 06            [24]  918 	mov	ar6,@r1
      000275 09               [12]  919 	inc	r1
      000276 87 07            [24]  920 	mov	ar7,@r1
      000278 19               [12]  921 	dec	r1
      000279 BE 02 05         [24]  922 	cjne	r6,#0x02,00251$
      00027C BF 00 02         [24]  923 	cjne	r7,#0x00,00251$
      00027F 80 03            [24]  924 	sjmp	00252$
      000281                        925 00251$:
      000281 02r03r97         [24]  926 	ljmp	00143$
      000284                        927 00252$:
                                    928 ;	./src/main.c:169: switch (i)
      000284 ED               [12]  929 	mov	a,r5
      000285 30 E7 03         [24]  930 	jnb	acc.7,00253$
      000288 02r03r85         [24]  931 	ljmp	00132$
      00028B                        932 00253$:
      00028B C3               [12]  933 	clr	c
      00028C 74 08            [12]  934 	mov	a,#0x08
      00028E 9C               [12]  935 	subb	a,r4
      00028F 74 80            [12]  936 	mov	a,#(0x00 ^ 0x80)
      000291 8D F0            [24]  937 	mov	b,r5
      000293 63 F0 80         [24]  938 	xrl	b,#0x80
      000296 95 F0            [12]  939 	subb	a,b
      000298 50 03            [24]  940 	jnc	00254$
      00029A 02r03r85         [24]  941 	ljmp	00132$
      00029D                        942 00254$:
      00029D EC               [12]  943 	mov	a,r4
      00029E 24 0A            [12]  944 	add	a,#(00255$-3-.)
      0002A0 83               [24]  945 	movc	a,@a+pc
      0002A1 F5 82            [12]  946 	mov	dpl,a
      0002A3 EC               [12]  947 	mov	a,r4
      0002A4 24 0D            [12]  948 	add	a,#(00256$-3-.)
      0002A6 83               [24]  949 	movc	a,@a+pc
      0002A7 F5 83            [12]  950 	mov	dph,a
      0002A9 E4               [12]  951 	clr	a
      0002AA 73               [24]  952 	jmp	@a+dptr
      0002AB                        953 00255$:
      0002ABrBD                     954 	.db	00122$
      0002ACrD4                     955 	.db	00123$
      0002ADrEB                     956 	.db	00124$
      0002AEr02                     957 	.db	00125$
      0002AFr19                     958 	.db	00126$
      0002B0r2F                     959 	.db	00127$
      0002B1r45                     960 	.db	00128$
      0002B2r5B                     961 	.db	00129$
      0002B3r71                     962 	.db	00130$
      0002B4                        963 00256$:
      0002B4s02                     964 	.db	00122$>>8
      0002B5s02                     965 	.db	00123$>>8
      0002B6s02                     966 	.db	00124$>>8
      0002B7s03                     967 	.db	00125$>>8
      0002B8s03                     968 	.db	00126$>>8
      0002B9s03                     969 	.db	00127$>>8
      0002BAs03                     970 	.db	00128$>>8
      0002BBs03                     971 	.db	00129$>>8
      0002BCs03                     972 	.db	00130$>>8
                                    973 ;	./src/main.c:171: case 0:
      0002BD                        974 00122$:
                                    975 ;	./src/main.c:172: patt = shift_left(1, patt);
      0002BD 85*48*49         [24]  976 	mov	_shift_left_PARM_2,_patt
      0002C0 90 00 01         [24]  977 	mov	dptr,#0x0001
      0002C3 C0 05            [24]  978 	push	ar5
      0002C5 C0 04            [24]  979 	push	ar4
      0002C7 12r00r99         [24]  980 	lcall	_shift_left
      0002CA 85 82*48         [24]  981 	mov	_patt,dpl
      0002CD D0 04            [24]  982 	pop	ar4
      0002CF D0 05            [24]  983 	pop	ar5
                                    984 ;	./src/main.c:173: break;
      0002D1 02r03r85         [24]  985 	ljmp	00132$
                                    986 ;	./src/main.c:174: case 1:
      0002D4                        987 00123$:
                                    988 ;	./src/main.c:175: patt = light_up(0, patt);
      0002D4 85*48*4B         [24]  989 	mov	_light_up_PARM_2,_patt
      0002D7 90 00 00         [24]  990 	mov	dptr,#0x0000
      0002DA C0 05            [24]  991 	push	ar5
      0002DC C0 04            [24]  992 	push	ar4
      0002DE 12r00rF7         [24]  993 	lcall	_light_up
      0002E1 85 82*48         [24]  994 	mov	_patt,dpl
      0002E4 D0 04            [24]  995 	pop	ar4
      0002E6 D0 05            [24]  996 	pop	ar5
                                    997 ;	./src/main.c:176: break;
      0002E8 02r03r85         [24]  998 	ljmp	00132$
                                    999 ;	./src/main.c:177: case 2:
      0002EB                       1000 00124$:
                                   1001 ;	./src/main.c:178: patt = light_up(1, patt);
      0002EB 85*48*4B         [24] 1002 	mov	_light_up_PARM_2,_patt
      0002EE 90 00 01         [24] 1003 	mov	dptr,#0x0001
      0002F1 C0 05            [24] 1004 	push	ar5
      0002F3 C0 04            [24] 1005 	push	ar4
      0002F5 12r00rF7         [24] 1006 	lcall	_light_up
      0002F8 85 82*48         [24] 1007 	mov	_patt,dpl
      0002FB D0 04            [24] 1008 	pop	ar4
      0002FD D0 05            [24] 1009 	pop	ar5
                                   1010 ;	./src/main.c:179: break;
      0002FF 02r03r85         [24] 1011 	ljmp	00132$
                                   1012 ;	./src/main.c:180: case 3:
      000302                       1013 00125$:
                                   1014 ;	./src/main.c:181: patt = light_up(2, patt);
      000302 85*48*4B         [24] 1015 	mov	_light_up_PARM_2,_patt
      000305 90 00 02         [24] 1016 	mov	dptr,#0x0002
      000308 C0 05            [24] 1017 	push	ar5
      00030A C0 04            [24] 1018 	push	ar4
      00030C 12r00rF7         [24] 1019 	lcall	_light_up
      00030F 85 82*48         [24] 1020 	mov	_patt,dpl
      000312 D0 04            [24] 1021 	pop	ar4
      000314 D0 05            [24] 1022 	pop	ar5
                                   1023 ;	./src/main.c:182: break;
      000316 02r03r85         [24] 1024 	ljmp	00132$
                                   1025 ;	./src/main.c:183: case 4:
      000319                       1026 00126$:
                                   1027 ;	./src/main.c:184: patt = shift_right(1, patt);
      000319 85*48*4A         [24] 1028 	mov	_shift_right_PARM_2,_patt
      00031C 90 00 01         [24] 1029 	mov	dptr,#0x0001
      00031F C0 05            [24] 1030 	push	ar5
      000321 C0 04            [24] 1031 	push	ar4
      000323 12r00rCD         [24] 1032 	lcall	_shift_right
      000326 85 82*48         [24] 1033 	mov	_patt,dpl
      000329 D0 04            [24] 1034 	pop	ar4
      00032B D0 05            [24] 1035 	pop	ar5
                                   1036 ;	./src/main.c:185: break;
                                   1037 ;	./src/main.c:186: case 5:
      00032D 80 56            [24] 1038 	sjmp	00132$
      00032F                       1039 00127$:
                                   1040 ;	./src/main.c:187: patt = light_up(4, patt);
      00032F 85*48*4B         [24] 1041 	mov	_light_up_PARM_2,_patt
      000332 90 00 04         [24] 1042 	mov	dptr,#0x0004
      000335 C0 05            [24] 1043 	push	ar5
      000337 C0 04            [24] 1044 	push	ar4
      000339 12r00rF7         [24] 1045 	lcall	_light_up
      00033C 85 82*48         [24] 1046 	mov	_patt,dpl
      00033F D0 04            [24] 1047 	pop	ar4
      000341 D0 05            [24] 1048 	pop	ar5
                                   1049 ;	./src/main.c:188: break;
                                   1050 ;	./src/main.c:189: case 6:
      000343 80 40            [24] 1051 	sjmp	00132$
      000345                       1052 00128$:
                                   1053 ;	./src/main.c:190: patt = light_up(5, patt);
      000345 85*48*4B         [24] 1054 	mov	_light_up_PARM_2,_patt
      000348 90 00 05         [24] 1055 	mov	dptr,#0x0005
      00034B C0 05            [24] 1056 	push	ar5
      00034D C0 04            [24] 1057 	push	ar4
      00034F 12r00rF7         [24] 1058 	lcall	_light_up
      000352 85 82*48         [24] 1059 	mov	_patt,dpl
      000355 D0 04            [24] 1060 	pop	ar4
      000357 D0 05            [24] 1061 	pop	ar5
                                   1062 ;	./src/main.c:191: break;
                                   1063 ;	./src/main.c:192: case 7:
      000359 80 2A            [24] 1064 	sjmp	00132$
      00035B                       1065 00129$:
                                   1066 ;	./src/main.c:193: patt = light_up(6, patt);
      00035B 85*48*4B         [24] 1067 	mov	_light_up_PARM_2,_patt
      00035E 90 00 06         [24] 1068 	mov	dptr,#0x0006
      000361 C0 05            [24] 1069 	push	ar5
      000363 C0 04            [24] 1070 	push	ar4
      000365 12r00rF7         [24] 1071 	lcall	_light_up
      000368 85 82*48         [24] 1072 	mov	_patt,dpl
      00036B D0 04            [24] 1073 	pop	ar4
      00036D D0 05            [24] 1074 	pop	ar5
                                   1075 ;	./src/main.c:194: break;
                                   1076 ;	./src/main.c:195: case 8:
      00036F 80 14            [24] 1077 	sjmp	00132$
      000371                       1078 00130$:
                                   1079 ;	./src/main.c:196: patt = shift_left(1, patt);
      000371 85*48*49         [24] 1080 	mov	_shift_left_PARM_2,_patt
      000374 90 00 01         [24] 1081 	mov	dptr,#0x0001
      000377 C0 05            [24] 1082 	push	ar5
      000379 C0 04            [24] 1083 	push	ar4
      00037B 12r00r99         [24] 1084 	lcall	_shift_left
      00037E 85 82*48         [24] 1085 	mov	_patt,dpl
      000381 D0 04            [24] 1086 	pop	ar4
      000383 D0 05            [24] 1087 	pop	ar5
                                   1088 ;	./src/main.c:200: }
      000385                       1089 00132$:
                                   1090 ;	./src/main.c:201: count[i] = 0;
      000385 EC               [12] 1091 	mov	a,r4
      000386 2C               [12] 1092 	add	a,r4
      000387 FE               [12] 1093 	mov	r6,a
      000388 ED               [12] 1094 	mov	a,r5
      000389 33               [12] 1095 	rlc	a
      00038A FF               [12] 1096 	mov	r7,a
      00038B EE               [12] 1097 	mov	a,r6
      00038C 24r36            [12] 1098 	add	a,#_count
      00038E F8               [12] 1099 	mov	r0,a
      00038F 76 00            [12] 1100 	mov	@r0,#0x00
      000391 08               [12] 1101 	inc	r0
      000392 76 00            [12] 1102 	mov	@r0,#0x00
      000394 02r04r0F         [24] 1103 	ljmp	00144$
      000397                       1104 00143$:
                                   1105 ;	./src/main.c:203: else if (state[i] == BTN_LONG_PRESSED)
      000397 EC               [12] 1106 	mov	a,r4
      000398 2C               [12] 1107 	add	a,r4
      000399 FE               [12] 1108 	mov	r6,a
      00039A ED               [12] 1109 	mov	a,r5
      00039B 33               [12] 1110 	rlc	a
      00039C EE               [12] 1111 	mov	a,r6
      00039D 24r12            [12] 1112 	add	a,#_state
      00039F F9               [12] 1113 	mov	r1,a
      0003A0 87 06            [24] 1114 	mov	ar6,@r1
      0003A2 09               [12] 1115 	inc	r1
      0003A3 87 07            [24] 1116 	mov	ar7,@r1
      0003A5 19               [12] 1117 	dec	r1
      0003A6 BE 03 66         [24] 1118 	cjne	r6,#0x03,00144$
      0003A9 BF 00 63         [24] 1119 	cjne	r7,#0x00,00144$
                                   1120 ;	./src/main.c:205: switch (i)
      0003AC BC 00 05         [24] 1121 	cjne	r4,#0x00,00259$
      0003AF BD 00 02         [24] 1122 	cjne	r5,#0x00,00259$
      0003B2 80 10            [24] 1123 	sjmp	00133$
      0003B4                       1124 00259$:
      0003B4 BC 04 05         [24] 1125 	cjne	r4,#0x04,00260$
      0003B7 BD 00 02         [24] 1126 	cjne	r5,#0x00,00260$
      0003BA 80 1E            [24] 1127 	sjmp	00134$
      0003BC                       1128 00260$:
                                   1129 ;	./src/main.c:207: case 0:
      0003BC BC 08 50         [24] 1130 	cjne	r4,#0x08,00144$
      0003BF BD 00 4D         [24] 1131 	cjne	r5,#0x00,00144$
      0003C2 80 2C            [24] 1132 	sjmp	00135$
      0003C4                       1133 00133$:
                                   1134 ;	./src/main.c:208: patt = light_up(9, patt);
      0003C4 85*48*4B         [24] 1135 	mov	_light_up_PARM_2,_patt
      0003C7 90 00 09         [24] 1136 	mov	dptr,#0x0009
      0003CA C0 05            [24] 1137 	push	ar5
      0003CC C0 04            [24] 1138 	push	ar4
      0003CE 12r00rF7         [24] 1139 	lcall	_light_up
      0003D1 85 82*48         [24] 1140 	mov	_patt,dpl
      0003D4 D0 04            [24] 1141 	pop	ar4
      0003D6 D0 05            [24] 1142 	pop	ar5
                                   1143 ;	./src/main.c:209: break;
                                   1144 ;	./src/main.c:210: case 4:
      0003D8 80 35            [24] 1145 	sjmp	00144$
      0003DA                       1146 00134$:
                                   1147 ;	./src/main.c:211: patt = shift_right(1, patt);
      0003DA 85*48*4A         [24] 1148 	mov	_shift_right_PARM_2,_patt
      0003DD 90 00 01         [24] 1149 	mov	dptr,#0x0001
      0003E0 C0 05            [24] 1150 	push	ar5
      0003E2 C0 04            [24] 1151 	push	ar4
      0003E4 12r00rCD         [24] 1152 	lcall	_shift_right
      0003E7 85 82*48         [24] 1153 	mov	_patt,dpl
      0003EA D0 04            [24] 1154 	pop	ar4
      0003EC D0 05            [24] 1155 	pop	ar5
                                   1156 ;	./src/main.c:212: break;
                                   1157 ;	./src/main.c:213: case 8:
      0003EE 80 1F            [24] 1158 	sjmp	00144$
      0003F0                       1159 00135$:
                                   1160 ;	./src/main.c:214: if (long_flag)
      0003F0 E5*4C            [12] 1161 	mov	a,_main_long_flag_65536_20
      0003F2 45*4D            [12] 1162 	orl	a,(_main_long_flag_65536_20 + 1)
      0003F4 60 19            [24] 1163 	jz	00144$
                                   1164 ;	./src/main.c:216: patt = shift_left(2, patt);
      0003F6 85*48*49         [24] 1165 	mov	_shift_left_PARM_2,_patt
      0003F9 90 00 02         [24] 1166 	mov	dptr,#0x0002
      0003FC C0 05            [24] 1167 	push	ar5
      0003FE C0 04            [24] 1168 	push	ar4
      000400 12r00r99         [24] 1169 	lcall	_shift_left
      000403 85 82*48         [24] 1170 	mov	_patt,dpl
      000406 D0 04            [24] 1171 	pop	ar4
      000408 D0 05            [24] 1172 	pop	ar5
                                   1173 ;	./src/main.c:217: long_flag = 0;
      00040A E4               [12] 1174 	clr	a
      00040B F5*4C            [12] 1175 	mov	_main_long_flag_65536_20,a
      00040D F5*4D            [12] 1176 	mov	(_main_long_flag_65536_20 + 1),a
                                   1177 ;	./src/main.c:222: }
      00040F                       1178 00144$:
                                   1179 ;	./src/main.c:225: prestate[i] = state[i];
      00040F EC               [12] 1180 	mov	a,r4
      000410 2C               [12] 1181 	add	a,r4
      000411 FE               [12] 1182 	mov	r6,a
      000412 ED               [12] 1183 	mov	a,r5
      000413 33               [12] 1184 	rlc	a
      000414 EE               [12] 1185 	mov	a,r6
      000415 24r24            [12] 1186 	add	a,#_prestate
      000417 F9               [12] 1187 	mov	r1,a
      000418 EE               [12] 1188 	mov	a,r6
      000419 24r12            [12] 1189 	add	a,#_state
      00041B F8               [12] 1190 	mov	r0,a
      00041C 86 06            [24] 1191 	mov	ar6,@r0
      00041E 08               [12] 1192 	inc	r0
      00041F 86 07            [24] 1193 	mov	ar7,@r0
      000421 18               [12] 1194 	dec	r0
      000422 A7 06            [24] 1195 	mov	@r1,ar6
      000424 09               [12] 1196 	inc	r1
      000425 A7 07            [24] 1197 	mov	@r1,ar7
      000427 19               [12] 1198 	dec	r1
                                   1199 ;	./src/main.c:123: for (int i = 0; i < 9; i++)
      000428 0C               [12] 1200 	inc	r4
      000429 BC 00 01         [24] 1201 	cjne	r4,#0x00,00263$
      00042C 0D               [12] 1202 	inc	r5
      00042D                       1203 00263$:
                                   1204 ;	./src/main.c:228: }
      00042D 02r01r73         [24] 1205 	ljmp	00154$
                                   1206 	.area CSEG    (CODE)
                                   1207 	.area CONST   (CODE)
                                   1208 	.area XINIT   (CODE)
                                   1209 	.area CABS    (ABS,CODE)
