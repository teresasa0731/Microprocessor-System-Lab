                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _EX1_int
                                     12 	.globl _EX0_int
                                     13 	.globl _PWM_Dimming_LED
                                     14 	.globl _main
                                     15 	.globl _delay_ms
                                     16 	.globl _CY
                                     17 	.globl _AC
                                     18 	.globl _F0
                                     19 	.globl _RS1
                                     20 	.globl _RS0
                                     21 	.globl _OV
                                     22 	.globl _F1
                                     23 	.globl _P
                                     24 	.globl _PS
                                     25 	.globl _PT1
                                     26 	.globl _PX1
                                     27 	.globl _PT0
                                     28 	.globl _PX0
                                     29 	.globl _RD
                                     30 	.globl _WR
                                     31 	.globl _T1
                                     32 	.globl _T0
                                     33 	.globl _INT1
                                     34 	.globl _INT0
                                     35 	.globl _TXD
                                     36 	.globl _RXD
                                     37 	.globl _P3_7
                                     38 	.globl _P3_6
                                     39 	.globl _P3_5
                                     40 	.globl _P3_4
                                     41 	.globl _P3_3
                                     42 	.globl _P3_2
                                     43 	.globl _P3_1
                                     44 	.globl _P3_0
                                     45 	.globl _EA
                                     46 	.globl _ES
                                     47 	.globl _ET1
                                     48 	.globl _EX1
                                     49 	.globl _ET0
                                     50 	.globl _EX0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _SM0
                                     60 	.globl _SM1
                                     61 	.globl _SM2
                                     62 	.globl _REN
                                     63 	.globl _TB8
                                     64 	.globl _RB8
                                     65 	.globl _TI
                                     66 	.globl _RI
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _TF1
                                     76 	.globl _TR1
                                     77 	.globl _TF0
                                     78 	.globl _TR0
                                     79 	.globl _IE1
                                     80 	.globl _IT1
                                     81 	.globl _IE0
                                     82 	.globl _IT0
                                     83 	.globl _P0_7
                                     84 	.globl _P0_6
                                     85 	.globl _P0_5
                                     86 	.globl _P0_4
                                     87 	.globl _P0_3
                                     88 	.globl _P0_2
                                     89 	.globl _P0_1
                                     90 	.globl _P0_0
                                     91 	.globl _B
                                     92 	.globl _ACC
                                     93 	.globl _PSW
                                     94 	.globl _IP
                                     95 	.globl _P3
                                     96 	.globl _IE
                                     97 	.globl _P2
                                     98 	.globl _SBUF
                                     99 	.globl _SCON
                                    100 	.globl _P1
                                    101 	.globl _TH1
                                    102 	.globl _TH0
                                    103 	.globl _TL1
                                    104 	.globl _TL0
                                    105 	.globl _TMOD
                                    106 	.globl _TCON
                                    107 	.globl _PCON
                                    108 	.globl _DPH
                                    109 	.globl _DPL
                                    110 	.globl _SP
                                    111 	.globl _P0
                                    112 	.globl _duty_cycle
                                    113 	.globl _pwm_count
                                    114 ;--------------------------------------------------------
                                    115 ; special function registers
                                    116 ;--------------------------------------------------------
                                    117 	.area RSEG    (ABS,DATA)
      000000                        118 	.org 0x0000
                           000080   119 _P0	=	0x0080
                           000081   120 _SP	=	0x0081
                           000082   121 _DPL	=	0x0082
                           000083   122 _DPH	=	0x0083
                           000087   123 _PCON	=	0x0087
                           000088   124 _TCON	=	0x0088
                           000089   125 _TMOD	=	0x0089
                           00008A   126 _TL0	=	0x008a
                           00008B   127 _TL1	=	0x008b
                           00008C   128 _TH0	=	0x008c
                           00008D   129 _TH1	=	0x008d
                           000090   130 _P1	=	0x0090
                           000098   131 _SCON	=	0x0098
                           000099   132 _SBUF	=	0x0099
                           0000A0   133 _P2	=	0x00a0
                           0000A8   134 _IE	=	0x00a8
                           0000B0   135 _P3	=	0x00b0
                           0000B8   136 _IP	=	0x00b8
                           0000D0   137 _PSW	=	0x00d0
                           0000E0   138 _ACC	=	0x00e0
                           0000F0   139 _B	=	0x00f0
                                    140 ;--------------------------------------------------------
                                    141 ; special function bits
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0_0	=	0x0080
                           000081   146 _P0_1	=	0x0081
                           000082   147 _P0_2	=	0x0082
                           000083   148 _P0_3	=	0x0083
                           000084   149 _P0_4	=	0x0084
                           000085   150 _P0_5	=	0x0085
                           000086   151 _P0_6	=	0x0086
                           000087   152 _P0_7	=	0x0087
                           000088   153 _IT0	=	0x0088
                           000089   154 _IE0	=	0x0089
                           00008A   155 _IT1	=	0x008a
                           00008B   156 _IE1	=	0x008b
                           00008C   157 _TR0	=	0x008c
                           00008D   158 _TF0	=	0x008d
                           00008E   159 _TR1	=	0x008e
                           00008F   160 _TF1	=	0x008f
                           000090   161 _P1_0	=	0x0090
                           000091   162 _P1_1	=	0x0091
                           000092   163 _P1_2	=	0x0092
                           000093   164 _P1_3	=	0x0093
                           000094   165 _P1_4	=	0x0094
                           000095   166 _P1_5	=	0x0095
                           000096   167 _P1_6	=	0x0096
                           000097   168 _P1_7	=	0x0097
                           000098   169 _RI	=	0x0098
                           000099   170 _TI	=	0x0099
                           00009A   171 _RB8	=	0x009a
                           00009B   172 _TB8	=	0x009b
                           00009C   173 _REN	=	0x009c
                           00009D   174 _SM2	=	0x009d
                           00009E   175 _SM1	=	0x009e
                           00009F   176 _SM0	=	0x009f
                           0000A0   177 _P2_0	=	0x00a0
                           0000A1   178 _P2_1	=	0x00a1
                           0000A2   179 _P2_2	=	0x00a2
                           0000A3   180 _P2_3	=	0x00a3
                           0000A4   181 _P2_4	=	0x00a4
                           0000A5   182 _P2_5	=	0x00a5
                           0000A6   183 _P2_6	=	0x00a6
                           0000A7   184 _P2_7	=	0x00a7
                           0000A8   185 _EX0	=	0x00a8
                           0000A9   186 _ET0	=	0x00a9
                           0000AA   187 _EX1	=	0x00aa
                           0000AB   188 _ET1	=	0x00ab
                           0000AC   189 _ES	=	0x00ac
                           0000AF   190 _EA	=	0x00af
                           0000B0   191 _P3_0	=	0x00b0
                           0000B1   192 _P3_1	=	0x00b1
                           0000B2   193 _P3_2	=	0x00b2
                           0000B3   194 _P3_3	=	0x00b3
                           0000B4   195 _P3_4	=	0x00b4
                           0000B5   196 _P3_5	=	0x00b5
                           0000B6   197 _P3_6	=	0x00b6
                           0000B7   198 _P3_7	=	0x00b7
                           0000B0   199 _RXD	=	0x00b0
                           0000B1   200 _TXD	=	0x00b1
                           0000B2   201 _INT0	=	0x00b2
                           0000B3   202 _INT1	=	0x00b3
                           0000B4   203 _T0	=	0x00b4
                           0000B5   204 _T1	=	0x00b5
                           0000B6   205 _WR	=	0x00b6
                           0000B7   206 _RD	=	0x00b7
                           0000B8   207 _PX0	=	0x00b8
                           0000B9   208 _PT0	=	0x00b9
                           0000BA   209 _PX1	=	0x00ba
                           0000BB   210 _PT1	=	0x00bb
                           0000BC   211 _PS	=	0x00bc
                           0000D0   212 _P	=	0x00d0
                           0000D1   213 _F1	=	0x00d1
                           0000D2   214 _OV	=	0x00d2
                           0000D3   215 _RS0	=	0x00d3
                           0000D4   216 _RS1	=	0x00d4
                           0000D5   217 _F0	=	0x00d5
                           0000D6   218 _AC	=	0x00d6
                           0000D7   219 _CY	=	0x00d7
                                    220 ;--------------------------------------------------------
                                    221 ; overlayable register banks
                                    222 ;--------------------------------------------------------
                                    223 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        224 	.ds 8
                                    225 ;--------------------------------------------------------
                                    226 ; overlayable bit register bank
                                    227 ;--------------------------------------------------------
                                    228 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        229 bits:
      000000                        230 	.ds 1
                           008000   231 	b0 = bits[0]
                           008100   232 	b1 = bits[1]
                           008200   233 	b2 = bits[2]
                           008300   234 	b3 = bits[3]
                           008400   235 	b4 = bits[4]
                           008500   236 	b5 = bits[5]
                           008600   237 	b6 = bits[6]
                           008700   238 	b7 = bits[7]
                                    239 ;--------------------------------------------------------
                                    240 ; internal ram data
                                    241 ;--------------------------------------------------------
                                    242 	.area DSEG    (DATA)
      000000                        243 _pwm_count::
      000000                        244 	.ds 2
      000002                        245 _duty_cycle::
      000002                        246 	.ds 2
                                    247 ;--------------------------------------------------------
                                    248 ; overlayable items in internal ram
                                    249 ;--------------------------------------------------------
                                    250 ;--------------------------------------------------------
                                    251 ; Stack segment in internal ram
                                    252 ;--------------------------------------------------------
                                    253 	.area SSEG
      000000                        254 __start__stack:
      000000                        255 	.ds	1
                                    256 
                                    257 ;--------------------------------------------------------
                                    258 ; indirectly addressable internal ram data
                                    259 ;--------------------------------------------------------
                                    260 	.area ISEG    (DATA)
                                    261 ;--------------------------------------------------------
                                    262 ; absolute internal ram data
                                    263 ;--------------------------------------------------------
                                    264 	.area IABS    (ABS,DATA)
                                    265 	.area IABS    (ABS,DATA)
                                    266 ;--------------------------------------------------------
                                    267 ; bit data
                                    268 ;--------------------------------------------------------
                                    269 	.area BSEG    (BIT)
                                    270 ;--------------------------------------------------------
                                    271 ; paged external ram data
                                    272 ;--------------------------------------------------------
                                    273 	.area PSEG    (PAG,XDATA)
                                    274 ;--------------------------------------------------------
                                    275 ; uninitialized external ram data
                                    276 ;--------------------------------------------------------
                                    277 	.area XSEG    (XDATA)
                                    278 ;--------------------------------------------------------
                                    279 ; absolute external ram data
                                    280 ;--------------------------------------------------------
                                    281 	.area XABS    (ABS,XDATA)
                                    282 ;--------------------------------------------------------
                                    283 ; initialized external ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area XISEG   (XDATA)
                                    286 	.area HOME    (CODE)
                                    287 	.area GSINIT0 (CODE)
                                    288 	.area GSINIT1 (CODE)
                                    289 	.area GSINIT2 (CODE)
                                    290 	.area GSINIT3 (CODE)
                                    291 	.area GSINIT4 (CODE)
                                    292 	.area GSINIT5 (CODE)
                                    293 	.area GSINIT  (CODE)
                                    294 	.area GSFINAL (CODE)
                                    295 	.area CSEG    (CODE)
                                    296 ;--------------------------------------------------------
                                    297 ; interrupt vector
                                    298 ;--------------------------------------------------------
                                    299 	.area HOME    (CODE)
      000000                        300 __interrupt_vect:
      000000 02r00r00         [24]  301 	ljmp	__sdcc_gsinit_startup
      000003 02r00rBE         [24]  302 	ljmp	_EX0_int
      000006                        303 	.ds	5
      00000B 02r00r78         [24]  304 	ljmp	_PWM_Dimming_LED
      00000E                        305 	.ds	5
      000013 02r01r06         [24]  306 	ljmp	_EX1_int
                                    307 ;--------------------------------------------------------
                                    308 ; global & static initialisations
                                    309 ;--------------------------------------------------------
                                    310 	.area HOME    (CODE)
                                    311 	.area GSINIT  (CODE)
                                    312 	.area GSFINAL (CODE)
                                    313 	.area GSINIT  (CODE)
                                    314 	.globl __sdcc_gsinit_startup
                                    315 	.globl __sdcc_program_startup
                                    316 	.globl __start__stack
                                    317 	.globl __mcs51_genXINIT
                                    318 	.globl __mcs51_genXRAMCLEAR
                                    319 	.globl __mcs51_genRAMCLEAR
                                    320 ;	./src/main.c:11: int pwm_count = 0;
      000000 E4               [12]  321 	clr	a
      000001 F5*00            [12]  322 	mov	_pwm_count,a
      000003 F5*01            [12]  323 	mov	(_pwm_count + 1),a
                                    324 ;	./src/main.c:12: int duty_cycle = 0;
      000005 F5*02            [12]  325 	mov	_duty_cycle,a
      000007 F5*03            [12]  326 	mov	(_duty_cycle + 1),a
                                    327 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  328 	ljmp	__sdcc_program_startup
                                    329 ;--------------------------------------------------------
                                    330 ; Home
                                    331 ;--------------------------------------------------------
                                    332 	.area HOME    (CODE)
                                    333 	.area HOME    (CODE)
      000016                        334 __sdcc_program_startup:
      000016 02r00r00         [24]  335 	ljmp	_main
                                    336 ;	return from main will return to caller
                                    337 ;--------------------------------------------------------
                                    338 ; code
                                    339 ;--------------------------------------------------------
                                    340 	.area CSEG    (CODE)
                                    341 ;------------------------------------------------------------
                                    342 ;Allocation info for local variables in function 'main'
                                    343 ;------------------------------------------------------------
                                    344 ;i                         Allocated to registers r6 r7 
                                    345 ;------------------------------------------------------------
                                    346 ;	./src/main.c:13: int main(void)
                                    347 ;	-----------------------------------------
                                    348 ;	 function main
                                    349 ;	-----------------------------------------
      000000                        350 _main:
                           000007   351 	ar7 = 0x07
                           000006   352 	ar6 = 0x06
                           000005   353 	ar5 = 0x05
                           000004   354 	ar4 = 0x04
                           000003   355 	ar3 = 0x03
                           000002   356 	ar2 = 0x02
                           000001   357 	ar1 = 0x01
                           000000   358 	ar0 = 0x00
                                    359 ;	./src/main.c:16: TMOD = 0x01;		//timer1:16-bit timer
      000000 75 89 01         [24]  360 	mov	_TMOD,#0x01
                                    361 ;	./src/main.c:17: TH0 = freq >> 8;
      000003 75 8C FF         [24]  362 	mov	_TH0,#0xff
                                    363 ;	./src/main.c:18: TL0 = freq & 0xFF;  
      000006 75 8A 9C         [24]  364 	mov	_TL0,#0x9c
                                    365 ;	./src/main.c:21: EA = 1;	
                                    366 ;	assignBit
      000009 D2 AF            [12]  367 	setb	_EA
                                    368 ;	./src/main.c:22: ET0 = 1;	//TF0 
                                    369 ;	assignBit
      00000B D2 A9            [12]  370 	setb	_ET0
                                    371 ;	./src/main.c:23: EX0 = 1; 	//INT0
                                    372 ;	assignBit
      00000D D2 A8            [12]  373 	setb	_EX0
                                    374 ;	./src/main.c:24: EX1 = 1;	//INT1	
                                    375 ;	assignBit
      00000F D2 AA            [12]  376 	setb	_EX1
                                    377 ;	./src/main.c:27: TR0 = 1;
                                    378 ;	assignBit
      000011 D2 8C            [12]  379 	setb	_TR0
                                    380 ;	./src/main.c:28: IT0 = 1;
                                    381 ;	assignBit
      000013 D2 88            [12]  382 	setb	_IT0
                                    383 ;	./src/main.c:29: IT1 = 0; 
                                    384 ;	assignBit
      000015 C2 8A            [12]  385 	clr	_IT1
                                    386 ;	./src/main.c:31: PWM_Pin = 0;
                                    387 ;	assignBit
      000017 C2 90            [12]  388 	clr	_P1_0
                                    389 ;	./src/main.c:32: Led = 0;
                                    390 ;	assignBit
      000019 C2 97            [12]  391 	clr	_P1_7
                                    392 ;	./src/main.c:36: for(i = 0; i <= PWM_CNT_UPPER; i++)
      00001B                        393 00112$:
      00001B 7E 00            [12]  394 	mov	r6,#0x00
      00001D 7F 00            [12]  395 	mov	r7,#0x00
      00001F                        396 00106$:
                                    397 ;	./src/main.c:38: duty_cycle = i;
      00001F 8E*02            [24]  398 	mov	_duty_cycle,r6
      000021 8F*03            [24]  399 	mov	(_duty_cycle + 1),r7
                                    400 ;	./src/main.c:39: delay_ms(50);
      000023 90 00 32         [24]  401 	mov	dptr,#0x0032
      000026 C0 07            [24]  402 	push	ar7
      000028 C0 06            [24]  403 	push	ar6
      00002A 12r00r00         [24]  404 	lcall	_delay_ms
      00002D D0 06            [24]  405 	pop	ar6
      00002F D0 07            [24]  406 	pop	ar7
                                    407 ;	./src/main.c:36: for(i = 0; i <= PWM_CNT_UPPER; i++)
      000031 0E               [12]  408 	inc	r6
      000032 BE 00 01         [24]  409 	cjne	r6,#0x00,00134$
      000035 0F               [12]  410 	inc	r7
      000036                        411 00134$:
      000036 C3               [12]  412 	clr	c
      000037 74 64            [12]  413 	mov	a,#0x64
      000039 9E               [12]  414 	subb	a,r6
      00003A 74 80            [12]  415 	mov	a,#(0x00 ^ 0x80)
      00003C 8F F0            [24]  416 	mov	b,r7
      00003E 63 F0 80         [24]  417 	xrl	b,#0x80
      000041 95 F0            [12]  418 	subb	a,b
      000043 50 DA            [24]  419 	jnc	00106$
                                    420 ;	./src/main.c:42: for(i = 0; i <= PWM_CNT_UPPER; i++)
      000045 7E 00            [12]  421 	mov	r6,#0x00
      000047 7F 00            [12]  422 	mov	r7,#0x00
      000049                        423 00108$:
                                    424 ;	./src/main.c:44: duty_cycle -= i;
      000049 E5*02            [12]  425 	mov	a,_duty_cycle
      00004B C3               [12]  426 	clr	c
      00004C 9E               [12]  427 	subb	a,r6
      00004D F5*02            [12]  428 	mov	_duty_cycle,a
      00004F E5*03            [12]  429 	mov	a,(_duty_cycle + 1)
      000051 9F               [12]  430 	subb	a,r7
      000052 F5*03            [12]  431 	mov	(_duty_cycle + 1),a
                                    432 ;	./src/main.c:45: delay_ms(50);
      000054 90 00 32         [24]  433 	mov	dptr,#0x0032
      000057 C0 07            [24]  434 	push	ar7
      000059 C0 06            [24]  435 	push	ar6
      00005B 12r00r00         [24]  436 	lcall	_delay_ms
      00005E D0 06            [24]  437 	pop	ar6
      000060 D0 07            [24]  438 	pop	ar7
                                    439 ;	./src/main.c:42: for(i = 0; i <= PWM_CNT_UPPER; i++)
      000062 0E               [12]  440 	inc	r6
      000063 BE 00 01         [24]  441 	cjne	r6,#0x00,00136$
      000066 0F               [12]  442 	inc	r7
      000067                        443 00136$:
      000067 C3               [12]  444 	clr	c
      000068 74 64            [12]  445 	mov	a,#0x64
      00006A 9E               [12]  446 	subb	a,r6
      00006B 74 80            [12]  447 	mov	a,#(0x00 ^ 0x80)
      00006D 8F F0            [24]  448 	mov	b,r7
      00006F 63 F0 80         [24]  449 	xrl	b,#0x80
      000072 95 F0            [12]  450 	subb	a,b
      000074 50 D3            [24]  451 	jnc	00108$
                                    452 ;	./src/main.c:48: }
      000076 80 A3            [24]  453 	sjmp	00112$
                                    454 ;------------------------------------------------------------
                                    455 ;Allocation info for local variables in function 'PWM_Dimming_LED'
                                    456 ;------------------------------------------------------------
                                    457 ;	./src/main.c:49: void PWM_Dimming_LED(void) __interrupt (1)
                                    458 ;	-----------------------------------------
                                    459 ;	 function PWM_Dimming_LED
                                    460 ;	-----------------------------------------
      000078                        461 _PWM_Dimming_LED:
      000078 C0 E0            [24]  462 	push	acc
      00007A C0 F0            [24]  463 	push	b
      00007C C0 D0            [24]  464 	push	psw
                                    465 ;	./src/main.c:51: TH0 = freq >> 8;
      00007E 75 8C FF         [24]  466 	mov	_TH0,#0xff
                                    467 ;	./src/main.c:52: TL0 = freq & 0xFF;   
      000081 75 8A 9C         [24]  468 	mov	_TL0,#0x9c
                                    469 ;	./src/main.c:54: pwm_count++;
      000084 05*00            [12]  470 	inc	_pwm_count
      000086 E4               [12]  471 	clr	a
      000087 B5*00 02         [24]  472 	cjne	a,_pwm_count,00116$
      00008A 05*01            [12]  473 	inc	(_pwm_count + 1)
      00008C                        474 00116$:
                                    475 ;	./src/main.c:55: if(pwm_count >= PWM_CNT_UPPER)
      00008C C3               [12]  476 	clr	c
      00008D E5*00            [12]  477 	mov	a,_pwm_count
      00008F 94 64            [12]  478 	subb	a,#0x64
      000091 E5*01            [12]  479 	mov	a,(_pwm_count + 1)
      000093 64 80            [12]  480 	xrl	a,#0x80
      000095 94 80            [12]  481 	subb	a,#0x80
      000097 40 05            [24]  482 	jc	00102$
                                    483 ;	./src/main.c:56: pwm_count = 0;
      000099 E4               [12]  484 	clr	a
      00009A F5*00            [12]  485 	mov	_pwm_count,a
      00009C F5*01            [12]  486 	mov	(_pwm_count + 1),a
      00009E                        487 00102$:
                                    488 ;	./src/main.c:58: if(duty_cycle > pwm_count)  
      00009E C3               [12]  489 	clr	c
      00009F E5*00            [12]  490 	mov	a,_pwm_count
      0000A1 95*02            [12]  491 	subb	a,_duty_cycle
      0000A3 E5*01            [12]  492 	mov	a,(_pwm_count + 1)
      0000A5 64 80            [12]  493 	xrl	a,#0x80
      0000A7 85*03 F0         [24]  494 	mov	b,(_duty_cycle + 1)
      0000AA 63 F0 80         [24]  495 	xrl	b,#0x80
      0000AD 95 F0            [12]  496 	subb	a,b
      0000AF 50 04            [24]  497 	jnc	00104$
                                    498 ;	./src/main.c:59: PWM_Pin = 0;
                                    499 ;	assignBit
      0000B1 C2 90            [12]  500 	clr	_P1_0
      0000B3 80 02            [24]  501 	sjmp	00106$
      0000B5                        502 00104$:
                                    503 ;	./src/main.c:61: PWM_Pin = 1;
                                    504 ;	assignBit
      0000B5 D2 90            [12]  505 	setb	_P1_0
      0000B7                        506 00106$:
                                    507 ;	./src/main.c:63: }
      0000B7 D0 D0            [24]  508 	pop	psw
      0000B9 D0 F0            [24]  509 	pop	b
      0000BB D0 E0            [24]  510 	pop	acc
      0000BD 32               [24]  511 	reti
                                    512 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    513 ;	eliminated unneeded push/pop dpl
                                    514 ;	eliminated unneeded push/pop dph
                                    515 ;------------------------------------------------------------
                                    516 ;Allocation info for local variables in function 'EX0_int'
                                    517 ;------------------------------------------------------------
                                    518 ;	./src/main.c:65: void EX0_int(void) __interrupt (0) // External interrupt 0
                                    519 ;	-----------------------------------------
                                    520 ;	 function EX0_int
                                    521 ;	-----------------------------------------
      0000BE                        522 _EX0_int:
      0000BE C0*00            [24]  523 	push	bits
      0000C0 C0 E0            [24]  524 	push	acc
      0000C2 C0 F0            [24]  525 	push	b
      0000C4 C0 82            [24]  526 	push	dpl
      0000C6 C0 83            [24]  527 	push	dph
      0000C8 C0 07            [24]  528 	push	(0+7)
      0000CA C0 06            [24]  529 	push	(0+6)
      0000CC C0 05            [24]  530 	push	(0+5)
      0000CE C0 04            [24]  531 	push	(0+4)
      0000D0 C0 03            [24]  532 	push	(0+3)
      0000D2 C0 02            [24]  533 	push	(0+2)
      0000D4 C0 01            [24]  534 	push	(0+1)
      0000D6 C0 00            [24]  535 	push	(0+0)
      0000D8 C0 D0            [24]  536 	push	psw
      0000DA 75 D0 00         [24]  537 	mov	psw,#0x00
                                    538 ;	./src/main.c:68: P1 = 0x00;
      0000DD 75 90 00         [24]  539 	mov	_P1,#0x00
                                    540 ;	./src/main.c:69: delay_ms(10000); 
      0000E0 90 27 10         [24]  541 	mov	dptr,#0x2710
      0000E3 12r00r00         [24]  542 	lcall	_delay_ms
                                    543 ;	./src/main.c:70: P1 = 0x7F;
      0000E6 75 90 7F         [24]  544 	mov	_P1,#0x7f
                                    545 ;	./src/main.c:72: } 
      0000E9 D0 D0            [24]  546 	pop	psw
      0000EB D0 00            [24]  547 	pop	(0+0)
      0000ED D0 01            [24]  548 	pop	(0+1)
      0000EF D0 02            [24]  549 	pop	(0+2)
      0000F1 D0 03            [24]  550 	pop	(0+3)
      0000F3 D0 04            [24]  551 	pop	(0+4)
      0000F5 D0 05            [24]  552 	pop	(0+5)
      0000F7 D0 06            [24]  553 	pop	(0+6)
      0000F9 D0 07            [24]  554 	pop	(0+7)
      0000FB D0 83            [24]  555 	pop	dph
      0000FD D0 82            [24]  556 	pop	dpl
      0000FF D0 F0            [24]  557 	pop	b
      000101 D0 E0            [24]  558 	pop	acc
      000103 D0*00            [24]  559 	pop	bits
      000105 32               [24]  560 	reti
                                    561 ;------------------------------------------------------------
                                    562 ;Allocation info for local variables in function 'EX1_int'
                                    563 ;------------------------------------------------------------
                                    564 ;	./src/main.c:74: void EX1_int(void) __interrupt (2) // External interrupt 1
                                    565 ;	-----------------------------------------
                                    566 ;	 function EX1_int
                                    567 ;	-----------------------------------------
      000106                        568 _EX1_int:
      000106 C0*00            [24]  569 	push	bits
      000108 C0 E0            [24]  570 	push	acc
      00010A C0 F0            [24]  571 	push	b
      00010C C0 82            [24]  572 	push	dpl
      00010E C0 83            [24]  573 	push	dph
      000110 C0 07            [24]  574 	push	(0+7)
      000112 C0 06            [24]  575 	push	(0+6)
      000114 C0 05            [24]  576 	push	(0+5)
      000116 C0 04            [24]  577 	push	(0+4)
      000118 C0 03            [24]  578 	push	(0+3)
      00011A C0 02            [24]  579 	push	(0+2)
      00011C C0 01            [24]  580 	push	(0+1)
      00011E C0 00            [24]  581 	push	(0+0)
      000120 C0 D0            [24]  582 	push	psw
      000122 75 D0 00         [24]  583 	mov	psw,#0x00
                                    584 ;	./src/main.c:77: P1 = 0x00;
      000125 75 90 00         [24]  585 	mov	_P1,#0x00
                                    586 ;	./src/main.c:78: delay_ms(10000); 
      000128 90 27 10         [24]  587 	mov	dptr,#0x2710
      00012B 12r00r00         [24]  588 	lcall	_delay_ms
                                    589 ;	./src/main.c:79: P1 = 0x7F;
      00012E 75 90 7F         [24]  590 	mov	_P1,#0x7f
                                    591 ;	./src/main.c:81: } 	
      000131 D0 D0            [24]  592 	pop	psw
      000133 D0 00            [24]  593 	pop	(0+0)
      000135 D0 01            [24]  594 	pop	(0+1)
      000137 D0 02            [24]  595 	pop	(0+2)
      000139 D0 03            [24]  596 	pop	(0+3)
      00013B D0 04            [24]  597 	pop	(0+4)
      00013D D0 05            [24]  598 	pop	(0+5)
      00013F D0 06            [24]  599 	pop	(0+6)
      000141 D0 07            [24]  600 	pop	(0+7)
      000143 D0 83            [24]  601 	pop	dph
      000145 D0 82            [24]  602 	pop	dpl
      000147 D0 F0            [24]  603 	pop	b
      000149 D0 E0            [24]  604 	pop	acc
      00014B D0*00            [24]  605 	pop	bits
      00014D 32               [24]  606 	reti
                                    607 	.area CSEG    (CODE)
                                    608 	.area CONST   (CODE)
                                    609 	.area XINIT   (CODE)
                                    610 	.area CABS    (ABS,CODE)
