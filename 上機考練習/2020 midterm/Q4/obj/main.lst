                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _delay_ms
                                     13 	.globl _readMPU6050_GyroData
                                     14 	.globl _MPU6050_INIT
                                     15 	.globl _OLED_SetCursor
                                     16 	.globl _OLED_DisplayString
                                     17 	.globl _OLED_DisplayChar
                                     18 	.globl _OLED_Init
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _B
                                     95 	.globl _ACC
                                     96 	.globl _PSW
                                     97 	.globl _IP
                                     98 	.globl _P3
                                     99 	.globl _IE
                                    100 	.globl _P2
                                    101 	.globl _SBUF
                                    102 	.globl _SCON
                                    103 	.globl _P1
                                    104 	.globl _TH1
                                    105 	.globl _TH0
                                    106 	.globl _TL1
                                    107 	.globl _TL0
                                    108 	.globl _TMOD
                                    109 	.globl _TCON
                                    110 	.globl _PCON
                                    111 	.globl _DPH
                                    112 	.globl _DPL
                                    113 	.globl _SP
                                    114 	.globl _P0
                                    115 	.globl _gyro_data
                                    116 	.globl _accel_data
                                    117 	.globl _i
                                    118 	.globl _data_buf
                                    119 ;--------------------------------------------------------
                                    120 ; special function registers
                                    121 ;--------------------------------------------------------
                                    122 	.area RSEG    (ABS,DATA)
      000000                        123 	.org 0x0000
                           000080   124 _P0	=	0x0080
                           000081   125 _SP	=	0x0081
                           000082   126 _DPL	=	0x0082
                           000083   127 _DPH	=	0x0083
                           000087   128 _PCON	=	0x0087
                           000088   129 _TCON	=	0x0088
                           000089   130 _TMOD	=	0x0089
                           00008A   131 _TL0	=	0x008a
                           00008B   132 _TL1	=	0x008b
                           00008C   133 _TH0	=	0x008c
                           00008D   134 _TH1	=	0x008d
                           000090   135 _P1	=	0x0090
                           000098   136 _SCON	=	0x0098
                           000099   137 _SBUF	=	0x0099
                           0000A0   138 _P2	=	0x00a0
                           0000A8   139 _IE	=	0x00a8
                           0000B0   140 _P3	=	0x00b0
                           0000B8   141 _IP	=	0x00b8
                           0000D0   142 _PSW	=	0x00d0
                           0000E0   143 _ACC	=	0x00e0
                           0000F0   144 _B	=	0x00f0
                                    145 ;--------------------------------------------------------
                                    146 ; special function bits
                                    147 ;--------------------------------------------------------
                                    148 	.area RSEG    (ABS,DATA)
      000000                        149 	.org 0x0000
                           000080   150 _P0_0	=	0x0080
                           000081   151 _P0_1	=	0x0081
                           000082   152 _P0_2	=	0x0082
                           000083   153 _P0_3	=	0x0083
                           000084   154 _P0_4	=	0x0084
                           000085   155 _P0_5	=	0x0085
                           000086   156 _P0_6	=	0x0086
                           000087   157 _P0_7	=	0x0087
                           000088   158 _IT0	=	0x0088
                           000089   159 _IE0	=	0x0089
                           00008A   160 _IT1	=	0x008a
                           00008B   161 _IE1	=	0x008b
                           00008C   162 _TR0	=	0x008c
                           00008D   163 _TF0	=	0x008d
                           00008E   164 _TR1	=	0x008e
                           00008F   165 _TF1	=	0x008f
                           000090   166 _P1_0	=	0x0090
                           000091   167 _P1_1	=	0x0091
                           000092   168 _P1_2	=	0x0092
                           000093   169 _P1_3	=	0x0093
                           000094   170 _P1_4	=	0x0094
                           000095   171 _P1_5	=	0x0095
                           000096   172 _P1_6	=	0x0096
                           000097   173 _P1_7	=	0x0097
                           000098   174 _RI	=	0x0098
                           000099   175 _TI	=	0x0099
                           00009A   176 _RB8	=	0x009a
                           00009B   177 _TB8	=	0x009b
                           00009C   178 _REN	=	0x009c
                           00009D   179 _SM2	=	0x009d
                           00009E   180 _SM1	=	0x009e
                           00009F   181 _SM0	=	0x009f
                           0000A0   182 _P2_0	=	0x00a0
                           0000A1   183 _P2_1	=	0x00a1
                           0000A2   184 _P2_2	=	0x00a2
                           0000A3   185 _P2_3	=	0x00a3
                           0000A4   186 _P2_4	=	0x00a4
                           0000A5   187 _P2_5	=	0x00a5
                           0000A6   188 _P2_6	=	0x00a6
                           0000A7   189 _P2_7	=	0x00a7
                           0000A8   190 _EX0	=	0x00a8
                           0000A9   191 _ET0	=	0x00a9
                           0000AA   192 _EX1	=	0x00aa
                           0000AB   193 _ET1	=	0x00ab
                           0000AC   194 _ES	=	0x00ac
                           0000AF   195 _EA	=	0x00af
                           0000B0   196 _P3_0	=	0x00b0
                           0000B1   197 _P3_1	=	0x00b1
                           0000B2   198 _P3_2	=	0x00b2
                           0000B3   199 _P3_3	=	0x00b3
                           0000B4   200 _P3_4	=	0x00b4
                           0000B5   201 _P3_5	=	0x00b5
                           0000B6   202 _P3_6	=	0x00b6
                           0000B7   203 _P3_7	=	0x00b7
                           0000B0   204 _RXD	=	0x00b0
                           0000B1   205 _TXD	=	0x00b1
                           0000B2   206 _INT0	=	0x00b2
                           0000B3   207 _INT1	=	0x00b3
                           0000B4   208 _T0	=	0x00b4
                           0000B5   209 _T1	=	0x00b5
                           0000B6   210 _WR	=	0x00b6
                           0000B7   211 _RD	=	0x00b7
                           0000B8   212 _PX0	=	0x00b8
                           0000B9   213 _PT0	=	0x00b9
                           0000BA   214 _PX1	=	0x00ba
                           0000BB   215 _PT1	=	0x00bb
                           0000BC   216 _PS	=	0x00bc
                           0000D0   217 _P	=	0x00d0
                           0000D1   218 _F1	=	0x00d1
                           0000D2   219 _OV	=	0x00d2
                           0000D3   220 _RS0	=	0x00d3
                           0000D4   221 _RS1	=	0x00d4
                           0000D5   222 _F0	=	0x00d5
                           0000D6   223 _AC	=	0x00d6
                           0000D7   224 _CY	=	0x00d7
                                    225 ;--------------------------------------------------------
                                    226 ; overlayable register banks
                                    227 ;--------------------------------------------------------
                                    228 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        229 	.ds 8
                                    230 ;--------------------------------------------------------
                                    231 ; internal ram data
                                    232 ;--------------------------------------------------------
                                    233 	.area DSEG    (DATA)
      000000                        234 _data_buf::
      000000                        235 	.ds 2
      000002                        236 _i::
      000002                        237 	.ds 1
      000003                        238 _accel_data::
      000003                        239 	.ds 6
      000009                        240 _gyro_data::
      000009                        241 	.ds 6
                                    242 ;--------------------------------------------------------
                                    243 ; overlayable items in internal ram
                                    244 ;--------------------------------------------------------
                                    245 ;--------------------------------------------------------
                                    246 ; Stack segment in internal ram
                                    247 ;--------------------------------------------------------
                                    248 	.area SSEG
      000000                        249 __start__stack:
      000000                        250 	.ds	1
                                    251 
                                    252 ;--------------------------------------------------------
                                    253 ; indirectly addressable internal ram data
                                    254 ;--------------------------------------------------------
                                    255 	.area ISEG    (DATA)
                                    256 ;--------------------------------------------------------
                                    257 ; absolute internal ram data
                                    258 ;--------------------------------------------------------
                                    259 	.area IABS    (ABS,DATA)
                                    260 	.area IABS    (ABS,DATA)
                                    261 ;--------------------------------------------------------
                                    262 ; bit data
                                    263 ;--------------------------------------------------------
                                    264 	.area BSEG    (BIT)
                                    265 ;--------------------------------------------------------
                                    266 ; paged external ram data
                                    267 ;--------------------------------------------------------
                                    268 	.area PSEG    (PAG,XDATA)
                                    269 ;--------------------------------------------------------
                                    270 ; uninitialized external ram data
                                    271 ;--------------------------------------------------------
                                    272 	.area XSEG    (XDATA)
                                    273 ;--------------------------------------------------------
                                    274 ; absolute external ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area XABS    (ABS,XDATA)
                                    277 ;--------------------------------------------------------
                                    278 ; initialized external ram data
                                    279 ;--------------------------------------------------------
                                    280 	.area XISEG   (XDATA)
                                    281 	.area HOME    (CODE)
                                    282 	.area GSINIT0 (CODE)
                                    283 	.area GSINIT1 (CODE)
                                    284 	.area GSINIT2 (CODE)
                                    285 	.area GSINIT3 (CODE)
                                    286 	.area GSINIT4 (CODE)
                                    287 	.area GSINIT5 (CODE)
                                    288 	.area GSINIT  (CODE)
                                    289 	.area GSFINAL (CODE)
                                    290 	.area CSEG    (CODE)
                                    291 ;--------------------------------------------------------
                                    292 ; interrupt vector
                                    293 ;--------------------------------------------------------
                                    294 	.area HOME    (CODE)
      000000                        295 __interrupt_vect:
      000000 02r00r00         [24]  296 	ljmp	__sdcc_gsinit_startup
                                    297 ;--------------------------------------------------------
                                    298 ; global & static initialisations
                                    299 ;--------------------------------------------------------
                                    300 	.area HOME    (CODE)
                                    301 	.area GSINIT  (CODE)
                                    302 	.area GSFINAL (CODE)
                                    303 	.area GSINIT  (CODE)
                                    304 	.globl __sdcc_gsinit_startup
                                    305 	.globl __sdcc_program_startup
                                    306 	.globl __start__stack
                                    307 	.globl __mcs51_genXINIT
                                    308 	.globl __mcs51_genXRAMCLEAR
                                    309 	.globl __mcs51_genRAMCLEAR
                                    310 ;	./src/main.c:8: char i = 0;
      000000 75*02 00         [24]  311 	mov	_i,#0x00
                                    312 ;	./src/main.c:10: int accel_data[3] = {0, 0, 0};  // Stores the 16-bit signed accelerometer sensor output
      000003 E4               [12]  313 	clr	a
      000004 F5*03            [12]  314 	mov	(_accel_data + 0),a
      000006 F5*04            [12]  315 	mov	(_accel_data + 1),a
      000008 F5*05            [12]  316 	mov	((_accel_data + 0x0002) + 0),a
      00000A F5*06            [12]  317 	mov	((_accel_data + 0x0002) + 1),a
      00000C F5*07            [12]  318 	mov	((_accel_data + 0x0004) + 0),a
      00000E F5*08            [12]  319 	mov	((_accel_data + 0x0004) + 1),a
                                    320 ;	./src/main.c:11: int gyro_data[3] = {0, 0, 0};   // Stores the 16-bit signed gyro sensor output
      000010 F5*09            [12]  321 	mov	(_gyro_data + 0),a
      000012 F5*0A            [12]  322 	mov	(_gyro_data + 1),a
      000014 F5*0B            [12]  323 	mov	((_gyro_data + 0x0002) + 0),a
      000016 F5*0C            [12]  324 	mov	((_gyro_data + 0x0002) + 1),a
      000018 F5*0D            [12]  325 	mov	((_gyro_data + 0x0004) + 0),a
      00001A F5*0E            [12]  326 	mov	((_gyro_data + 0x0004) + 1),a
                                    327 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  328 	ljmp	__sdcc_program_startup
                                    329 ;--------------------------------------------------------
                                    330 ; Home
                                    331 ;--------------------------------------------------------
                                    332 	.area HOME    (CODE)
                                    333 	.area HOME    (CODE)
      000003                        334 __sdcc_program_startup:
      000003 02r00r00         [24]  335 	ljmp	_main
                                    336 ;	return from main will return to caller
                                    337 ;--------------------------------------------------------
                                    338 ; code
                                    339 ;--------------------------------------------------------
                                    340 	.area CSEG    (CODE)
                                    341 ;------------------------------------------------------------
                                    342 ;Allocation info for local variables in function 'main'
                                    343 ;------------------------------------------------------------
                                    344 ;	./src/main.c:15: void main(void)
                                    345 ;	-----------------------------------------
                                    346 ;	 function main
                                    347 ;	-----------------------------------------
      000000                        348 _main:
                           000007   349 	ar7 = 0x07
                           000006   350 	ar6 = 0x06
                           000005   351 	ar5 = 0x05
                           000004   352 	ar4 = 0x04
                           000003   353 	ar3 = 0x03
                           000002   354 	ar2 = 0x02
                           000001   355 	ar1 = 0x01
                           000000   356 	ar0 = 0x00
                                    357 ;	./src/main.c:17: SDA = 1;
                                    358 ;	assignBit
      000000 D2 81            [12]  359 	setb	_P0_1
                                    360 ;	./src/main.c:18: SCL = 1;
                                    361 ;	assignBit
      000002 D2 80            [12]  362 	setb	_P0_0
                                    363 ;	./src/main.c:19: OLED_Init();		  // Check oled_i2c.c file for SCL,SDA pin connection
      000004 12r00r00         [24]  364 	lcall	_OLED_Init
                                    365 ;	./src/main.c:20: MPU6050_INIT();
      000007 12r00r00         [24]  366 	lcall	_MPU6050_INIT
                                    367 ;	./src/main.c:22: OLED_SetCursor(0,0);  // Set cursor at 0th-line 0th-Position
      00000A 75*00 00         [24]  368 	mov	_OLED_SetCursor_PARM_2,#0x00
      00000D 75 82 00         [24]  369 	mov	dpl,#0x00
      000010 12r00r00         [24]  370 	lcall	_OLED_SetCursor
                                    371 ;	./src/main.c:24: OLED_SetCursor(2, 0);  
      000013 75*00 00         [24]  372 	mov	_OLED_SetCursor_PARM_2,#0x00
      000016 75 82 02         [24]  373 	mov	dpl,#0x02
      000019 12r00r00         [24]  374 	lcall	_OLED_SetCursor
                                    375 ;	./src/main.c:25: OLED_DisplayString("Protractor ");
      00001C 90r00r00         [24]  376 	mov	dptr,#___str_0
      00001F 75 F0 80         [24]  377 	mov	b,#0x80
      000022 12r00r00         [24]  378 	lcall	_OLED_DisplayString
                                    379 ;	./src/main.c:26: OLED_SetCursor(3, 0);  
      000025 75*00 00         [24]  380 	mov	_OLED_SetCursor_PARM_2,#0x00
      000028 75 82 03         [24]  381 	mov	dpl,#0x03
      00002B 12r00r00         [24]  382 	lcall	_OLED_SetCursor
                                    383 ;	./src/main.c:27: OLED_DisplayString("tan = 0 ");
      00002E 90r00r0C         [24]  384 	mov	dptr,#___str_1
      000031 75 F0 80         [24]  385 	mov	b,#0x80
      000034 12r00r00         [24]  386 	lcall	_OLED_DisplayString
                                    387 ;	./src/main.c:28: delay_ms(1000);
      000037 90 03 E8         [24]  388 	mov	dptr,#0x03e8
      00003A 12r00r00         [24]  389 	lcall	_delay_ms
                                    390 ;	./src/main.c:30: while(1) {
      00003D                        391 00111$:
                                    392 ;	./src/main.c:31: readMPU6050_GyroData(&gyro_data[0]);
      00003D 90r00r09         [24]  393 	mov	dptr,#_gyro_data
      000040 75 F0 40         [24]  394 	mov	b,#0x40
      000043 12r00r00         [24]  395 	lcall	_readMPU6050_GyroData
                                    396 ;	./src/main.c:33: data_buf = gyro_data[0];
      000046 85*09*00         [24]  397 	mov	_data_buf,(_gyro_data + 0)
      000049 85*0A*01         [24]  398 	mov	(_data_buf + 1),(_gyro_data + 1)
                                    399 ;	./src/main.c:34: OLED_SetCursor(4, 0);
      00004C 75*00 00         [24]  400 	mov	_OLED_SetCursor_PARM_2,#0x00
      00004F 75 82 04         [24]  401 	mov	dpl,#0x04
      000052 12r00r00         [24]  402 	lcall	_OLED_SetCursor
                                    403 ;	./src/main.c:35: if(data_buf < 0) {
      000055 E5*01            [12]  404 	mov	a,(_data_buf + 1)
      000057 30 E7 13         [24]  405 	jnb	acc.7,00102$
                                    406 ;	./src/main.c:36: OLED_DisplayChar('-');
      00005A 75 82 2D         [24]  407 	mov	dpl,#0x2d
      00005D 12r00r00         [24]  408 	lcall	_OLED_DisplayChar
                                    409 ;	./src/main.c:37: data_buf = data_buf * -1;
      000060 C3               [12]  410 	clr	c
      000061 E4               [12]  411 	clr	a
      000062 95*00            [12]  412 	subb	a,_data_buf
      000064 F5*00            [12]  413 	mov	_data_buf,a
      000066 E4               [12]  414 	clr	a
      000067 95*01            [12]  415 	subb	a,(_data_buf + 1)
      000069 F5*01            [12]  416 	mov	(_data_buf + 1),a
      00006B 80 06            [24]  417 	sjmp	00103$
      00006D                        418 00102$:
                                    419 ;	./src/main.c:39: OLED_DisplayChar(' ');
      00006D 75 82 20         [24]  420 	mov	dpl,#0x20
      000070 12r00r00         [24]  421 	lcall	_OLED_DisplayChar
      000073                        422 00103$:
                                    423 ;	./src/main.c:42: OLED_DisplayChar(data_buf / 10000 + '0');
      000073 75*00 10         [24]  424 	mov	__divsint_PARM_2,#0x10
      000076 75*01 27         [24]  425 	mov	(__divsint_PARM_2 + 1),#0x27
      000079 85*00 82         [24]  426 	mov	dpl,_data_buf
      00007C 85*01 83         [24]  427 	mov	dph,(_data_buf + 1)
      00007F 12r00r00         [24]  428 	lcall	__divsint
      000082 AE 82            [24]  429 	mov	r6,dpl
      000084 74 30            [12]  430 	mov	a,#0x30
      000086 2E               [12]  431 	add	a,r6
      000087 F5 82            [12]  432 	mov	dpl,a
      000089 12r00r00         [24]  433 	lcall	_OLED_DisplayChar
                                    434 ;	./src/main.c:43: OLED_DisplayChar(data_buf % 10000 / 1000 + '0');
      00008C 75*00 10         [24]  435 	mov	__modsint_PARM_2,#0x10
      00008F 75*01 27         [24]  436 	mov	(__modsint_PARM_2 + 1),#0x27
      000092 85*00 82         [24]  437 	mov	dpl,_data_buf
      000095 85*01 83         [24]  438 	mov	dph,(_data_buf + 1)
      000098 12r00r00         [24]  439 	lcall	__modsint
      00009B 75*00 E8         [24]  440 	mov	__divsint_PARM_2,#0xe8
      00009E 75*01 03         [24]  441 	mov	(__divsint_PARM_2 + 1),#0x03
      0000A1 12r00r00         [24]  442 	lcall	__divsint
      0000A4 AE 82            [24]  443 	mov	r6,dpl
      0000A6 74 30            [12]  444 	mov	a,#0x30
      0000A8 2E               [12]  445 	add	a,r6
      0000A9 F5 82            [12]  446 	mov	dpl,a
      0000AB 12r00r00         [24]  447 	lcall	_OLED_DisplayChar
                                    448 ;	./src/main.c:44: OLED_DisplayChar(data_buf % 1000 / 100 + '0');
      0000AE 75*00 E8         [24]  449 	mov	__modsint_PARM_2,#0xe8
      0000B1 75*01 03         [24]  450 	mov	(__modsint_PARM_2 + 1),#0x03
      0000B4 85*00 82         [24]  451 	mov	dpl,_data_buf
      0000B7 85*01 83         [24]  452 	mov	dph,(_data_buf + 1)
      0000BA 12r00r00         [24]  453 	lcall	__modsint
      0000BD 75*00 64         [24]  454 	mov	__divsint_PARM_2,#0x64
      0000C0 75*01 00         [24]  455 	mov	(__divsint_PARM_2 + 1),#0x00
      0000C3 12r00r00         [24]  456 	lcall	__divsint
      0000C6 AE 82            [24]  457 	mov	r6,dpl
      0000C8 74 30            [12]  458 	mov	a,#0x30
      0000CA 2E               [12]  459 	add	a,r6
      0000CB F5 82            [12]  460 	mov	dpl,a
      0000CD 12r00r00         [24]  461 	lcall	_OLED_DisplayChar
                                    462 ;	./src/main.c:45: OLED_DisplayChar(data_buf % 100 / 10 + '0');
      0000D0 75*00 64         [24]  463 	mov	__modsint_PARM_2,#0x64
      0000D3 75*01 00         [24]  464 	mov	(__modsint_PARM_2 + 1),#0x00
      0000D6 85*00 82         [24]  465 	mov	dpl,_data_buf
      0000D9 85*01 83         [24]  466 	mov	dph,(_data_buf + 1)
      0000DC 12r00r00         [24]  467 	lcall	__modsint
      0000DF 75*00 0A         [24]  468 	mov	__divsint_PARM_2,#0x0a
      0000E2 75*01 00         [24]  469 	mov	(__divsint_PARM_2 + 1),#0x00
      0000E5 12r00r00         [24]  470 	lcall	__divsint
      0000E8 AE 82            [24]  471 	mov	r6,dpl
      0000EA 74 30            [12]  472 	mov	a,#0x30
      0000EC 2E               [12]  473 	add	a,r6
      0000ED F5 82            [12]  474 	mov	dpl,a
      0000EF 12r00r00         [24]  475 	lcall	_OLED_DisplayChar
                                    476 ;	./src/main.c:46: OLED_DisplayChar(data_buf % 10 + '0');
      0000F2 75*00 0A         [24]  477 	mov	__modsint_PARM_2,#0x0a
      0000F5 75*01 00         [24]  478 	mov	(__modsint_PARM_2 + 1),#0x00
      0000F8 85*00 82         [24]  479 	mov	dpl,_data_buf
      0000FB 85*01 83         [24]  480 	mov	dph,(_data_buf + 1)
      0000FE 12r00r00         [24]  481 	lcall	__modsint
      000101 AE 82            [24]  482 	mov	r6,dpl
      000103 74 30            [12]  483 	mov	a,#0x30
      000105 2E               [12]  484 	add	a,r6
      000106 F5 82            [12]  485 	mov	dpl,a
      000108 12r00r00         [24]  486 	lcall	_OLED_DisplayChar
                                    487 ;	./src/main.c:48: data_buf = gyro_data[1];
      00010B 85*0B*00         [24]  488 	mov	_data_buf,((_gyro_data + 0x0002) + 0)
      00010E 85*0C*01         [24]  489 	mov	(_data_buf + 1),((_gyro_data + 0x0002) + 1)
                                    490 ;	./src/main.c:49: OLED_SetCursor(5, 0); 
      000111 75*00 00         [24]  491 	mov	_OLED_SetCursor_PARM_2,#0x00
      000114 75 82 05         [24]  492 	mov	dpl,#0x05
      000117 12r00r00         [24]  493 	lcall	_OLED_SetCursor
                                    494 ;	./src/main.c:50: if(data_buf < 0) {
      00011A E5*01            [12]  495 	mov	a,(_data_buf + 1)
      00011C 30 E7 13         [24]  496 	jnb	acc.7,00105$
                                    497 ;	./src/main.c:51: OLED_DisplayChar('-');
      00011F 75 82 2D         [24]  498 	mov	dpl,#0x2d
      000122 12r00r00         [24]  499 	lcall	_OLED_DisplayChar
                                    500 ;	./src/main.c:52: data_buf = data_buf * -1;
      000125 C3               [12]  501 	clr	c
      000126 E4               [12]  502 	clr	a
      000127 95*00            [12]  503 	subb	a,_data_buf
      000129 F5*00            [12]  504 	mov	_data_buf,a
      00012B E4               [12]  505 	clr	a
      00012C 95*01            [12]  506 	subb	a,(_data_buf + 1)
      00012E F5*01            [12]  507 	mov	(_data_buf + 1),a
      000130 80 06            [24]  508 	sjmp	00106$
      000132                        509 00105$:
                                    510 ;	./src/main.c:54: OLED_DisplayChar(' ');
      000132 75 82 20         [24]  511 	mov	dpl,#0x20
      000135 12r00r00         [24]  512 	lcall	_OLED_DisplayChar
      000138                        513 00106$:
                                    514 ;	./src/main.c:57: OLED_DisplayChar(data_buf / 10000 + '0');
      000138 75*00 10         [24]  515 	mov	__divsint_PARM_2,#0x10
      00013B 75*01 27         [24]  516 	mov	(__divsint_PARM_2 + 1),#0x27
      00013E 85*00 82         [24]  517 	mov	dpl,_data_buf
      000141 85*01 83         [24]  518 	mov	dph,(_data_buf + 1)
      000144 12r00r00         [24]  519 	lcall	__divsint
      000147 AE 82            [24]  520 	mov	r6,dpl
      000149 74 30            [12]  521 	mov	a,#0x30
      00014B 2E               [12]  522 	add	a,r6
      00014C F5 82            [12]  523 	mov	dpl,a
      00014E 12r00r00         [24]  524 	lcall	_OLED_DisplayChar
                                    525 ;	./src/main.c:58: OLED_DisplayChar(data_buf % 10000 / 1000 + '0');
      000151 75*00 10         [24]  526 	mov	__modsint_PARM_2,#0x10
      000154 75*01 27         [24]  527 	mov	(__modsint_PARM_2 + 1),#0x27
      000157 85*00 82         [24]  528 	mov	dpl,_data_buf
      00015A 85*01 83         [24]  529 	mov	dph,(_data_buf + 1)
      00015D 12r00r00         [24]  530 	lcall	__modsint
      000160 75*00 E8         [24]  531 	mov	__divsint_PARM_2,#0xe8
      000163 75*01 03         [24]  532 	mov	(__divsint_PARM_2 + 1),#0x03
      000166 12r00r00         [24]  533 	lcall	__divsint
      000169 AE 82            [24]  534 	mov	r6,dpl
      00016B 74 30            [12]  535 	mov	a,#0x30
      00016D 2E               [12]  536 	add	a,r6
      00016E F5 82            [12]  537 	mov	dpl,a
      000170 12r00r00         [24]  538 	lcall	_OLED_DisplayChar
                                    539 ;	./src/main.c:59: OLED_DisplayChar(data_buf % 1000 / 100 + '0');
      000173 75*00 E8         [24]  540 	mov	__modsint_PARM_2,#0xe8
      000176 75*01 03         [24]  541 	mov	(__modsint_PARM_2 + 1),#0x03
      000179 85*00 82         [24]  542 	mov	dpl,_data_buf
      00017C 85*01 83         [24]  543 	mov	dph,(_data_buf + 1)
      00017F 12r00r00         [24]  544 	lcall	__modsint
      000182 75*00 64         [24]  545 	mov	__divsint_PARM_2,#0x64
      000185 75*01 00         [24]  546 	mov	(__divsint_PARM_2 + 1),#0x00
      000188 12r00r00         [24]  547 	lcall	__divsint
      00018B AE 82            [24]  548 	mov	r6,dpl
      00018D 74 30            [12]  549 	mov	a,#0x30
      00018F 2E               [12]  550 	add	a,r6
      000190 F5 82            [12]  551 	mov	dpl,a
      000192 12r00r00         [24]  552 	lcall	_OLED_DisplayChar
                                    553 ;	./src/main.c:60: OLED_DisplayChar(data_buf % 100 / 10 + '0');
      000195 75*00 64         [24]  554 	mov	__modsint_PARM_2,#0x64
      000198 75*01 00         [24]  555 	mov	(__modsint_PARM_2 + 1),#0x00
      00019B 85*00 82         [24]  556 	mov	dpl,_data_buf
      00019E 85*01 83         [24]  557 	mov	dph,(_data_buf + 1)
      0001A1 12r00r00         [24]  558 	lcall	__modsint
      0001A4 75*00 0A         [24]  559 	mov	__divsint_PARM_2,#0x0a
      0001A7 75*01 00         [24]  560 	mov	(__divsint_PARM_2 + 1),#0x00
      0001AA 12r00r00         [24]  561 	lcall	__divsint
      0001AD AE 82            [24]  562 	mov	r6,dpl
      0001AF 74 30            [12]  563 	mov	a,#0x30
      0001B1 2E               [12]  564 	add	a,r6
      0001B2 F5 82            [12]  565 	mov	dpl,a
      0001B4 12r00r00         [24]  566 	lcall	_OLED_DisplayChar
                                    567 ;	./src/main.c:61: OLED_DisplayChar(data_buf % 10 + '0');
      0001B7 75*00 0A         [24]  568 	mov	__modsint_PARM_2,#0x0a
      0001BA 75*01 00         [24]  569 	mov	(__modsint_PARM_2 + 1),#0x00
      0001BD 85*00 82         [24]  570 	mov	dpl,_data_buf
      0001C0 85*01 83         [24]  571 	mov	dph,(_data_buf + 1)
      0001C3 12r00r00         [24]  572 	lcall	__modsint
      0001C6 AE 82            [24]  573 	mov	r6,dpl
      0001C8 74 30            [12]  574 	mov	a,#0x30
      0001CA 2E               [12]  575 	add	a,r6
      0001CB F5 82            [12]  576 	mov	dpl,a
      0001CD 12r00r00         [24]  577 	lcall	_OLED_DisplayChar
                                    578 ;	./src/main.c:63: data_buf = gyro_data[2];
      0001D0 85*0D*00         [24]  579 	mov	_data_buf,((_gyro_data + 0x0004) + 0)
      0001D3 85*0E*01         [24]  580 	mov	(_data_buf + 1),((_gyro_data + 0x0004) + 1)
                                    581 ;	./src/main.c:64: OLED_SetCursor(6, 0);
      0001D6 75*00 00         [24]  582 	mov	_OLED_SetCursor_PARM_2,#0x00
      0001D9 75 82 06         [24]  583 	mov	dpl,#0x06
      0001DC 12r00r00         [24]  584 	lcall	_OLED_SetCursor
                                    585 ;	./src/main.c:65: if(data_buf < 0) {
      0001DF E5*01            [12]  586 	mov	a,(_data_buf + 1)
      0001E1 30 E7 13         [24]  587 	jnb	acc.7,00108$
                                    588 ;	./src/main.c:66: OLED_DisplayChar('-');
      0001E4 75 82 2D         [24]  589 	mov	dpl,#0x2d
      0001E7 12r00r00         [24]  590 	lcall	_OLED_DisplayChar
                                    591 ;	./src/main.c:67: data_buf = data_buf * -1;
      0001EA C3               [12]  592 	clr	c
      0001EB E4               [12]  593 	clr	a
      0001EC 95*00            [12]  594 	subb	a,_data_buf
      0001EE F5*00            [12]  595 	mov	_data_buf,a
      0001F0 E4               [12]  596 	clr	a
      0001F1 95*01            [12]  597 	subb	a,(_data_buf + 1)
      0001F3 F5*01            [12]  598 	mov	(_data_buf + 1),a
      0001F5 80 06            [24]  599 	sjmp	00109$
      0001F7                        600 00108$:
                                    601 ;	./src/main.c:69: OLED_DisplayChar(' ');
      0001F7 75 82 20         [24]  602 	mov	dpl,#0x20
      0001FA 12r00r00         [24]  603 	lcall	_OLED_DisplayChar
      0001FD                        604 00109$:
                                    605 ;	./src/main.c:73: OLED_DisplayChar(data_buf / 10000 + '0');
      0001FD 75*00 10         [24]  606 	mov	__divsint_PARM_2,#0x10
      000200 75*01 27         [24]  607 	mov	(__divsint_PARM_2 + 1),#0x27
      000203 85*00 82         [24]  608 	mov	dpl,_data_buf
      000206 85*01 83         [24]  609 	mov	dph,(_data_buf + 1)
      000209 12r00r00         [24]  610 	lcall	__divsint
      00020C AE 82            [24]  611 	mov	r6,dpl
      00020E 74 30            [12]  612 	mov	a,#0x30
      000210 2E               [12]  613 	add	a,r6
      000211 F5 82            [12]  614 	mov	dpl,a
      000213 12r00r00         [24]  615 	lcall	_OLED_DisplayChar
                                    616 ;	./src/main.c:74: OLED_DisplayChar(data_buf % 10000 / 1000 + '0');
      000216 75*00 10         [24]  617 	mov	__modsint_PARM_2,#0x10
      000219 75*01 27         [24]  618 	mov	(__modsint_PARM_2 + 1),#0x27
      00021C 85*00 82         [24]  619 	mov	dpl,_data_buf
      00021F 85*01 83         [24]  620 	mov	dph,(_data_buf + 1)
      000222 12r00r00         [24]  621 	lcall	__modsint
      000225 75*00 E8         [24]  622 	mov	__divsint_PARM_2,#0xe8
      000228 75*01 03         [24]  623 	mov	(__divsint_PARM_2 + 1),#0x03
      00022B 12r00r00         [24]  624 	lcall	__divsint
      00022E AE 82            [24]  625 	mov	r6,dpl
      000230 74 30            [12]  626 	mov	a,#0x30
      000232 2E               [12]  627 	add	a,r6
      000233 F5 82            [12]  628 	mov	dpl,a
      000235 12r00r00         [24]  629 	lcall	_OLED_DisplayChar
                                    630 ;	./src/main.c:75: OLED_DisplayChar(data_buf % 1000 / 100 + '0');
      000238 75*00 E8         [24]  631 	mov	__modsint_PARM_2,#0xe8
      00023B 75*01 03         [24]  632 	mov	(__modsint_PARM_2 + 1),#0x03
      00023E 85*00 82         [24]  633 	mov	dpl,_data_buf
      000241 85*01 83         [24]  634 	mov	dph,(_data_buf + 1)
      000244 12r00r00         [24]  635 	lcall	__modsint
      000247 75*00 64         [24]  636 	mov	__divsint_PARM_2,#0x64
      00024A 75*01 00         [24]  637 	mov	(__divsint_PARM_2 + 1),#0x00
      00024D 12r00r00         [24]  638 	lcall	__divsint
      000250 AE 82            [24]  639 	mov	r6,dpl
      000252 74 30            [12]  640 	mov	a,#0x30
      000254 2E               [12]  641 	add	a,r6
      000255 F5 82            [12]  642 	mov	dpl,a
      000257 12r00r00         [24]  643 	lcall	_OLED_DisplayChar
                                    644 ;	./src/main.c:76: OLED_DisplayChar(data_buf % 100 / 10 + '0');
      00025A 75*00 64         [24]  645 	mov	__modsint_PARM_2,#0x64
      00025D 75*01 00         [24]  646 	mov	(__modsint_PARM_2 + 1),#0x00
      000260 85*00 82         [24]  647 	mov	dpl,_data_buf
      000263 85*01 83         [24]  648 	mov	dph,(_data_buf + 1)
      000266 12r00r00         [24]  649 	lcall	__modsint
      000269 75*00 0A         [24]  650 	mov	__divsint_PARM_2,#0x0a
      00026C 75*01 00         [24]  651 	mov	(__divsint_PARM_2 + 1),#0x00
      00026F 12r00r00         [24]  652 	lcall	__divsint
      000272 AE 82            [24]  653 	mov	r6,dpl
      000274 74 30            [12]  654 	mov	a,#0x30
      000276 2E               [12]  655 	add	a,r6
      000277 F5 82            [12]  656 	mov	dpl,a
      000279 12r00r00         [24]  657 	lcall	_OLED_DisplayChar
                                    658 ;	./src/main.c:77: OLED_DisplayChar(data_buf % 10 + '0');
      00027C 75*00 0A         [24]  659 	mov	__modsint_PARM_2,#0x0a
      00027F 75*01 00         [24]  660 	mov	(__modsint_PARM_2 + 1),#0x00
      000282 85*00 82         [24]  661 	mov	dpl,_data_buf
      000285 85*01 83         [24]  662 	mov	dph,(_data_buf + 1)
      000288 12r00r00         [24]  663 	lcall	__modsint
      00028B AE 82            [24]  664 	mov	r6,dpl
      00028D 74 30            [12]  665 	mov	a,#0x30
      00028F 2E               [12]  666 	add	a,r6
      000290 F5 82            [12]  667 	mov	dpl,a
      000292 12r00r00         [24]  668 	lcall	_OLED_DisplayChar
                                    669 ;	./src/main.c:78: delay_ms(100);
      000295 90 00 64         [24]  670 	mov	dptr,#0x0064
      000298 12r00r00         [24]  671 	lcall	_delay_ms
                                    672 ;	./src/main.c:80: }
      00029B 02r00r3D         [24]  673 	ljmp	00111$
                                    674 	.area CSEG    (CODE)
                                    675 	.area CONST   (CODE)
                                    676 	.area CONST   (CODE)
      000000                        677 ___str_0:
      000000 50 72 6F 74 72 61 63   678 	.ascii "Protractor "
             74 6F 72 20
      00000B 00                     679 	.db 0x00
                                    680 	.area CSEG    (CODE)
                                    681 	.area CONST   (CODE)
      00000C                        682 ___str_1:
      00000C 74 61 6E 20 3D 20 30   683 	.ascii "tan = 0 "
             20
      000014 00                     684 	.db 0x00
                                    685 	.area CSEG    (CODE)
                                    686 	.area XINIT   (CODE)
                                    687 	.area CABS    (ABS,CODE)
