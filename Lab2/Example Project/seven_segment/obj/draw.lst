                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module draw
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _delay_ms
                                     12 	.globl _Writesingle7219
                                     13 	.globl _Write7219
                                     14 	.globl _singledraw_PARM_2
                                     15 	.globl _Initial
                                     16 	.globl _draw
                                     17 	.globl _singledraw
                                     18 	.globl _shiftdraw
                                     19 ;--------------------------------------------------------
                                     20 ; special function registers
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; special function bits
                                     26 ;--------------------------------------------------------
                                     27 	.area RSEG    (ABS,DATA)
      000000                         28 	.org 0x0000
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable register banks
                                     31 ;--------------------------------------------------------
                                     32 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         33 	.ds 8
                                     34 ;--------------------------------------------------------
                                     35 ; internal ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DSEG    (DATA)
      000000                         38 _singledraw_PARM_2:
      000000                         39 	.ds 3
      000003                         40 _shiftdraw_shift_65536_21:
      000003                         41 	.ds 1
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable items in internal ram
                                     44 ;--------------------------------------------------------
                                     45 ;--------------------------------------------------------
                                     46 ; indirectly addressable internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area ISEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; absolute internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area IABS    (ABS,DATA)
                                     53 	.area IABS    (ABS,DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; bit data
                                     56 ;--------------------------------------------------------
                                     57 	.area BSEG    (BIT)
                                     58 ;--------------------------------------------------------
                                     59 ; paged external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area PSEG    (PAG,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; uninitialized external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XSEG    (XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; absolute external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XABS    (ABS,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; initialized external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XISEG   (XDATA)
                                     74 	.area HOME    (CODE)
                                     75 	.area GSINIT0 (CODE)
                                     76 	.area GSINIT1 (CODE)
                                     77 	.area GSINIT2 (CODE)
                                     78 	.area GSINIT3 (CODE)
                                     79 	.area GSINIT4 (CODE)
                                     80 	.area GSINIT5 (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 	.area GSFINAL (CODE)
                                     83 	.area CSEG    (CODE)
                                     84 ;--------------------------------------------------------
                                     85 ; global & static initialisations
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'shiftdraw'
                                     93 ;------------------------------------------------------------
                                     94 ;shift                     Allocated with name '_shiftdraw_shift_65536_21'
                                     95 ;picture                   Allocated to registers r5 r6 r7 
                                     96 ;i                         Allocated to registers r4 
                                     97 ;------------------------------------------------------------
                                     98 ;	./src/draw.c:45: static char shift = 0;
      000000 75*03 00         [24]   99 	mov	_shiftdraw_shift_65536_21,#0x00
                                    100 ;--------------------------------------------------------
                                    101 ; Home
                                    102 ;--------------------------------------------------------
                                    103 	.area HOME    (CODE)
                                    104 	.area HOME    (CODE)
                                    105 ;--------------------------------------------------------
                                    106 ; code
                                    107 ;--------------------------------------------------------
                                    108 	.area CSEG    (CODE)
                                    109 ;------------------------------------------------------------
                                    110 ;Allocation info for local variables in function 'Initial'
                                    111 ;------------------------------------------------------------
                                    112 ;i                         Allocated to registers r7 
                                    113 ;------------------------------------------------------------
                                    114 ;	./src/draw.c:6: void Initial(void)
                                    115 ;	-----------------------------------------
                                    116 ;	 function Initial
                                    117 ;	-----------------------------------------
      000000                        118 _Initial:
                           000007   119 	ar7 = 0x07
                           000006   120 	ar6 = 0x06
                           000005   121 	ar5 = 0x05
                           000004   122 	ar4 = 0x04
                           000003   123 	ar3 = 0x03
                           000002   124 	ar2 = 0x02
                           000001   125 	ar1 = 0x01
                           000000   126 	ar0 = 0x00
                                    127 ;	./src/draw.c:10: Write7219(SHUT_DOWN, 0x01);         // normal mode(0xX1)
      000000 75*00 01         [24]  128 	mov	_Write7219_PARM_2,#0x01
      000003 75 82 0C         [24]  129 	mov	dpl,#0x0c
      000006 12r00r00         [24]  130 	lcall	_Write7219
                                    131 ;	./src/draw.c:11: Write7219(DISPLAY_TEST, 0x00); 
      000009 75*00 00         [24]  132 	mov	_Write7219_PARM_2,#0x00
      00000C 75 82 0F         [24]  133 	mov	dpl,#0x0f
      00000F 12r00r00         [24]  134 	lcall	_Write7219
                                    135 ;	./src/draw.c:12: Write7219(DECODE_MODE, 0x00);       // select non-decode mode
      000012 75*00 00         [24]  136 	mov	_Write7219_PARM_2,#0x00
      000015 75 82 09         [24]  137 	mov	dpl,#0x09
      000018 12r00r00         [24]  138 	lcall	_Write7219
                                    139 ;	./src/draw.c:13: Write7219(SCAN_LIMIT, 0x07);        // use all 8 LED
      00001B 75*00 07         [24]  140 	mov	_Write7219_PARM_2,#0x07
      00001E 75 82 0B         [24]  141 	mov	dpl,#0x0b
      000021 12r00r00         [24]  142 	lcall	_Write7219
                                    143 ;	./src/draw.c:14: Write7219(INTENSITY, 0x00);         // set up intensity
      000024 75*00 00         [24]  144 	mov	_Write7219_PARM_2,#0x00
      000027 75 82 0A         [24]  145 	mov	dpl,#0x0a
      00002A 12r00r00         [24]  146 	lcall	_Write7219
                                    147 ;	./src/draw.c:16: for(i=1; i<=8; i++) {
      00002D 7F 01            [12]  148 	mov	r7,#0x01
      00002F                        149 00102$:
                                    150 ;	./src/draw.c:17: Write7219(i, 0x00);             // turn off all LED
      00002F 75*00 00         [24]  151 	mov	_Write7219_PARM_2,#0x00
      000032 8F 82            [24]  152 	mov	dpl,r7
      000034 C0 07            [24]  153 	push	ar7
      000036 12r00r00         [24]  154 	lcall	_Write7219
      000039 D0 07            [24]  155 	pop	ar7
                                    156 ;	./src/draw.c:16: for(i=1; i<=8; i++) {
      00003B 0F               [12]  157 	inc	r7
      00003C EF               [12]  158 	mov	a,r7
      00003D 24 F7            [12]  159 	add	a,#0xff - 0x08
      00003F 50 EE            [24]  160 	jnc	00102$
                                    161 ;	./src/draw.c:19: }
      000041 22               [24]  162 	ret
                                    163 ;------------------------------------------------------------
                                    164 ;Allocation info for local variables in function 'draw'
                                    165 ;------------------------------------------------------------
                                    166 ;picture                   Allocated to registers r5 r6 r7 
                                    167 ;i                         Allocated to registers r4 
                                    168 ;------------------------------------------------------------
                                    169 ;	./src/draw.c:22: void draw(unsigned char *picture)
                                    170 ;	-----------------------------------------
                                    171 ;	 function draw
                                    172 ;	-----------------------------------------
      000042                        173 _draw:
      000042 AD 82            [24]  174 	mov	r5,dpl
      000044 AE 83            [24]  175 	mov	r6,dph
      000046 AF F0            [24]  176 	mov	r7,b
                                    177 ;	./src/draw.c:26: for(i=1; i<=8; i++) {
      000048 7C 01            [12]  178 	mov	r4,#0x01
      00004A                        179 00102$:
                                    180 ;	./src/draw.c:27: Write7219(i, picture[i-1]);
      00004A 8C 02            [24]  181 	mov	ar2,r4
      00004C 7B 00            [12]  182 	mov	r3,#0x00
      00004E 1A               [12]  183 	dec	r2
      00004F BA FF 01         [24]  184 	cjne	r2,#0xff,00111$
      000052 1B               [12]  185 	dec	r3
      000053                        186 00111$:
      000053 EA               [12]  187 	mov	a,r2
      000054 2D               [12]  188 	add	a,r5
      000055 FA               [12]  189 	mov	r2,a
      000056 EB               [12]  190 	mov	a,r3
      000057 3E               [12]  191 	addc	a,r6
      000058 F9               [12]  192 	mov	r1,a
      000059 8F 03            [24]  193 	mov	ar3,r7
      00005B 8A 82            [24]  194 	mov	dpl,r2
      00005D 89 83            [24]  195 	mov	dph,r1
      00005F 8B F0            [24]  196 	mov	b,r3
      000061 12r00r00         [24]  197 	lcall	__gptrget
      000064 F5*00            [12]  198 	mov	_Write7219_PARM_2,a
      000066 8C 82            [24]  199 	mov	dpl,r4
      000068 C0 07            [24]  200 	push	ar7
      00006A C0 06            [24]  201 	push	ar6
      00006C C0 05            [24]  202 	push	ar5
      00006E C0 04            [24]  203 	push	ar4
      000070 12r00r00         [24]  204 	lcall	_Write7219
      000073 D0 04            [24]  205 	pop	ar4
      000075 D0 05            [24]  206 	pop	ar5
      000077 D0 06            [24]  207 	pop	ar6
      000079 D0 07            [24]  208 	pop	ar7
                                    209 ;	./src/draw.c:26: for(i=1; i<=8; i++) {
      00007B 0C               [12]  210 	inc	r4
      00007C EC               [12]  211 	mov	a,r4
      00007D 24 F7            [12]  212 	add	a,#0xff - 0x08
      00007F 50 C9            [24]  213 	jnc	00102$
                                    214 ;	./src/draw.c:29: }
      000081 22               [24]  215 	ret
                                    216 ;------------------------------------------------------------
                                    217 ;Allocation info for local variables in function 'singledraw'
                                    218 ;------------------------------------------------------------
                                    219 ;picture                   Allocated with name '_singledraw_PARM_2'
                                    220 ;chosen                    Allocated to registers r7 
                                    221 ;i                         Allocated to registers r6 
                                    222 ;------------------------------------------------------------
                                    223 ;	./src/draw.c:32: void singledraw(unsigned char chosen,unsigned char *picture)
                                    224 ;	-----------------------------------------
                                    225 ;	 function singledraw
                                    226 ;	-----------------------------------------
      000082                        227 _singledraw:
      000082 AF 82            [24]  228 	mov	r7,dpl
                                    229 ;	./src/draw.c:36: for(i=1; i<=8; i++) {
      000084 7E 01            [12]  230 	mov	r6,#0x01
      000086                        231 00102$:
                                    232 ;	./src/draw.c:37: Writesingle7219(chosen, i, picture[i-1]);
      000086 8E 04            [24]  233 	mov	ar4,r6
      000088 7D 00            [12]  234 	mov	r5,#0x00
      00008A 1C               [12]  235 	dec	r4
      00008B BC FF 01         [24]  236 	cjne	r4,#0xff,00111$
      00008E 1D               [12]  237 	dec	r5
      00008F                        238 00111$:
      00008F EC               [12]  239 	mov	a,r4
      000090 25*00            [12]  240 	add	a,_singledraw_PARM_2
      000092 FC               [12]  241 	mov	r4,a
      000093 ED               [12]  242 	mov	a,r5
      000094 35*01            [12]  243 	addc	a,(_singledraw_PARM_2 + 1)
      000096 FD               [12]  244 	mov	r5,a
      000097 AB*02            [24]  245 	mov	r3,(_singledraw_PARM_2 + 2)
      000099 8C 82            [24]  246 	mov	dpl,r4
      00009B 8D 83            [24]  247 	mov	dph,r5
      00009D 8B F0            [24]  248 	mov	b,r3
      00009F 12r00r00         [24]  249 	lcall	__gptrget
      0000A2 F5*00            [12]  250 	mov	_Writesingle7219_PARM_3,a
      0000A4 8E*00            [24]  251 	mov	_Writesingle7219_PARM_2,r6
      0000A6 8F 82            [24]  252 	mov	dpl,r7
      0000A8 C0 07            [24]  253 	push	ar7
      0000AA C0 06            [24]  254 	push	ar6
      0000AC 12r00r00         [24]  255 	lcall	_Writesingle7219
      0000AF D0 06            [24]  256 	pop	ar6
      0000B1 D0 07            [24]  257 	pop	ar7
                                    258 ;	./src/draw.c:36: for(i=1; i<=8; i++) {
      0000B3 0E               [12]  259 	inc	r6
      0000B4 EE               [12]  260 	mov	a,r6
      0000B5 24 F7            [12]  261 	add	a,#0xff - 0x08
      0000B7 50 CD            [24]  262 	jnc	00102$
                                    263 ;	./src/draw.c:39: }
      0000B9 22               [24]  264 	ret
                                    265 ;------------------------------------------------------------
                                    266 ;Allocation info for local variables in function 'shiftdraw'
                                    267 ;------------------------------------------------------------
                                    268 ;shift                     Allocated with name '_shiftdraw_shift_65536_21'
                                    269 ;picture                   Allocated to registers r5 r6 r7 
                                    270 ;i                         Allocated to registers r4 
                                    271 ;------------------------------------------------------------
                                    272 ;	./src/draw.c:42: void shiftdraw(unsigned char *picture)
                                    273 ;	-----------------------------------------
                                    274 ;	 function shiftdraw
                                    275 ;	-----------------------------------------
      0000BA                        276 _shiftdraw:
      0000BA AD 82            [24]  277 	mov	r5,dpl
      0000BC AE 83            [24]  278 	mov	r6,dph
      0000BE AF F0            [24]  279 	mov	r7,b
                                    280 ;	./src/draw.c:47: for(i=8; i>=1; i--) {
      0000C0 7C 08            [12]  281 	mov	r4,#0x08
      0000C2                        282 00104$:
                                    283 ;	./src/draw.c:48: Writesingle7219(1, i, picture[(shift-i+8) % 8]);
      0000C2 AA*03            [24]  284 	mov	r2,_shiftdraw_shift_65536_21
      0000C4 7B 00            [12]  285 	mov	r3,#0x00
      0000C6 8C 00            [24]  286 	mov	ar0,r4
      0000C8 79 00            [12]  287 	mov	r1,#0x00
      0000CA EA               [12]  288 	mov	a,r2
      0000CB C3               [12]  289 	clr	c
      0000CC 98               [12]  290 	subb	a,r0
      0000CD FA               [12]  291 	mov	r2,a
      0000CE EB               [12]  292 	mov	a,r3
      0000CF 99               [12]  293 	subb	a,r1
      0000D0 FB               [12]  294 	mov	r3,a
      0000D1 74 08            [12]  295 	mov	a,#0x08
      0000D3 2A               [12]  296 	add	a,r2
      0000D4 F5 82            [12]  297 	mov	dpl,a
      0000D6 E4               [12]  298 	clr	a
      0000D7 3B               [12]  299 	addc	a,r3
      0000D8 F5 83            [12]  300 	mov	dph,a
      0000DA 75*00 08         [24]  301 	mov	__modsint_PARM_2,#0x08
                                    302 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0000DD 89*01            [24]  303 	mov	(__modsint_PARM_2 + 1),r1
      0000DF C0 07            [24]  304 	push	ar7
      0000E1 C0 06            [24]  305 	push	ar6
      0000E3 C0 05            [24]  306 	push	ar5
      0000E5 C0 04            [24]  307 	push	ar4
      0000E7 12r00r00         [24]  308 	lcall	__modsint
      0000EA AA 82            [24]  309 	mov	r2,dpl
      0000EC AB 83            [24]  310 	mov	r3,dph
      0000EE D0 04            [24]  311 	pop	ar4
      0000F0 D0 05            [24]  312 	pop	ar5
      0000F2 D0 06            [24]  313 	pop	ar6
      0000F4 D0 07            [24]  314 	pop	ar7
      0000F6 EA               [12]  315 	mov	a,r2
      0000F7 2D               [12]  316 	add	a,r5
      0000F8 FA               [12]  317 	mov	r2,a
      0000F9 EB               [12]  318 	mov	a,r3
      0000FA 3E               [12]  319 	addc	a,r6
      0000FB F9               [12]  320 	mov	r1,a
      0000FC 8F 03            [24]  321 	mov	ar3,r7
      0000FE 8A 82            [24]  322 	mov	dpl,r2
      000100 89 83            [24]  323 	mov	dph,r1
      000102 8B F0            [24]  324 	mov	b,r3
      000104 12r00r00         [24]  325 	lcall	__gptrget
      000107 F5*00            [12]  326 	mov	_Writesingle7219_PARM_3,a
      000109 8C*00            [24]  327 	mov	_Writesingle7219_PARM_2,r4
      00010B 75 82 01         [24]  328 	mov	dpl,#0x01
      00010E C0 07            [24]  329 	push	ar7
      000110 C0 06            [24]  330 	push	ar6
      000112 C0 05            [24]  331 	push	ar5
      000114 C0 04            [24]  332 	push	ar4
      000116 12r00r00         [24]  333 	lcall	_Writesingle7219
      000119 D0 04            [24]  334 	pop	ar4
      00011B D0 05            [24]  335 	pop	ar5
      00011D D0 06            [24]  336 	pop	ar6
      00011F D0 07            [24]  337 	pop	ar7
                                    338 ;	./src/draw.c:47: for(i=8; i>=1; i--) {
      000121 1C               [12]  339 	dec	r4
      000122 BC 01 00         [24]  340 	cjne	r4,#0x01,00121$
      000125                        341 00121$:
      000125 50 9B            [24]  342 	jnc	00104$
                                    343 ;	./src/draw.c:50: shift += 1;
      000127 E5*03            [12]  344 	mov	a,_shiftdraw_shift_65536_21
      000129 04               [12]  345 	inc	a
                                    346 ;	./src/draw.c:51: if(shift > 8) {
      00012A F5*03            [12]  347 	mov  _shiftdraw_shift_65536_21,a
      00012C 24 F7            [12]  348 	add	a,#0xff - 0x08
      00012E 50 03            [24]  349 	jnc	00103$
                                    350 ;	./src/draw.c:52: shift = 0;
      000130 75*03 00         [24]  351 	mov	_shiftdraw_shift_65536_21,#0x00
      000133                        352 00103$:
                                    353 ;	./src/draw.c:55: delay_ms(1000);
      000133 90 03 E8         [24]  354 	mov	dptr,#0x03e8
                                    355 ;	./src/draw.c:56: }
      000136 02r00r00         [24]  356 	ljmp	_delay_ms
                                    357 	.area CSEG    (CODE)
                                    358 	.area CONST   (CODE)
                                    359 	.area XINIT   (CODE)
                                    360 	.area CABS    (ABS,CODE)
