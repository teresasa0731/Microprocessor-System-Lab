                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sendbyte_PARM_2
                                     12 	.globl _main
                                     13 	.globl _turn_to_CHAR
                                     14 	.globl _calculate_OP
                                     15 	.globl _read_curINPUT
                                     16 	.globl _delay_ms
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _Write7219_PARM_2
                                    114 	.globl _flag
                                    115 	.globl _num2
                                    116 	.globl _num1
                                    117 	.globl _patt
                                    118 	.globl _input
                                    119 	.globl _prestate
                                    120 	.globl _state
                                    121 	.globl _curINPUT
                                    122 	.globl _sendbyte
                                    123 	.globl _Write7219
                                    124 	.globl _Initial
                                    125 	.globl _draw
                                    126 	.globl _scan_row
                                    127 	.globl _sequence
                                    128 	.globl _turn_to_NUM
                                    129 	.globl _func_call
                                    130 	.globl _Clean
                                    131 ;--------------------------------------------------------
                                    132 ; special function registers
                                    133 ;--------------------------------------------------------
                                    134 	.area RSEG    (ABS,DATA)
      000000                        135 	.org 0x0000
                           000080   136 _P0	=	0x0080
                           000081   137 _SP	=	0x0081
                           000082   138 _DPL	=	0x0082
                           000083   139 _DPH	=	0x0083
                           000087   140 _PCON	=	0x0087
                           000088   141 _TCON	=	0x0088
                           000089   142 _TMOD	=	0x0089
                           00008A   143 _TL0	=	0x008a
                           00008B   144 _TL1	=	0x008b
                           00008C   145 _TH0	=	0x008c
                           00008D   146 _TH1	=	0x008d
                           000090   147 _P1	=	0x0090
                           000098   148 _SCON	=	0x0098
                           000099   149 _SBUF	=	0x0099
                           0000A0   150 _P2	=	0x00a0
                           0000A8   151 _IE	=	0x00a8
                           0000B0   152 _P3	=	0x00b0
                           0000B8   153 _IP	=	0x00b8
                           0000D0   154 _PSW	=	0x00d0
                           0000E0   155 _ACC	=	0x00e0
                           0000F0   156 _B	=	0x00f0
                                    157 ;--------------------------------------------------------
                                    158 ; special function bits
                                    159 ;--------------------------------------------------------
                                    160 	.area RSEG    (ABS,DATA)
      000000                        161 	.org 0x0000
                           000080   162 _P0_0	=	0x0080
                           000081   163 _P0_1	=	0x0081
                           000082   164 _P0_2	=	0x0082
                           000083   165 _P0_3	=	0x0083
                           000084   166 _P0_4	=	0x0084
                           000085   167 _P0_5	=	0x0085
                           000086   168 _P0_6	=	0x0086
                           000087   169 _P0_7	=	0x0087
                           000088   170 _IT0	=	0x0088
                           000089   171 _IE0	=	0x0089
                           00008A   172 _IT1	=	0x008a
                           00008B   173 _IE1	=	0x008b
                           00008C   174 _TR0	=	0x008c
                           00008D   175 _TF0	=	0x008d
                           00008E   176 _TR1	=	0x008e
                           00008F   177 _TF1	=	0x008f
                           000090   178 _P1_0	=	0x0090
                           000091   179 _P1_1	=	0x0091
                           000092   180 _P1_2	=	0x0092
                           000093   181 _P1_3	=	0x0093
                           000094   182 _P1_4	=	0x0094
                           000095   183 _P1_5	=	0x0095
                           000096   184 _P1_6	=	0x0096
                           000097   185 _P1_7	=	0x0097
                           000098   186 _RI	=	0x0098
                           000099   187 _TI	=	0x0099
                           00009A   188 _RB8	=	0x009a
                           00009B   189 _TB8	=	0x009b
                           00009C   190 _REN	=	0x009c
                           00009D   191 _SM2	=	0x009d
                           00009E   192 _SM1	=	0x009e
                           00009F   193 _SM0	=	0x009f
                           0000A0   194 _P2_0	=	0x00a0
                           0000A1   195 _P2_1	=	0x00a1
                           0000A2   196 _P2_2	=	0x00a2
                           0000A3   197 _P2_3	=	0x00a3
                           0000A4   198 _P2_4	=	0x00a4
                           0000A5   199 _P2_5	=	0x00a5
                           0000A6   200 _P2_6	=	0x00a6
                           0000A7   201 _P2_7	=	0x00a7
                           0000A8   202 _EX0	=	0x00a8
                           0000A9   203 _ET0	=	0x00a9
                           0000AA   204 _EX1	=	0x00aa
                           0000AB   205 _ET1	=	0x00ab
                           0000AC   206 _ES	=	0x00ac
                           0000AF   207 _EA	=	0x00af
                           0000B0   208 _P3_0	=	0x00b0
                           0000B1   209 _P3_1	=	0x00b1
                           0000B2   210 _P3_2	=	0x00b2
                           0000B3   211 _P3_3	=	0x00b3
                           0000B4   212 _P3_4	=	0x00b4
                           0000B5   213 _P3_5	=	0x00b5
                           0000B6   214 _P3_6	=	0x00b6
                           0000B7   215 _P3_7	=	0x00b7
                           0000B0   216 _RXD	=	0x00b0
                           0000B1   217 _TXD	=	0x00b1
                           0000B2   218 _INT0	=	0x00b2
                           0000B3   219 _INT1	=	0x00b3
                           0000B4   220 _T0	=	0x00b4
                           0000B5   221 _T1	=	0x00b5
                           0000B6   222 _WR	=	0x00b6
                           0000B7   223 _RD	=	0x00b7
                           0000B8   224 _PX0	=	0x00b8
                           0000B9   225 _PT0	=	0x00b9
                           0000BA   226 _PX1	=	0x00ba
                           0000BB   227 _PT1	=	0x00bb
                           0000BC   228 _PS	=	0x00bc
                           0000D0   229 _P	=	0x00d0
                           0000D1   230 _F1	=	0x00d1
                           0000D2   231 _OV	=	0x00d2
                           0000D3   232 _RS0	=	0x00d3
                           0000D4   233 _RS1	=	0x00d4
                           0000D5   234 _F0	=	0x00d5
                           0000D6   235 _AC	=	0x00d6
                           0000D7   236 _CY	=	0x00d7
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable register banks
                                    239 ;--------------------------------------------------------
                                    240 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        241 	.ds 8
                                    242 ;--------------------------------------------------------
                                    243 ; internal ram data
                                    244 ;--------------------------------------------------------
                                    245 	.area DSEG    (DATA)
      000000                        246 _curINPUT::
      000000                        247 	.ds 28
      00001C                        248 _state::
      00001C                        249 	.ds 28
      000038                        250 _prestate::
      000038                        251 	.ds 28
      000054                        252 _input::
      000054                        253 	.ds 16
      000064                        254 _patt::
      000064                        255 	.ds 1
      000065                        256 _num1::
      000065                        257 	.ds 2
      000067                        258 _num2::
      000067                        259 	.ds 2
      000069                        260 _flag::
      000069                        261 	.ds 2
      00006B                        262 _display_seg:
      00006B                        263 	.ds 11
      000076                        264 _Write7219_PARM_2:
      000076                        265 	.ds 1
      000077                        266 _draw_i_65536_27:
      000077                        267 	.ds 1
      000078                        268 _turn_to_NUM_num_65536_50:
      000078                        269 	.ds 2
                                    270 ;--------------------------------------------------------
                                    271 ; overlayable items in internal ram
                                    272 ;--------------------------------------------------------
                                    273 	.area	OSEG    (OVR,DATA)
      000000                        274 _sendbyte_PARM_2:
      000000                        275 	.ds 1
                                    276 	.area	OSEG    (OVR,DATA)
                                    277 	.area	OSEG    (OVR,DATA)
                                    278 ;--------------------------------------------------------
                                    279 ; Stack segment in internal ram
                                    280 ;--------------------------------------------------------
                                    281 	.area SSEG
      000000                        282 __start__stack:
      000000                        283 	.ds	1
                                    284 
                                    285 ;--------------------------------------------------------
                                    286 ; indirectly addressable internal ram data
                                    287 ;--------------------------------------------------------
                                    288 	.area ISEG    (DATA)
                                    289 ;--------------------------------------------------------
                                    290 ; absolute internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area IABS    (ABS,DATA)
                                    293 	.area IABS    (ABS,DATA)
                                    294 ;--------------------------------------------------------
                                    295 ; bit data
                                    296 ;--------------------------------------------------------
                                    297 	.area BSEG    (BIT)
                                    298 ;--------------------------------------------------------
                                    299 ; paged external ram data
                                    300 ;--------------------------------------------------------
                                    301 	.area PSEG    (PAG,XDATA)
                                    302 ;--------------------------------------------------------
                                    303 ; uninitialized external ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area XSEG    (XDATA)
                                    306 ;--------------------------------------------------------
                                    307 ; absolute external ram data
                                    308 ;--------------------------------------------------------
                                    309 	.area XABS    (ABS,XDATA)
                                    310 ;--------------------------------------------------------
                                    311 ; initialized external ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area XISEG   (XDATA)
                                    314 	.area HOME    (CODE)
                                    315 	.area GSINIT0 (CODE)
                                    316 	.area GSINIT1 (CODE)
                                    317 	.area GSINIT2 (CODE)
                                    318 	.area GSINIT3 (CODE)
                                    319 	.area GSINIT4 (CODE)
                                    320 	.area GSINIT5 (CODE)
                                    321 	.area GSINIT  (CODE)
                                    322 	.area GSFINAL (CODE)
                                    323 	.area CSEG    (CODE)
                                    324 ;--------------------------------------------------------
                                    325 ; interrupt vector
                                    326 ;--------------------------------------------------------
                                    327 	.area HOME    (CODE)
      000000                        328 __interrupt_vect:
      000000 02r00r00         [24]  329 	ljmp	__sdcc_gsinit_startup
                                    330 ;--------------------------------------------------------
                                    331 ; global & static initialisations
                                    332 ;--------------------------------------------------------
                                    333 	.area HOME    (CODE)
                                    334 	.area GSINIT  (CODE)
                                    335 	.area GSFINAL (CODE)
                                    336 	.area GSINIT  (CODE)
                                    337 	.globl __sdcc_gsinit_startup
                                    338 	.globl __sdcc_program_startup
                                    339 	.globl __start__stack
                                    340 	.globl __mcs51_genXINIT
                                    341 	.globl __mcs51_genXRAMCLEAR
                                    342 	.globl __mcs51_genRAMCLEAR
                                    343 ;	./src/main.c:56: unsigned char patt = 0x08; // led value
      000000 75*64 08         [24]  344 	mov	_patt,#0x08
                                    345 ;	./src/main.c:58: static unsigned char display_seg[] = {
      000003 75*6B 7E         [24]  346 	mov	_display_seg,#0x7e
      000006 75*6C 30         [24]  347 	mov	(_display_seg + 0x0001),#0x30
      000009 75*6D 6D         [24]  348 	mov	(_display_seg + 0x0002),#0x6d
      00000C 75*6E 79         [24]  349 	mov	(_display_seg + 0x0003),#0x79
      00000F 75*6F 33         [24]  350 	mov	(_display_seg + 0x0004),#0x33
      000012 75*70 5B         [24]  351 	mov	(_display_seg + 0x0005),#0x5b
      000015 75*71 5F         [24]  352 	mov	(_display_seg + 0x0006),#0x5f
      000018 75*72 70         [24]  353 	mov	(_display_seg + 0x0007),#0x70
      00001B 75*73 7F         [24]  354 	mov	(_display_seg + 0x0008),#0x7f
      00001E 75*74 7B         [24]  355 	mov	(_display_seg + 0x0009),#0x7b
      000021 75*75 4F         [24]  356 	mov	(_display_seg + 0x000a),#0x4f
                                    357 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  358 	ljmp	__sdcc_program_startup
                                    359 ;--------------------------------------------------------
                                    360 ; Home
                                    361 ;--------------------------------------------------------
                                    362 	.area HOME    (CODE)
                                    363 	.area HOME    (CODE)
      000003                        364 __sdcc_program_startup:
      000003 02r04r40         [24]  365 	ljmp	_main
                                    366 ;	return from main will return to caller
                                    367 ;--------------------------------------------------------
                                    368 ; code
                                    369 ;--------------------------------------------------------
                                    370 	.area CSEG    (CODE)
                                    371 ;------------------------------------------------------------
                                    372 ;Allocation info for local variables in function 'sendbyte'
                                    373 ;------------------------------------------------------------
                                    374 ;dat                       Allocated with name '_sendbyte_PARM_2'
                                    375 ;address                   Allocated to registers r7 
                                    376 ;i                         Allocated to registers r6 
                                    377 ;------------------------------------------------------------
                                    378 ;	./src/main.c:74: void sendbyte(unsigned char address,unsigned char dat){
                                    379 ;	-----------------------------------------
                                    380 ;	 function sendbyte
                                    381 ;	-----------------------------------------
      000000                        382 _sendbyte:
                           000007   383 	ar7 = 0x07
                           000006   384 	ar6 = 0x06
                           000005   385 	ar5 = 0x05
                           000004   386 	ar4 = 0x04
                           000003   387 	ar3 = 0x03
                           000002   388 	ar2 = 0x02
                           000001   389 	ar1 = 0x01
                           000000   390 	ar0 = 0x00
      000000 AF 82            [24]  391 	mov	r7,dpl
                                    392 ;	./src/main.c:76: for (i=0;i<8;i++)        //get last 8 bits(address)
      000002 7E 00            [12]  393 	mov	r6,#0x00
      000004                        394 00103$:
                                    395 ;	./src/main.c:78: CLK = 0;
                                    396 ;	assignBit
      000004 C2 A0            [12]  397 	clr	_P2_0
                                    398 ;	./src/main.c:79: DOUT = ( address & 0x80);   //get msb and shift left
      000006 EF               [12]  399 	mov	a,r7
      000007 23               [12]  400 	rl	a
      000008 54 01            [12]  401 	anl	a,#0x01
                                    402 ;	assignBit
      00000A 24 FF            [12]  403 	add	a,#0xff
      00000C 92 A2            [24]  404 	mov	_P2_2,c
                                    405 ;	./src/main.c:80: address <<= 1;
      00000E 8F 05            [24]  406 	mov	ar5,r7
      000010 ED               [12]  407 	mov	a,r5
      000011 2D               [12]  408 	add	a,r5
      000012 FF               [12]  409 	mov	r7,a
                                    410 ;	./src/main.c:81: CLK = 1;
                                    411 ;	assignBit
      000013 D2 A0            [12]  412 	setb	_P2_0
                                    413 ;	./src/main.c:76: for (i=0;i<8;i++)        //get last 8 bits(address)
      000015 0E               [12]  414 	inc	r6
      000016 BE 08 00         [24]  415 	cjne	r6,#0x08,00123$
      000019                        416 00123$:
      000019 40 E9            [24]  417 	jc	00103$
                                    418 ;	./src/main.c:83: for (i=0;i<8;i++)      //get first 8 bits(data)
      00001B 7F 00            [12]  419 	mov	r7,#0x00
      00001D                        420 00105$:
                                    421 ;	./src/main.c:85: CLK = 0;
                                    422 ;	assignBit
      00001D C2 A0            [12]  423 	clr	_P2_0
                                    424 ;	./src/main.c:86: DOUT=( dat & 0x80);    //get msb and shit left
      00001F E5*00            [12]  425 	mov	a,_sendbyte_PARM_2
      000021 23               [12]  426 	rl	a
      000022 54 01            [12]  427 	anl	a,#0x01
                                    428 ;	assignBit
      000024 24 FF            [12]  429 	add	a,#0xff
      000026 92 A2            [24]  430 	mov	_P2_2,c
                                    431 ;	./src/main.c:87: dat <<= 1;
      000028 E5*00            [12]  432 	mov	a,_sendbyte_PARM_2
      00002A 25 E0            [12]  433 	add	a,acc
      00002C F5*00            [12]  434 	mov	_sendbyte_PARM_2,a
                                    435 ;	./src/main.c:88: CLK = 1;
                                    436 ;	assignBit
      00002E D2 A0            [12]  437 	setb	_P2_0
                                    438 ;	./src/main.c:83: for (i=0;i<8;i++)      //get first 8 bits(data)
      000030 0F               [12]  439 	inc	r7
      000031 BF 08 00         [24]  440 	cjne	r7,#0x08,00125$
      000034                        441 00125$:
      000034 40 E7            [24]  442 	jc	00105$
                                    443 ;	./src/main.c:90: }
      000036 22               [24]  444 	ret
                                    445 ;------------------------------------------------------------
                                    446 ;Allocation info for local variables in function 'Write7219'
                                    447 ;------------------------------------------------------------
                                    448 ;dat                       Allocated with name '_Write7219_PARM_2'
                                    449 ;address                   Allocated to registers r7 
                                    450 ;cnt                       Allocated to registers r6 
                                    451 ;------------------------------------------------------------
                                    452 ;	./src/main.c:93: void Write7219(unsigned char address, unsigned char dat)
                                    453 ;	-----------------------------------------
                                    454 ;	 function Write7219
                                    455 ;	-----------------------------------------
      000037                        456 _Write7219:
      000037 AF 82            [24]  457 	mov	r7,dpl
                                    458 ;	./src/main.c:96: LOAD = 0;
                                    459 ;	assignBit
      000039 C2 A1            [12]  460 	clr	_P2_1
                                    461 ;	./src/main.c:98: for(cnt=1; cnt<=matrixnum; cnt++)       // send address and data according to the nuber of your matrix
      00003B 7E 01            [12]  462 	mov	r6,#0x01
      00003D                        463 00102$:
                                    464 ;	./src/main.c:100: sendbyte(address, dat);
      00003D 85*76*00         [24]  465 	mov	_sendbyte_PARM_2,_Write7219_PARM_2
      000040 8F 82            [24]  466 	mov	dpl,r7
      000042 C0 07            [24]  467 	push	ar7
      000044 C0 06            [24]  468 	push	ar6
      000046 12r00r00         [24]  469 	lcall	_sendbyte
      000049 D0 06            [24]  470 	pop	ar6
      00004B D0 07            [24]  471 	pop	ar7
                                    472 ;	./src/main.c:98: for(cnt=1; cnt<=matrixnum; cnt++)       // send address and data according to the nuber of your matrix
      00004D 0E               [12]  473 	inc	r6
      00004E EE               [12]  474 	mov	a,r6
      00004F 24 FE            [12]  475 	add	a,#0xff - 0x01
      000051 50 EA            [24]  476 	jnc	00102$
                                    477 ;	./src/main.c:103: LOAD = 1;                               // after the load becomes 1, will the 7-segment display display
                                    478 ;	assignBit
      000053 D2 A1            [12]  479 	setb	_P2_1
                                    480 ;	./src/main.c:104: }
      000055 22               [24]  481 	ret
                                    482 ;------------------------------------------------------------
                                    483 ;Allocation info for local variables in function 'Initial'
                                    484 ;------------------------------------------------------------
                                    485 ;i                         Allocated to registers r7 
                                    486 ;------------------------------------------------------------
                                    487 ;	./src/main.c:107: void Initial(void)
                                    488 ;	-----------------------------------------
                                    489 ;	 function Initial
                                    490 ;	-----------------------------------------
      000056                        491 _Initial:
                                    492 ;	./src/main.c:110: Write7219(SHUT_DOWN,0x01);         //normal mode(0xX1)
      000056 75*76 01         [24]  493 	mov	_Write7219_PARM_2,#0x01
      000059 75 82 0C         [24]  494 	mov	dpl,#0x0c
      00005C 12r00r37         [24]  495 	lcall	_Write7219
                                    496 ;	./src/main.c:111: Write7219(DISPLAY_TEST,0x00);
      00005F 75*76 00         [24]  497 	mov	_Write7219_PARM_2,#0x00
      000062 75 82 0F         [24]  498 	mov	dpl,#0x0f
      000065 12r00r37         [24]  499 	lcall	_Write7219
                                    500 ;	./src/main.c:112: Write7219(DECODE_MODE,0x00);       //select non-decode mode
      000068 75*76 00         [24]  501 	mov	_Write7219_PARM_2,#0x00
      00006B 75 82 09         [24]  502 	mov	dpl,#0x09
      00006E 12r00r37         [24]  503 	lcall	_Write7219
                                    504 ;	./src/main.c:113: Write7219(SCAN_LIMIT,0x07);        //use all 8 LED
      000071 75*76 07         [24]  505 	mov	_Write7219_PARM_2,#0x07
      000074 75 82 0B         [24]  506 	mov	dpl,#0x0b
      000077 12r00r37         [24]  507 	lcall	_Write7219
                                    508 ;	./src/main.c:114: Write7219(INTENSITY,0x00);         //set up intensity
      00007A 75*76 00         [24]  509 	mov	_Write7219_PARM_2,#0x00
      00007D 75 82 0A         [24]  510 	mov	dpl,#0x0a
      000080 12r00r37         [24]  511 	lcall	_Write7219
                                    512 ;	./src/main.c:115: for(i=1;i<=8;i++){
      000083 7F 01            [12]  513 	mov	r7,#0x01
      000085                        514 00102$:
                                    515 ;	./src/main.c:116: Write7219(i,0x00);   //turn off all LED
      000085 75*76 00         [24]  516 	mov	_Write7219_PARM_2,#0x00
      000088 8F 82            [24]  517 	mov	dpl,r7
      00008A C0 07            [24]  518 	push	ar7
      00008C 12r00r37         [24]  519 	lcall	_Write7219
      00008F D0 07            [24]  520 	pop	ar7
                                    521 ;	./src/main.c:115: for(i=1;i<=8;i++){
      000091 0F               [12]  522 	inc	r7
      000092 EF               [12]  523 	mov	a,r7
      000093 24 F7            [12]  524 	add	a,#0xff - 0x08
      000095 50 EE            [24]  525 	jnc	00102$
                                    526 ;	./src/main.c:118: }
      000097 22               [24]  527 	ret
                                    528 ;------------------------------------------------------------
                                    529 ;Allocation info for local variables in function 'draw'
                                    530 ;------------------------------------------------------------
                                    531 ;c                         Allocated to registers r6 
                                    532 ;i                         Allocated with name '_draw_i_65536_27'
                                    533 ;------------------------------------------------------------
                                    534 ;	./src/main.c:121: void draw(void){
                                    535 ;	-----------------------------------------
                                    536 ;	 function draw
                                    537 ;	-----------------------------------------
      000098                        538 _draw:
                                    539 ;	./src/main.c:123: for(i=0;i<8;i++){
      000098 75*77 00         [24]  540 	mov	_draw_i_65536_27,#0x00
                                    541 ;	./src/main.c:124: for(c=0;c<10;c++){
      00009B                        542 00112$:
      00009B E5*77            [12]  543 	mov	a,_draw_i_65536_27
      00009D 25*77            [12]  544 	add	a,_draw_i_65536_27
      00009F 24r54            [12]  545 	add	a,#_input
      0000A1 F9               [12]  546 	mov	r1,a
      0000A2 7E 00            [12]  547 	mov	r6,#0x00
      0000A4                        548 00105$:
                                    549 ;	./src/main.c:125: if(input[i] == display_seg[c]){
      0000A4 87 04            [24]  550 	mov	ar4,@r1
      0000A6 09               [12]  551 	inc	r1
      0000A7 87 05            [24]  552 	mov	ar5,@r1
      0000A9 19               [12]  553 	dec	r1
      0000AA EE               [12]  554 	mov	a,r6
      0000AB 24r6B            [12]  555 	add	a,#_display_seg
      0000AD F8               [12]  556 	mov	r0,a
      0000AE 86 03            [24]  557 	mov	ar3,@r0
      0000B0 8B 02            [24]  558 	mov	ar2,r3
      0000B2 7F 00            [12]  559 	mov	r7,#0x00
      0000B4 EC               [12]  560 	mov	a,r4
      0000B5 B5 02 0E         [24]  561 	cjne	a,ar2,00106$
      0000B8 ED               [12]  562 	mov	a,r5
      0000B9 B5 07 0A         [24]  563 	cjne	a,ar7,00106$
                                    564 ;	./src/main.c:126: Write7219(i, display_seg[c]);
      0000BC 8B*76            [24]  565 	mov	_Write7219_PARM_2,r3
      0000BE 85*77 82         [24]  566 	mov	dpl,_draw_i_65536_27
      0000C1 12r00r37         [24]  567 	lcall	_Write7219
                                    568 ;	./src/main.c:127: break;
      0000C4 80 06            [24]  569 	sjmp	00108$
      0000C6                        570 00106$:
                                    571 ;	./src/main.c:124: for(c=0;c<10;c++){
      0000C6 0E               [12]  572 	inc	r6
      0000C7 BE 0A 00         [24]  573 	cjne	r6,#0x0a,00126$
      0000CA                        574 00126$:
      0000CA 40 D8            [24]  575 	jc	00105$
      0000CC                        576 00108$:
                                    577 ;	./src/main.c:123: for(i=0;i<8;i++){
      0000CC 05*77            [12]  578 	inc	_draw_i_65536_27
      0000CE 74 F8            [12]  579 	mov	a,#0x100 - 0x08
      0000D0 25*77            [12]  580 	add	a,_draw_i_65536_27
      0000D2 50 C7            [24]  581 	jnc	00112$
                                    582 ;	./src/main.c:131: }
      0000D4 22               [24]  583 	ret
                                    584 ;------------------------------------------------------------
                                    585 ;Allocation info for local variables in function 'scan_row'
                                    586 ;------------------------------------------------------------
                                    587 ;row                       Allocated to registers r6 r7 
                                    588 ;------------------------------------------------------------
                                    589 ;	./src/main.c:134: void scan_row(unsigned int row)
                                    590 ;	-----------------------------------------
                                    591 ;	 function scan_row
                                    592 ;	-----------------------------------------
      0000D5                        593 _scan_row:
      0000D5 AE 82            [24]  594 	mov	r6,dpl
      0000D7 AF 83            [24]  595 	mov	r7,dph
                                    596 ;	./src/main.c:136: switch (row)
      0000D9 C3               [12]  597 	clr	c
      0000DA 74 03            [12]  598 	mov	a,#0x03
      0000DC 9E               [12]  599 	subb	a,r6
      0000DD E4               [12]  600 	clr	a
      0000DE 9F               [12]  601 	subb	a,r7
      0000DF 40 31            [24]  602 	jc	00107$
      0000E1 EE               [12]  603 	mov	a,r6
      0000E2 2E               [12]  604 	add	a,r6
                                    605 ;	./src/main.c:138: case 0:
      0000E3 90r00rE7         [24]  606 	mov	dptr,#00114$
      0000E6 73               [24]  607 	jmp	@a+dptr
      0000E7                        608 00114$:
      0000E7 80 06            [24]  609 	sjmp	00101$
      0000E9 80 0D            [24]  610 	sjmp	00102$
      0000EB 80 14            [24]  611 	sjmp	00103$
      0000ED 80 1B            [24]  612 	sjmp	00104$
      0000EF                        613 00101$:
                                    614 ;	./src/main.c:139: OUTPUT1 = 0; // row1 output 0
                                    615 ;	assignBit
      0000EF C2 86            [12]  616 	clr	_P0_6
                                    617 ;	./src/main.c:140: OUTPUT2 = 1; // row2 output 1
                                    618 ;	assignBit
      0000F1 D2 85            [12]  619 	setb	_P0_5
                                    620 ;	./src/main.c:141: OUTPUT3 = 1; // row3 output 1
                                    621 ;	assignBit
      0000F3 D2 84            [12]  622 	setb	_P0_4
                                    623 ;	./src/main.c:142: OUTPUT0 = 1; // row0 output 1
                                    624 ;	assignBit
      0000F5 D2 83            [12]  625 	setb	_P0_3
                                    626 ;	./src/main.c:143: break;
                                    627 ;	./src/main.c:144: case 1:
      0000F7 22               [24]  628 	ret
      0000F8                        629 00102$:
                                    630 ;	./src/main.c:145: OUTPUT1 = 1; // row1 output 1
                                    631 ;	assignBit
      0000F8 D2 86            [12]  632 	setb	_P0_6
                                    633 ;	./src/main.c:146: OUTPUT2 = 0; // row2 output 0
                                    634 ;	assignBit
      0000FA C2 85            [12]  635 	clr	_P0_5
                                    636 ;	./src/main.c:147: OUTPUT3 = 1; // row3 output 1
                                    637 ;	assignBit
      0000FC D2 84            [12]  638 	setb	_P0_4
                                    639 ;	./src/main.c:148: OUTPUT0 = 1; // row0 output 1
                                    640 ;	assignBit
      0000FE D2 83            [12]  641 	setb	_P0_3
                                    642 ;	./src/main.c:149: break;
                                    643 ;	./src/main.c:150: case 2:
      000100 22               [24]  644 	ret
      000101                        645 00103$:
                                    646 ;	./src/main.c:151: OUTPUT1 = 1; // row1 output 1
                                    647 ;	assignBit
      000101 D2 86            [12]  648 	setb	_P0_6
                                    649 ;	./src/main.c:152: OUTPUT2 = 1; // row2 output 1
                                    650 ;	assignBit
      000103 D2 85            [12]  651 	setb	_P0_5
                                    652 ;	./src/main.c:153: OUTPUT3 = 0; // row3 output 0
                                    653 ;	assignBit
      000105 C2 84            [12]  654 	clr	_P0_4
                                    655 ;	./src/main.c:154: OUTPUT0 = 1; // row0 output 1
                                    656 ;	assignBit
      000107 D2 83            [12]  657 	setb	_P0_3
                                    658 ;	./src/main.c:155: break;
                                    659 ;	./src/main.c:156: case 3:
      000109 22               [24]  660 	ret
      00010A                        661 00104$:
                                    662 ;	./src/main.c:157: OUTPUT1 = 1; // row1 output 1
                                    663 ;	assignBit
      00010A D2 86            [12]  664 	setb	_P0_6
                                    665 ;	./src/main.c:158: OUTPUT2 = 1; // row2 output 1
                                    666 ;	assignBit
      00010C D2 85            [12]  667 	setb	_P0_5
                                    668 ;	./src/main.c:159: OUTPUT3 = 1; // row3 output 1
                                    669 ;	assignBit
      00010E D2 84            [12]  670 	setb	_P0_4
                                    671 ;	./src/main.c:160: OUTPUT0 = 0; // row0 output 0
                                    672 ;	assignBit
      000110 C2 83            [12]  673 	clr	_P0_3
                                    674 ;	./src/main.c:164: }
      000112                        675 00107$:
                                    676 ;	./src/main.c:165: }
      000112 22               [24]  677 	ret
                                    678 ;------------------------------------------------------------
                                    679 ;Allocation info for local variables in function 'read_curINPUT'
                                    680 ;------------------------------------------------------------
                                    681 ;i                         Allocated to registers r6 r7 
                                    682 ;------------------------------------------------------------
                                    683 ;	./src/main.c:168: void read_curINPUT(void)
                                    684 ;	-----------------------------------------
                                    685 ;	 function read_curINPUT
                                    686 ;	-----------------------------------------
      000113                        687 _read_curINPUT:
                                    688 ;	./src/main.c:170: for (unsigned int i = 0; i < 4; i++)
      000113 7E 00            [12]  689 	mov	r6,#0x00
      000115 7F 00            [12]  690 	mov	r7,#0x00
      000117                        691 00106$:
      000117 C3               [12]  692 	clr	c
      000118 EE               [12]  693 	mov	a,r6
      000119 94 04            [12]  694 	subb	a,#0x04
      00011B EF               [12]  695 	mov	a,r7
      00011C 94 00            [12]  696 	subb	a,#0x00
      00011E 50 6B            [24]  697 	jnc	00104$
                                    698 ;	./src/main.c:172: scan_row(i);
      000120 8E 82            [24]  699 	mov	dpl,r6
      000122 8F 83            [24]  700 	mov	dph,r7
      000124 C0 07            [24]  701 	push	ar7
      000126 C0 06            [24]  702 	push	ar6
      000128 12r00rD5         [24]  703 	lcall	_scan_row
      00012B D0 06            [24]  704 	pop	ar6
      00012D D0 07            [24]  705 	pop	ar7
                                    706 ;	./src/main.c:173: if(i==3)
      00012F BE 03 10         [24]  707 	cjne	r6,#0x03,00102$
      000132 BF 00 0D         [24]  708 	cjne	r7,#0x00,00102$
                                    709 ;	./src/main.c:174: curINPUT[9] = INPUT2;
      000135 A2 81            [12]  710 	mov	c,_P0_1
      000137 E4               [12]  711 	clr	a
      000138 33               [12]  712 	rlc	a
      000139 FC               [12]  713 	mov	r4,a
      00013A 7D 00            [12]  714 	mov	r5,#0x00
      00013C 8C*12            [24]  715 	mov	((_curINPUT + 0x0012) + 0),r4
      00013E 8D*13            [24]  716 	mov	((_curINPUT + 0x0012) + 1),r5
      000140 80 42            [24]  717 	sjmp	00107$
      000142                        718 00102$:
                                    719 ;	./src/main.c:176: curINPUT[i * 3 + 0] = INPUT1;
      000142 8E 05            [24]  720 	mov	ar5,r6
      000144 ED               [12]  721 	mov	a,r5
      000145 75 F0 03         [24]  722 	mov	b,#0x03
      000148 A4               [48]  723 	mul	ab
      000149 FD               [12]  724 	mov	r5,a
      00014A 25 E0            [12]  725 	add	a,acc
      00014C 24r00            [12]  726 	add	a,#_curINPUT
      00014E F9               [12]  727 	mov	r1,a
      00014F A2 80            [12]  728 	mov	c,_P0_0
      000151 E4               [12]  729 	clr	a
      000152 33               [12]  730 	rlc	a
      000153 FB               [12]  731 	mov	r3,a
      000154 7C 00            [12]  732 	mov	r4,#0x00
      000156 A7 03            [24]  733 	mov	@r1,ar3
      000158 09               [12]  734 	inc	r1
      000159 A7 04            [24]  735 	mov	@r1,ar4
      00015B 19               [12]  736 	dec	r1
                                    737 ;	./src/main.c:177: curINPUT[i * 3 + 1] = INPUT2;
      00015C ED               [12]  738 	mov	a,r5
      00015D 04               [12]  739 	inc	a
      00015E 25 E0            [12]  740 	add	a,acc
      000160 24r00            [12]  741 	add	a,#_curINPUT
      000162 F9               [12]  742 	mov	r1,a
      000163 A2 81            [12]  743 	mov	c,_P0_1
      000165 E4               [12]  744 	clr	a
      000166 33               [12]  745 	rlc	a
      000167 FB               [12]  746 	mov	r3,a
      000168 7C 00            [12]  747 	mov	r4,#0x00
      00016A A7 03            [24]  748 	mov	@r1,ar3
      00016C 09               [12]  749 	inc	r1
      00016D A7 04            [24]  750 	mov	@r1,ar4
      00016F 19               [12]  751 	dec	r1
                                    752 ;	./src/main.c:178: curINPUT[i * 3 + 2] = INPUT3;
      000170 0D               [12]  753 	inc	r5
      000171 0D               [12]  754 	inc	r5
      000172 ED               [12]  755 	mov	a,r5
      000173 2D               [12]  756 	add	a,r5
      000174 24r00            [12]  757 	add	a,#_curINPUT
      000176 F9               [12]  758 	mov	r1,a
      000177 A2 82            [12]  759 	mov	c,_P0_2
      000179 E4               [12]  760 	clr	a
      00017A 33               [12]  761 	rlc	a
      00017B FC               [12]  762 	mov	r4,a
      00017C 7D 00            [12]  763 	mov	r5,#0x00
      00017E A7 04            [24]  764 	mov	@r1,ar4
      000180 09               [12]  765 	inc	r1
      000181 A7 05            [24]  766 	mov	@r1,ar5
      000183 19               [12]  767 	dec	r1
      000184                        768 00107$:
                                    769 ;	./src/main.c:170: for (unsigned int i = 0; i < 4; i++)
      000184 0E               [12]  770 	inc	r6
      000185 BE 00 8F         [24]  771 	cjne	r6,#0x00,00106$
      000188 0F               [12]  772 	inc	r7
      000189 80 8C            [24]  773 	sjmp	00106$
      00018B                        774 00104$:
                                    775 ;	./src/main.c:181: curINPUT[10] = but1;
      00018B A2 B2            [12]  776 	mov	c,_INT0
      00018D E4               [12]  777 	clr	a
      00018E 33               [12]  778 	rlc	a
      00018F FE               [12]  779 	mov	r6,a
      000190 7F 00            [12]  780 	mov	r7,#0x00
      000192 8E*14            [24]  781 	mov	((_curINPUT + 0x0014) + 0),r6
      000194 8F*15            [24]  782 	mov	((_curINPUT + 0x0014) + 1),r7
                                    783 ;	./src/main.c:182: curINPUT[11] = but2;
      000196 A2 B3            [12]  784 	mov	c,_INT1
      000198 E4               [12]  785 	clr	a
      000199 33               [12]  786 	rlc	a
      00019A FE               [12]  787 	mov	r6,a
      00019B 7F 00            [12]  788 	mov	r7,#0x00
      00019D 8E*16            [24]  789 	mov	((_curINPUT + 0x0016) + 0),r6
      00019F 8F*17            [24]  790 	mov	((_curINPUT + 0x0016) + 1),r7
                                    791 ;	./src/main.c:183: curINPUT[12] = but3;
      0001A1 A2 A0            [12]  792 	mov	c,_P2_0
      0001A3 E4               [12]  793 	clr	a
      0001A4 33               [12]  794 	rlc	a
      0001A5 FE               [12]  795 	mov	r6,a
      0001A6 7F 00            [12]  796 	mov	r7,#0x00
      0001A8 8E*18            [24]  797 	mov	((_curINPUT + 0x0018) + 0),r6
      0001AA 8F*19            [24]  798 	mov	((_curINPUT + 0x0018) + 1),r7
                                    799 ;	./src/main.c:184: curINPUT[13] = but4;
      0001AC A2 A1            [12]  800 	mov	c,_P2_1
      0001AE E4               [12]  801 	clr	a
      0001AF 33               [12]  802 	rlc	a
      0001B0 FE               [12]  803 	mov	r6,a
      0001B1 7F 00            [12]  804 	mov	r7,#0x00
      0001B3 8E*1A            [24]  805 	mov	((_curINPUT + 0x001a) + 0),r6
      0001B5 8F*1B            [24]  806 	mov	((_curINPUT + 0x001a) + 1),r7
                                    807 ;	./src/main.c:185: }
      0001B7 22               [24]  808 	ret
                                    809 ;------------------------------------------------------------
                                    810 ;Allocation info for local variables in function 'sequence'
                                    811 ;------------------------------------------------------------
                                    812 ;op                        Allocated to registers r6 r7 
                                    813 ;a                         Allocated to registers r6 r7 
                                    814 ;------------------------------------------------------------
                                    815 ;	./src/main.c:188: void sequence(unsigned int op){
                                    816 ;	-----------------------------------------
                                    817 ;	 function sequence
                                    818 ;	-----------------------------------------
      0001B8                        819 _sequence:
      0001B8 AE 82            [24]  820 	mov	r6,dpl
      0001BA AF 83            [24]  821 	mov	r7,dph
                                    822 ;	./src/main.c:190: if(op){
      0001BC EE               [12]  823 	mov	a,r6
      0001BD 4F               [12]  824 	orl	a,r7
      0001BE 60 2B            [24]  825 	jz	00117$
                                    826 ;	./src/main.c:191: for(a = 7; a > 0; a--){
      0001C0 7E 07            [12]  827 	mov	r6,#0x07
      0001C2 7F 00            [12]  828 	mov	r7,#0x00
      0001C4                        829 00106$:
                                    830 ;	./src/main.c:192: input[a] = input[a-1];
      0001C4 EE               [12]  831 	mov	a,r6
      0001C5 2E               [12]  832 	add	a,r6
      0001C6 FC               [12]  833 	mov	r4,a
      0001C7 EF               [12]  834 	mov	a,r7
      0001C8 33               [12]  835 	rlc	a
      0001C9 EC               [12]  836 	mov	a,r4
      0001CA 24r54            [12]  837 	add	a,#_input
      0001CC F9               [12]  838 	mov	r1,a
      0001CD 8E 05            [24]  839 	mov	ar5,r6
      0001CF 1D               [12]  840 	dec	r5
      0001D0 ED               [12]  841 	mov	a,r5
      0001D1 2D               [12]  842 	add	a,r5
      0001D2 24r54            [12]  843 	add	a,#_input
      0001D4 F8               [12]  844 	mov	r0,a
      0001D5 86 04            [24]  845 	mov	ar4,@r0
      0001D7 08               [12]  846 	inc	r0
      0001D8 86 05            [24]  847 	mov	ar5,@r0
      0001DA 18               [12]  848 	dec	r0
      0001DB A7 04            [24]  849 	mov	@r1,ar4
      0001DD 09               [12]  850 	inc	r1
      0001DE A7 05            [24]  851 	mov	@r1,ar5
      0001E0 19               [12]  852 	dec	r1
                                    853 ;	./src/main.c:191: for(a = 7; a > 0; a--){
      0001E1 1E               [12]  854 	dec	r6
      0001E2 BE FF 01         [24]  855 	cjne	r6,#0xff,00133$
      0001E5 1F               [12]  856 	dec	r7
      0001E6                        857 00133$:
      0001E6 EE               [12]  858 	mov	a,r6
      0001E7 4F               [12]  859 	orl	a,r7
      0001E8 70 DA            [24]  860 	jnz	00106$
                                    861 ;	./src/main.c:195: for(a = 0; a < 7; a++){
      0001EA 22               [24]  862 	ret
      0001EB                        863 00117$:
      0001EB 7E 00            [12]  864 	mov	r6,#0x00
      0001ED 7F 00            [12]  865 	mov	r7,#0x00
      0001EF                        866 00108$:
                                    867 ;	./src/main.c:196: input[a] = input[a+1];
      0001EF EE               [12]  868 	mov	a,r6
      0001F0 2E               [12]  869 	add	a,r6
      0001F1 FC               [12]  870 	mov	r4,a
      0001F2 EF               [12]  871 	mov	a,r7
      0001F3 33               [12]  872 	rlc	a
      0001F4 EC               [12]  873 	mov	a,r4
      0001F5 24r54            [12]  874 	add	a,#_input
      0001F7 F9               [12]  875 	mov	r1,a
      0001F8 8E 05            [24]  876 	mov	ar5,r6
      0001FA 0D               [12]  877 	inc	r5
      0001FB ED               [12]  878 	mov	a,r5
      0001FC 2D               [12]  879 	add	a,r5
      0001FD 24r54            [12]  880 	add	a,#_input
      0001FF F8               [12]  881 	mov	r0,a
      000200 86 04            [24]  882 	mov	ar4,@r0
      000202 08               [12]  883 	inc	r0
      000203 86 05            [24]  884 	mov	ar5,@r0
      000205 18               [12]  885 	dec	r0
      000206 A7 04            [24]  886 	mov	@r1,ar4
      000208 09               [12]  887 	inc	r1
      000209 A7 05            [24]  888 	mov	@r1,ar5
      00020B 19               [12]  889 	dec	r1
                                    890 ;	./src/main.c:197: input[a+1] = 0;
      00020C 76 00            [12]  891 	mov	@r0,#0x00
      00020E 08               [12]  892 	inc	r0
      00020F 76 00            [12]  893 	mov	@r0,#0x00
      000211 18               [12]  894 	dec	r0
                                    895 ;	./src/main.c:195: for(a = 0; a < 7; a++){
      000212 0E               [12]  896 	inc	r6
      000213 BE 00 01         [24]  897 	cjne	r6,#0x00,00135$
      000216 0F               [12]  898 	inc	r7
      000217                        899 00135$:
      000217 C3               [12]  900 	clr	c
      000218 EE               [12]  901 	mov	a,r6
      000219 94 07            [12]  902 	subb	a,#0x07
      00021B EF               [12]  903 	mov	a,r7
      00021C 94 00            [12]  904 	subb	a,#0x00
      00021E 40 CF            [24]  905 	jc	00108$
                                    906 ;	./src/main.c:200: }
      000220 22               [24]  907 	ret
                                    908 ;------------------------------------------------------------
                                    909 ;Allocation info for local variables in function 'turn_to_NUM'
                                    910 ;------------------------------------------------------------
                                    911 ;num                       Allocated with name '_turn_to_NUM_num_65536_50'
                                    912 ;i                         Allocated to registers r2 r3 
                                    913 ;deg                       Allocated to registers r4 r5 
                                    914 ;------------------------------------------------------------
                                    915 ;	./src/main.c:203: unsigned int turn_to_NUM(void){
                                    916 ;	-----------------------------------------
                                    917 ;	 function turn_to_NUM
                                    918 ;	-----------------------------------------
      000221                        919 _turn_to_NUM:
                                    920 ;	./src/main.c:204: unsigned int num = 0,i,deg = 1;
      000221 E4               [12]  921 	clr	a
      000222 F5*78            [12]  922 	mov	_turn_to_NUM_num_65536_50,a
      000224 F5*79            [12]  923 	mov	(_turn_to_NUM_num_65536_50 + 1),a
      000226 7C 01            [12]  924 	mov	r4,#0x01
      000228 7D 00            [12]  925 	mov	r5,#0x00
                                    926 ;	./src/main.c:205: for(i=0;i<8;i++){
      00022A 7A 00            [12]  927 	mov	r2,#0x00
      00022C 7B 00            [12]  928 	mov	r3,#0x00
      00022E                        929 00102$:
                                    930 ;	./src/main.c:206: num = num + input[i]*deg;
      00022E EA               [12]  931 	mov	a,r2
      00022F 2A               [12]  932 	add	a,r2
      000230 FE               [12]  933 	mov	r6,a
      000231 EB               [12]  934 	mov	a,r3
      000232 33               [12]  935 	rlc	a
      000233 EE               [12]  936 	mov	a,r6
      000234 24r54            [12]  937 	add	a,#_input
      000236 F9               [12]  938 	mov	r1,a
      000237 87 82            [24]  939 	mov	dpl,@r1
      000239 09               [12]  940 	inc	r1
      00023A 87 83            [24]  941 	mov	dph,@r1
      00023C 19               [12]  942 	dec	r1
      00023D 8C*00            [24]  943 	mov	__mulint_PARM_2,r4
      00023F 8D*01            [24]  944 	mov	(__mulint_PARM_2 + 1),r5
      000241 C0 05            [24]  945 	push	ar5
      000243 C0 04            [24]  946 	push	ar4
      000245 C0 03            [24]  947 	push	ar3
      000247 C0 02            [24]  948 	push	ar2
      000249 12r00r00         [24]  949 	lcall	__mulint
      00024C AE 82            [24]  950 	mov	r6,dpl
      00024E AF 83            [24]  951 	mov	r7,dph
      000250 D0 02            [24]  952 	pop	ar2
      000252 D0 03            [24]  953 	pop	ar3
      000254 D0 04            [24]  954 	pop	ar4
      000256 D0 05            [24]  955 	pop	ar5
      000258 EE               [12]  956 	mov	a,r6
      000259 25*78            [12]  957 	add	a,_turn_to_NUM_num_65536_50
      00025B F5*78            [12]  958 	mov	_turn_to_NUM_num_65536_50,a
      00025D EF               [12]  959 	mov	a,r7
      00025E 35*79            [12]  960 	addc	a,(_turn_to_NUM_num_65536_50 + 1)
      000260 F5*79            [12]  961 	mov	(_turn_to_NUM_num_65536_50 + 1),a
                                    962 ;	./src/main.c:207: deg = deg *10;
      000262 8C*00            [24]  963 	mov	__mulint_PARM_2,r4
      000264 8D*01            [24]  964 	mov	(__mulint_PARM_2 + 1),r5
      000266 90 00 0A         [24]  965 	mov	dptr,#0x000a
      000269 C0 03            [24]  966 	push	ar3
      00026B C0 02            [24]  967 	push	ar2
      00026D 12r00r00         [24]  968 	lcall	__mulint
      000270 AC 82            [24]  969 	mov	r4,dpl
      000272 AD 83            [24]  970 	mov	r5,dph
      000274 D0 02            [24]  971 	pop	ar2
      000276 D0 03            [24]  972 	pop	ar3
                                    973 ;	./src/main.c:205: for(i=0;i<8;i++){
      000278 0A               [12]  974 	inc	r2
      000279 BA 00 01         [24]  975 	cjne	r2,#0x00,00115$
      00027C 0B               [12]  976 	inc	r3
      00027D                        977 00115$:
      00027D C3               [12]  978 	clr	c
      00027E EA               [12]  979 	mov	a,r2
      00027F 94 08            [12]  980 	subb	a,#0x08
      000281 EB               [12]  981 	mov	a,r3
      000282 94 00            [12]  982 	subb	a,#0x00
      000284 40 A8            [24]  983 	jc	00102$
                                    984 ;	./src/main.c:209: return num;
      000286 85*78 82         [24]  985 	mov	dpl,_turn_to_NUM_num_65536_50
      000289 85*79 83         [24]  986 	mov	dph,(_turn_to_NUM_num_65536_50 + 1)
                                    987 ;	./src/main.c:210: }
      00028C 22               [24]  988 	ret
                                    989 ;------------------------------------------------------------
                                    990 ;Allocation info for local variables in function 'calculate_OP'
                                    991 ;------------------------------------------------------------
                                    992 ;op                        Allocated to registers r7 
                                    993 ;------------------------------------------------------------
                                    994 ;	./src/main.c:213: void calculate_OP(unsigned char op){
                                    995 ;	-----------------------------------------
                                    996 ;	 function calculate_OP
                                    997 ;	-----------------------------------------
      00028D                        998 _calculate_OP:
      00028D AF 82            [24]  999 	mov	r7,dpl
                                   1000 ;	./src/main.c:214: switch (op)
      00028F BF 08 02         [24] 1001 	cjne	r7,#0x08,00125$
      000292 80 0F            [24] 1002 	sjmp	00101$
      000294                       1003 00125$:
      000294 BF 10 02         [24] 1004 	cjne	r7,#0x10,00126$
      000297 80 17            [24] 1005 	sjmp	00102$
      000299                       1006 00126$:
      000299 BF 20 02         [24] 1007 	cjne	r7,#0x20,00127$
      00029C 80 20            [24] 1008 	sjmp	00103$
      00029E                       1009 00127$:
                                   1010 ;	./src/main.c:216: case 0x08:
      00029E BF 40 48         [24] 1011 	cjne	r7,#0x40,00107$
      0002A1 80 31            [24] 1012 	sjmp	00104$
      0002A3                       1013 00101$:
                                   1014 ;	./src/main.c:217: num1 = num1 + num2;
      0002A3 E5*67            [12] 1015 	mov	a,_num2
      0002A5 25*65            [12] 1016 	add	a,_num1
      0002A7 F5*65            [12] 1017 	mov	_num1,a
      0002A9 E5*68            [12] 1018 	mov	a,(_num2 + 1)
      0002AB 35*66            [12] 1019 	addc	a,(_num1 + 1)
      0002AD F5*66            [12] 1020 	mov	(_num1 + 1),a
                                   1021 ;	./src/main.c:218: break;
                                   1022 ;	./src/main.c:219: case 0x10:
      0002AF 22               [24] 1023 	ret
      0002B0                       1024 00102$:
                                   1025 ;	./src/main.c:220: num1 = num1 - num2;
      0002B0 E5*65            [12] 1026 	mov	a,_num1
      0002B2 C3               [12] 1027 	clr	c
      0002B3 95*67            [12] 1028 	subb	a,_num2
      0002B5 F5*65            [12] 1029 	mov	_num1,a
      0002B7 E5*66            [12] 1030 	mov	a,(_num1 + 1)
      0002B9 95*68            [12] 1031 	subb	a,(_num2 + 1)
      0002BB F5*66            [12] 1032 	mov	(_num1 + 1),a
                                   1033 ;	./src/main.c:221: break;
                                   1034 ;	./src/main.c:222: case 0x20:
      0002BD 22               [24] 1035 	ret
      0002BE                       1036 00103$:
                                   1037 ;	./src/main.c:223: num1 = num1 * num2;
      0002BE 85*67*00         [24] 1038 	mov	__mulint_PARM_2,_num2
      0002C1 85*68*01         [24] 1039 	mov	(__mulint_PARM_2 + 1),(_num2 + 1)
      0002C4 85*65 82         [24] 1040 	mov	dpl,_num1
      0002C7 85*66 83         [24] 1041 	mov	dph,(_num1 + 1)
      0002CA 12r00r00         [24] 1042 	lcall	__mulint
      0002CD 85 82*65         [24] 1043 	mov	_num1,dpl
      0002D0 85 83*66         [24] 1044 	mov	(_num1 + 1),dph
                                   1045 ;	./src/main.c:224: break;
                                   1046 ;	./src/main.c:225: case 0x40:
      0002D3 22               [24] 1047 	ret
      0002D4                       1048 00104$:
                                   1049 ;	./src/main.c:226: num1 = num1 / num2;
      0002D4 85*67*00         [24] 1050 	mov	__divuint_PARM_2,_num2
      0002D7 85*68*01         [24] 1051 	mov	(__divuint_PARM_2 + 1),(_num2 + 1)
      0002DA 85*65 82         [24] 1052 	mov	dpl,_num1
      0002DD 85*66 83         [24] 1053 	mov	dph,(_num1 + 1)
      0002E0 12r00r00         [24] 1054 	lcall	__divuint
      0002E3 85 82*65         [24] 1055 	mov	_num1,dpl
      0002E6 85 83*66         [24] 1056 	mov	(_num1 + 1),dph
                                   1057 ;	./src/main.c:230: }
      0002E9                       1058 00107$:
                                   1059 ;	./src/main.c:231: }
      0002E9 22               [24] 1060 	ret
                                   1061 ;------------------------------------------------------------
                                   1062 ;Allocation info for local variables in function 'turn_to_CHAR'
                                   1063 ;------------------------------------------------------------
                                   1064 ;n                         Allocated to registers r6 r7 
                                   1065 ;i                         Allocated to registers r4 r5 
                                   1066 ;------------------------------------------------------------
                                   1067 ;	./src/main.c:234: void turn_to_CHAR(int n){
                                   1068 ;	-----------------------------------------
                                   1069 ;	 function turn_to_CHAR
                                   1070 ;	-----------------------------------------
      0002EA                       1071 _turn_to_CHAR:
      0002EA AE 82            [24] 1072 	mov	r6,dpl
      0002EC AF 83            [24] 1073 	mov	r7,dph
                                   1074 ;	./src/main.c:236: for(i=0;i<8;i++){
      0002EE 7C 00            [12] 1075 	mov	r4,#0x00
      0002F0 7D 00            [12] 1076 	mov	r5,#0x00
      0002F2                       1077 00104$:
                                   1078 ;	./src/main.c:237: input[i] = n%10;
      0002F2 EC               [12] 1079 	mov	a,r4
      0002F3 2C               [12] 1080 	add	a,r4
      0002F4 FA               [12] 1081 	mov	r2,a
      0002F5 ED               [12] 1082 	mov	a,r5
      0002F6 33               [12] 1083 	rlc	a
      0002F7 EA               [12] 1084 	mov	a,r2
      0002F8 24r54            [12] 1085 	add	a,#_input
      0002FA F9               [12] 1086 	mov	r1,a
      0002FB 75*00 0A         [24] 1087 	mov	__modsint_PARM_2,#0x0a
      0002FE 75*01 00         [24] 1088 	mov	(__modsint_PARM_2 + 1),#0x00
      000301 8E 82            [24] 1089 	mov	dpl,r6
      000303 8F 83            [24] 1090 	mov	dph,r7
      000305 C0 07            [24] 1091 	push	ar7
      000307 C0 06            [24] 1092 	push	ar6
      000309 C0 05            [24] 1093 	push	ar5
      00030B C0 04            [24] 1094 	push	ar4
      00030D C0 01            [24] 1095 	push	ar1
      00030F 12r00r00         [24] 1096 	lcall	__modsint
      000312 E5 82            [12] 1097 	mov	a,dpl
      000314 85 83 F0         [24] 1098 	mov	b,dph
      000317 D0 01            [24] 1099 	pop	ar1
      000319 D0 04            [24] 1100 	pop	ar4
      00031B D0 05            [24] 1101 	pop	ar5
      00031D D0 06            [24] 1102 	pop	ar6
      00031F D0 07            [24] 1103 	pop	ar7
      000321 F7               [12] 1104 	mov	@r1,a
      000322 09               [12] 1105 	inc	r1
      000323 A7 F0            [24] 1106 	mov	@r1,b
      000325 19               [12] 1107 	dec	r1
                                   1108 ;	./src/main.c:238: n = n/10;
      000326 75*00 0A         [24] 1109 	mov	__divsint_PARM_2,#0x0a
      000329 75*01 00         [24] 1110 	mov	(__divsint_PARM_2 + 1),#0x00
      00032C 8E 82            [24] 1111 	mov	dpl,r6
      00032E 8F 83            [24] 1112 	mov	dph,r7
      000330 C0 05            [24] 1113 	push	ar5
      000332 C0 04            [24] 1114 	push	ar4
      000334 12r00r00         [24] 1115 	lcall	__divsint
      000337 AE 82            [24] 1116 	mov	r6,dpl
      000339 AF 83            [24] 1117 	mov	r7,dph
      00033B D0 04            [24] 1118 	pop	ar4
      00033D D0 05            [24] 1119 	pop	ar5
                                   1120 ;	./src/main.c:239: if(n == 0)
      00033F EE               [12] 1121 	mov	a,r6
      000340 4F               [12] 1122 	orl	a,r7
      000341 60 0E            [24] 1123 	jz	00106$
                                   1124 ;	./src/main.c:236: for(i=0;i<8;i++){
      000343 0C               [12] 1125 	inc	r4
      000344 BC 00 01         [24] 1126 	cjne	r4,#0x00,00118$
      000347 0D               [12] 1127 	inc	r5
      000348                       1128 00118$:
      000348 C3               [12] 1129 	clr	c
      000349 EC               [12] 1130 	mov	a,r4
      00034A 94 08            [12] 1131 	subb	a,#0x08
      00034C ED               [12] 1132 	mov	a,r5
      00034D 94 00            [12] 1133 	subb	a,#0x00
      00034F 40 A1            [24] 1134 	jc	00104$
      000351                       1135 00106$:
                                   1136 ;	./src/main.c:242: }
      000351 22               [24] 1137 	ret
                                   1138 ;------------------------------------------------------------
                                   1139 ;Allocation info for local variables in function 'func_call'
                                   1140 ;------------------------------------------------------------
                                   1141 ;cmd                       Allocated to registers r6 r7 
                                   1142 ;op                        Allocated to registers r7 
                                   1143 ;------------------------------------------------------------
                                   1144 ;	./src/main.c:245: void func_call(unsigned int cmd){
                                   1145 ;	-----------------------------------------
                                   1146 ;	 function func_call
                                   1147 ;	-----------------------------------------
      000352                       1148 _func_call:
      000352 AE 82            [24] 1149 	mov	r6,dpl
      000354 AF 83            [24] 1150 	mov	r7,dph
                                   1151 ;	./src/main.c:246: switch (cmd)
      000356 BE 0A 05         [24] 1152 	cjne	r6,#0x0a,00151$
      000359 BF 00 02         [24] 1153 	cjne	r7,#0x00,00151$
      00035C 80 1C            [24] 1154 	sjmp	00101$
      00035E                       1155 00151$:
      00035E BE 0B 06         [24] 1156 	cjne	r6,#0x0b,00152$
      000361 BF 00 03         [24] 1157 	cjne	r7,#0x00,00152$
      000364 02r03rD3         [24] 1158 	ljmp	00112$
      000367                       1159 00152$:
      000367 BE 0C 06         [24] 1160 	cjne	r6,#0x0c,00153$
      00036A BF 00 03         [24] 1161 	cjne	r7,#0x00,00153$
      00036D 02r03rDC         [24] 1162 	ljmp	00113$
      000370                       1163 00153$:
      000370 BE 0D 06         [24] 1164 	cjne	r6,#0x0d,00154$
      000373 BF 00 03         [24] 1165 	cjne	r7,#0x00,00154$
      000376 02r03rDF         [24] 1166 	ljmp	00114$
      000379                       1167 00154$:
      000379 22               [24] 1168 	ret
                                   1169 ;	./src/main.c:248: case 10:	//op
      00037A                       1170 00101$:
                                   1171 ;	./src/main.c:251: if(patt == 0x80)
      00037A 74 80            [12] 1172 	mov	a,#0x80
      00037C B5*64 05         [24] 1173 	cjne	a,_patt,00105$
                                   1174 ;	./src/main.c:252: patt = 0x08;
      00037F 75*64 08         [24] 1175 	mov	_patt,#0x08
      000382 80 07            [24] 1176 	sjmp	00106$
      000384                       1177 00105$:
                                   1178 ;	./src/main.c:253: else if (patt == 0x00)
      000384 E5*64            [12] 1179 	mov	a,_patt
      000386 70 03            [24] 1180 	jnz	00106$
                                   1181 ;	./src/main.c:254: patt = 0x08;
      000388 75*64 08         [24] 1182 	mov	_patt,#0x08
      00038B                       1183 00106$:
                                   1184 ;	./src/main.c:255: patt = patt << 1;
      00038B E5*64            [12] 1185 	mov	a,_patt
      00038D 25 E0            [12] 1186 	add	a,acc
                                   1187 ;	./src/main.c:256: led = ~patt;
      00038F F5*64            [12] 1188 	mov	_patt,a
      000391 F4               [12] 1189 	cpl	a
      000392 F5 90            [12] 1190 	mov	_P1,a
                                   1191 ;	./src/main.c:257: delay_ms(20);
      000394 90 00 14         [24] 1192 	mov	dptr,#0x0014
      000397 12r00r00         [24] 1193 	lcall	_delay_ms
                                   1194 ;	./src/main.c:260: if(flag){
      00039A E5*69            [12] 1195 	mov	a,_flag
      00039C 45*6A            [12] 1196 	orl	a,(_flag + 1)
      00039E 60 0F            [24] 1197 	jz	00110$
                                   1198 ;	./src/main.c:261: num1 = turn_to_NUM();
      0003A0 12r02r21         [24] 1199 	lcall	_turn_to_NUM
      0003A3 85 82*65         [24] 1200 	mov	_num1,dpl
      0003A6 85 83*66         [24] 1201 	mov	(_num1 + 1),dph
                                   1202 ;	./src/main.c:262: flag = 0;
      0003A9 E4               [12] 1203 	clr	a
      0003AA F5*69            [12] 1204 	mov	_flag,a
      0003AC F5*6A            [12] 1205 	mov	(_flag + 1),a
      0003AE 22               [24] 1206 	ret
      0003AF                       1207 00110$:
                                   1208 ;	./src/main.c:264: num2 = turn_to_NUM();
      0003AF 12r02r21         [24] 1209 	lcall	_turn_to_NUM
      0003B2 85 82*67         [24] 1210 	mov	_num2,dpl
      0003B5 85 83*68         [24] 1211 	mov	(_num2 + 1),dph
                                   1212 ;	./src/main.c:265: op = patt >> 1;
      0003B8 E5*64            [12] 1213 	mov	a,_patt
      0003BA C3               [12] 1214 	clr	c
      0003BB 13               [12] 1215 	rrc	a
      0003BC FF               [12] 1216 	mov	r7,a
                                   1217 ;	./src/main.c:266: if(op == 0x04)
      0003BD BF 04 02         [24] 1218 	cjne	r7,#0x04,00108$
                                   1219 ;	./src/main.c:267: op = 0x40;
      0003C0 7F 40            [12] 1220 	mov	r7,#0x40
      0003C2                       1221 00108$:
                                   1222 ;	./src/main.c:268: calculate_OP(op);
      0003C2 8F 82            [24] 1223 	mov	dpl,r7
      0003C4 12r02r8D         [24] 1224 	lcall	_calculate_OP
                                   1225 ;	./src/main.c:269: turn_to_CHAR(num1);
      0003C7 85*65 82         [24] 1226 	mov	dpl,_num1
      0003CA 85*66 83         [24] 1227 	mov	dph,(_num1 + 1)
      0003CD 12r02rEA         [24] 1228 	lcall	_turn_to_CHAR
                                   1229 ;	./src/main.c:270: draw();
                                   1230 ;	./src/main.c:272: break;
                                   1231 ;	./src/main.c:273: case 11:	//back <-
      0003D0 02r00r98         [24] 1232 	ljmp	_draw
      0003D3                       1233 00112$:
                                   1234 ;	./src/main.c:274: sequence(0);
      0003D3 90 00 00         [24] 1235 	mov	dptr,#0x0000
      0003D6 12r01rB8         [24] 1236 	lcall	_sequence
                                   1237 ;	./src/main.c:275: draw();
                                   1238 ;	./src/main.c:276: break;
                                   1239 ;	./src/main.c:277: case 12:	//AC
      0003D9 02r00r98         [24] 1240 	ljmp	_draw
      0003DC                       1241 00113$:
                                   1242 ;	./src/main.c:278: Clean();
                                   1243 ;	./src/main.c:279: break;
                                   1244 ;	./src/main.c:280: case 13:	//equal=
      0003DC 02r03rFA         [24] 1245 	ljmp	_Clean
      0003DF                       1246 00114$:
                                   1247 ;	./src/main.c:281: num2 = turn_to_NUM();
      0003DF 12r02r21         [24] 1248 	lcall	_turn_to_NUM
      0003E2 85 82*67         [24] 1249 	mov	_num2,dpl
      0003E5 85 83*68         [24] 1250 	mov	(_num2 + 1),dph
                                   1251 ;	./src/main.c:282: calculate_OP(patt);
      0003E8 85*64 82         [24] 1252 	mov	dpl,_patt
      0003EB 12r02r8D         [24] 1253 	lcall	_calculate_OP
                                   1254 ;	./src/main.c:283: turn_to_CHAR(num1);
      0003EE 85*65 82         [24] 1255 	mov	dpl,_num1
      0003F1 85*66 83         [24] 1256 	mov	dph,(_num1 + 1)
      0003F4 12r02rEA         [24] 1257 	lcall	_turn_to_CHAR
                                   1258 ;	./src/main.c:284: draw();
                                   1259 ;	./src/main.c:288: }
                                   1260 ;	./src/main.c:289: }
      0003F7 02r00r98         [24] 1261 	ljmp	_draw
                                   1262 ;------------------------------------------------------------
                                   1263 ;Allocation info for local variables in function 'Clean'
                                   1264 ;------------------------------------------------------------
                                   1265 ;a                         Allocated to registers r6 r7 
                                   1266 ;------------------------------------------------------------
                                   1267 ;	./src/main.c:292: void Clean(void){
                                   1268 ;	-----------------------------------------
                                   1269 ;	 function Clean
                                   1270 ;	-----------------------------------------
      0003FA                       1271 _Clean:
                                   1272 ;	./src/main.c:293: for(unsigned int a = 0; a < 8; a++){
      0003FA 7E 00            [12] 1273 	mov	r6,#0x00
      0003FC 7F 00            [12] 1274 	mov	r7,#0x00
      0003FE                       1275 00103$:
      0003FE C3               [12] 1276 	clr	c
      0003FF EE               [12] 1277 	mov	a,r6
      000400 94 08            [12] 1278 	subb	a,#0x08
      000402 EF               [12] 1279 	mov	a,r7
      000403 94 00            [12] 1280 	subb	a,#0x00
      000405 50 29            [24] 1281 	jnc	00101$
                                   1282 ;	./src/main.c:294: input[a] = 0;
      000407 EE               [12] 1283 	mov	a,r6
      000408 2E               [12] 1284 	add	a,r6
      000409 FC               [12] 1285 	mov	r4,a
      00040A EF               [12] 1286 	mov	a,r7
      00040B 33               [12] 1287 	rlc	a
      00040C EC               [12] 1288 	mov	a,r4
      00040D 24r54            [12] 1289 	add	a,#_input
      00040F F8               [12] 1290 	mov	r0,a
      000410 76 00            [12] 1291 	mov	@r0,#0x00
      000412 08               [12] 1292 	inc	r0
      000413 76 00            [12] 1293 	mov	@r0,#0x00
                                   1294 ;	./src/main.c:295: Write7219(a+1,0x00);
      000415 8E 05            [24] 1295 	mov	ar5,r6
      000417 ED               [12] 1296 	mov	a,r5
      000418 04               [12] 1297 	inc	a
      000419 F5 82            [12] 1298 	mov	dpl,a
      00041B 75*76 00         [24] 1299 	mov	_Write7219_PARM_2,#0x00
      00041E C0 07            [24] 1300 	push	ar7
      000420 C0 06            [24] 1301 	push	ar6
      000422 12r00r37         [24] 1302 	lcall	_Write7219
      000425 D0 06            [24] 1303 	pop	ar6
      000427 D0 07            [24] 1304 	pop	ar7
                                   1305 ;	./src/main.c:293: for(unsigned int a = 0; a < 8; a++){
      000429 0E               [12] 1306 	inc	r6
      00042A BE 00 D1         [24] 1307 	cjne	r6,#0x00,00103$
      00042D 0F               [12] 1308 	inc	r7
      00042E 80 CE            [24] 1309 	sjmp	00103$
      000430                       1310 00101$:
                                   1311 ;	./src/main.c:297: Write7219(0x01,0x08);
      000430 75*76 08         [24] 1312 	mov	_Write7219_PARM_2,#0x08
      000433 75 82 01         [24] 1313 	mov	dpl,#0x01
      000436 12r00r37         [24] 1314 	lcall	_Write7219
                                   1315 ;	./src/main.c:298: flag = 1;
      000439 75*69 01         [24] 1316 	mov	_flag,#0x01
      00043C 75*6A 00         [24] 1317 	mov	(_flag + 1),#0x00
                                   1318 ;	./src/main.c:299: }
      00043F 22               [24] 1319 	ret
                                   1320 ;------------------------------------------------------------
                                   1321 ;Allocation info for local variables in function 'main'
                                   1322 ;------------------------------------------------------------
                                   1323 ;i                         Allocated to registers r6 r7 
                                   1324 ;i                         Allocated to registers r6 r7 
                                   1325 ;------------------------------------------------------------
                                   1326 ;	./src/main.c:302: void main(void)
                                   1327 ;	-----------------------------------------
                                   1328 ;	 function main
                                   1329 ;	-----------------------------------------
      000440                       1330 _main:
                                   1331 ;	./src/main.c:305: Initial();
      000440 12r00r56         [24] 1332 	lcall	_Initial
                                   1333 ;	./src/main.c:306: for (int i = 0; i < 14; i++)
      000443 7E 00            [12] 1334 	mov	r6,#0x00
      000445 7F 00            [12] 1335 	mov	r7,#0x00
      000447                       1336 00127$:
      000447 C3               [12] 1337 	clr	c
      000448 EE               [12] 1338 	mov	a,r6
      000449 94 0E            [12] 1339 	subb	a,#0x0e
      00044B EF               [12] 1340 	mov	a,r7
      00044C 64 80            [12] 1341 	xrl	a,#0x80
      00044E 94 80            [12] 1342 	subb	a,#0x80
      000450 50 27            [24] 1343 	jnc	00101$
                                   1344 ;	./src/main.c:308: curINPUT[i] = LEVEL_HIGH;
      000452 EE               [12] 1345 	mov	a,r6
      000453 2E               [12] 1346 	add	a,r6
      000454 FC               [12] 1347 	mov	r4,a
      000455 EF               [12] 1348 	mov	a,r7
      000456 33               [12] 1349 	rlc	a
      000457 EC               [12] 1350 	mov	a,r4
      000458 24r00            [12] 1351 	add	a,#_curINPUT
      00045A F8               [12] 1352 	mov	r0,a
      00045B 76 01            [12] 1353 	mov	@r0,#0x01
      00045D 08               [12] 1354 	inc	r0
      00045E 76 00            [12] 1355 	mov	@r0,#0x00
                                   1356 ;	./src/main.c:309: state[i] = BTN_RELEASED;
      000460 EC               [12] 1357 	mov	a,r4
      000461 24r1C            [12] 1358 	add	a,#_state
      000463 F8               [12] 1359 	mov	r0,a
      000464 76 00            [12] 1360 	mov	@r0,#0x00
      000466 08               [12] 1361 	inc	r0
      000467 76 00            [12] 1362 	mov	@r0,#0x00
                                   1363 ;	./src/main.c:310: prestate[i] = BTN_RELEASED;
      000469 EC               [12] 1364 	mov	a,r4
      00046A 24r38            [12] 1365 	add	a,#_prestate
      00046C F8               [12] 1366 	mov	r0,a
      00046D 76 00            [12] 1367 	mov	@r0,#0x00
      00046F 08               [12] 1368 	inc	r0
      000470 76 00            [12] 1369 	mov	@r0,#0x00
                                   1370 ;	./src/main.c:306: for (int i = 0; i < 14; i++)
      000472 0E               [12] 1371 	inc	r6
      000473 BE 00 D1         [24] 1372 	cjne	r6,#0x00,00127$
      000476 0F               [12] 1373 	inc	r7
      000477 80 CE            [24] 1374 	sjmp	00127$
      000479                       1375 00101$:
                                   1376 ;	./src/main.c:312: Clean();
      000479 12r03rFA         [24] 1377 	lcall	_Clean
                                   1378 ;	./src/main.c:314: while(1)
      00047C                       1379 00124$:
                                   1380 ;	./src/main.c:316: delay_ms(20);
      00047C 90 00 14         [24] 1381 	mov	dptr,#0x0014
      00047F 12r00r00         [24] 1382 	lcall	_delay_ms
                                   1383 ;	./src/main.c:318: read_curINPUT();
      000482 12r01r13         [24] 1384 	lcall	_read_curINPUT
                                   1385 ;	./src/main.c:319: for (int i = 0; i < 14; i++)
      000485 7E 00            [12] 1386 	mov	r6,#0x00
      000487 7F 00            [12] 1387 	mov	r7,#0x00
      000489                       1388 00130$:
      000489 C3               [12] 1389 	clr	c
      00048A EE               [12] 1390 	mov	a,r6
      00048B 94 0E            [12] 1391 	subb	a,#0x0e
      00048D EF               [12] 1392 	mov	a,r7
      00048E 64 80            [12] 1393 	xrl	a,#0x80
      000490 94 80            [12] 1394 	subb	a,#0x80
      000492 50 E8            [24] 1395 	jnc	00124$
                                   1396 ;	./src/main.c:322: switch (state[i])
      000494 EE               [12] 1397 	mov	a,r6
      000495 2E               [12] 1398 	add	a,r6
      000496 FC               [12] 1399 	mov	r4,a
      000497 EF               [12] 1400 	mov	a,r7
      000498 33               [12] 1401 	rlc	a
      000499 FD               [12] 1402 	mov	r5,a
      00049A EC               [12] 1403 	mov	a,r4
      00049B 24r1C            [12] 1404 	add	a,#_state
      00049D F9               [12] 1405 	mov	r1,a
      00049E 87 02            [24] 1406 	mov	ar2,@r1
      0004A0 09               [12] 1407 	inc	r1
      0004A1 87 03            [24] 1408 	mov	ar3,@r1
      0004A3 19               [12] 1409 	dec	r1
      0004A4 BA 00 05         [24] 1410 	cjne	r2,#0x00,00194$
      0004A7 BB 00 02         [24] 1411 	cjne	r3,#0x00,00194$
      0004AA 80 10            [24] 1412 	sjmp	00102$
      0004AC                       1413 00194$:
      0004AC BA 01 05         [24] 1414 	cjne	r2,#0x01,00195$
      0004AF BB 00 02         [24] 1415 	cjne	r3,#0x00,00195$
      0004B2 80 26            [24] 1416 	sjmp	00106$
      0004B4                       1417 00195$:
                                   1418 ;	./src/main.c:324: case BTN_RELEASED:
      0004B4 BA 02 5D         [24] 1419 	cjne	r2,#0x02,00115$
      0004B7 BB 00 5A         [24] 1420 	cjne	r3,#0x00,00115$
      0004BA 80 3C            [24] 1421 	sjmp	00110$
      0004BC                       1422 00102$:
                                   1423 ;	./src/main.c:325: if (curINPUT[i] == LEVEL_LOW)
      0004BC EC               [12] 1424 	mov	a,r4
      0004BD 24r00            [12] 1425 	add	a,#_curINPUT
      0004BF F8               [12] 1426 	mov	r0,a
      0004C0 86 02            [24] 1427 	mov	ar2,@r0
      0004C2 08               [12] 1428 	inc	r0
      0004C3 86 03            [24] 1429 	mov	ar3,@r0
      0004C5 18               [12] 1430 	dec	r0
      0004C6 EA               [12] 1431 	mov	a,r2
      0004C7 4B               [12] 1432 	orl	a,r3
      0004C8 70 08            [24] 1433 	jnz	00104$
                                   1434 ;	./src/main.c:326: state[i] = BTN_DEBOUNCED;
      0004CA 77 01            [12] 1435 	mov	@r1,#0x01
      0004CC 09               [12] 1436 	inc	r1
      0004CD 77 00            [12] 1437 	mov	@r1,#0x00
      0004CF 19               [12] 1438 	dec	r1
      0004D0 80 42            [24] 1439 	sjmp	00115$
      0004D2                       1440 00104$:
                                   1441 ;	./src/main.c:328: state[i] = BTN_RELEASED;
      0004D2 77 00            [12] 1442 	mov	@r1,#0x00
      0004D4 09               [12] 1443 	inc	r1
      0004D5 77 00            [12] 1444 	mov	@r1,#0x00
      0004D7 19               [12] 1445 	dec	r1
                                   1446 ;	./src/main.c:329: break;
                                   1447 ;	./src/main.c:330: case BTN_DEBOUNCED:
      0004D8 80 3A            [24] 1448 	sjmp	00115$
      0004DA                       1449 00106$:
                                   1450 ;	./src/main.c:331: if (curINPUT[i] == LEVEL_LOW)
      0004DA EC               [12] 1451 	mov	a,r4
      0004DB 24r00            [12] 1452 	add	a,#_curINPUT
      0004DD F8               [12] 1453 	mov	r0,a
      0004DE 86 02            [24] 1454 	mov	ar2,@r0
      0004E0 08               [12] 1455 	inc	r0
      0004E1 86 03            [24] 1456 	mov	ar3,@r0
      0004E3 18               [12] 1457 	dec	r0
      0004E4 EA               [12] 1458 	mov	a,r2
      0004E5 4B               [12] 1459 	orl	a,r3
      0004E6 70 08            [24] 1460 	jnz	00108$
                                   1461 ;	./src/main.c:332: state[i] = BTN_PRESSED;
      0004E8 77 02            [12] 1462 	mov	@r1,#0x02
      0004EA 09               [12] 1463 	inc	r1
      0004EB 77 00            [12] 1464 	mov	@r1,#0x00
      0004ED 19               [12] 1465 	dec	r1
      0004EE 80 24            [24] 1466 	sjmp	00115$
      0004F0                       1467 00108$:
                                   1468 ;	./src/main.c:334: state[i] = BTN_RELEASED;
      0004F0 77 00            [12] 1469 	mov	@r1,#0x00
      0004F2 09               [12] 1470 	inc	r1
      0004F3 77 00            [12] 1471 	mov	@r1,#0x00
      0004F5 19               [12] 1472 	dec	r1
                                   1473 ;	./src/main.c:335: break;
                                   1474 ;	./src/main.c:336: case BTN_PRESSED:
      0004F6 80 1C            [24] 1475 	sjmp	00115$
      0004F8                       1476 00110$:
                                   1477 ;	./src/main.c:337: if (curINPUT[i] == LEVEL_LOW)
      0004F8 EC               [12] 1478 	mov	a,r4
      0004F9 24r00            [12] 1479 	add	a,#_curINPUT
      0004FB F8               [12] 1480 	mov	r0,a
      0004FC 86 04            [24] 1481 	mov	ar4,@r0
      0004FE 08               [12] 1482 	inc	r0
      0004FF 86 05            [24] 1483 	mov	ar5,@r0
      000501 18               [12] 1484 	dec	r0
      000502 EC               [12] 1485 	mov	a,r4
      000503 4D               [12] 1486 	orl	a,r5
      000504 70 08            [24] 1487 	jnz	00112$
                                   1488 ;	./src/main.c:338: state[i] = BTN_PRESSED;
      000506 77 02            [12] 1489 	mov	@r1,#0x02
      000508 09               [12] 1490 	inc	r1
      000509 77 00            [12] 1491 	mov	@r1,#0x00
      00050B 19               [12] 1492 	dec	r1
      00050C 80 06            [24] 1493 	sjmp	00115$
      00050E                       1494 00112$:
                                   1495 ;	./src/main.c:340: state[i] = BTN_RELEASED;
      00050E 77 00            [12] 1496 	mov	@r1,#0x00
      000510 09               [12] 1497 	inc	r1
      000511 77 00            [12] 1498 	mov	@r1,#0x00
      000513 19               [12] 1499 	dec	r1
                                   1500 ;	./src/main.c:344: }
      000514                       1501 00115$:
                                   1502 ;	./src/main.c:346: if ((state[i] == BTN_RELEASED) && (prestate[i] == BTN_PRESSED)){
      000514 EE               [12] 1503 	mov	a,r6
      000515 2E               [12] 1504 	add	a,r6
      000516 FC               [12] 1505 	mov	r4,a
      000517 EF               [12] 1506 	mov	a,r7
      000518 33               [12] 1507 	rlc	a
      000519 FD               [12] 1508 	mov	r5,a
      00051A EC               [12] 1509 	mov	a,r4
      00051B 24r1C            [12] 1510 	add	a,#_state
      00051D F9               [12] 1511 	mov	r1,a
      00051E 87 02            [24] 1512 	mov	ar2,@r1
      000520 09               [12] 1513 	inc	r1
      000521 87 03            [24] 1514 	mov	ar3,@r1
      000523 19               [12] 1515 	dec	r1
      000524 EA               [12] 1516 	mov	a,r2
      000525 4B               [12] 1517 	orl	a,r3
      000526 70 49            [24] 1518 	jnz	00120$
      000528 EC               [12] 1519 	mov	a,r4
      000529 24r38            [12] 1520 	add	a,#_prestate
      00052B F9               [12] 1521 	mov	r1,a
      00052C 87 04            [24] 1522 	mov	ar4,@r1
      00052E 09               [12] 1523 	inc	r1
      00052F 87 05            [24] 1524 	mov	ar5,@r1
      000531 19               [12] 1525 	dec	r1
      000532 BC 02 3C         [24] 1526 	cjne	r4,#0x02,00120$
      000535 BD 00 39         [24] 1527 	cjne	r5,#0x00,00120$
                                   1528 ;	./src/main.c:347: if (i < 10){
      000538 C3               [12] 1529 	clr	c
      000539 EE               [12] 1530 	mov	a,r6
      00053A 94 0A            [12] 1531 	subb	a,#0x0a
      00053C EF               [12] 1532 	mov	a,r7
      00053D 64 80            [12] 1533 	xrl	a,#0x80
      00053F 94 80            [12] 1534 	subb	a,#0x80
      000541 50 1F            [24] 1535 	jnc	00117$
                                   1536 ;	./src/main.c:348: sequence(1);
      000543 90 00 01         [24] 1537 	mov	dptr,#0x0001
      000546 C0 07            [24] 1538 	push	ar7
      000548 C0 06            [24] 1539 	push	ar6
      00054A 12r01rB8         [24] 1540 	lcall	_sequence
      00054D D0 06            [24] 1541 	pop	ar6
      00054F D0 07            [24] 1542 	pop	ar7
                                   1543 ;	./src/main.c:349: input[0] = i;
      000551 8E*54            [24] 1544 	mov	(_input + 0),r6
      000553 8F*55            [24] 1545 	mov	(_input + 1),r7
                                   1546 ;	./src/main.c:350: draw();
      000555 C0 07            [24] 1547 	push	ar7
      000557 C0 06            [24] 1548 	push	ar6
      000559 12r00r98         [24] 1549 	lcall	_draw
      00055C D0 06            [24] 1550 	pop	ar6
      00055E D0 07            [24] 1551 	pop	ar7
      000560 80 0F            [24] 1552 	sjmp	00120$
      000562                       1553 00117$:
                                   1554 ;	./src/main.c:352: func_call(i);
      000562 8E 82            [24] 1555 	mov	dpl,r6
      000564 8F 83            [24] 1556 	mov	dph,r7
      000566 C0 07            [24] 1557 	push	ar7
      000568 C0 06            [24] 1558 	push	ar6
      00056A 12r03r52         [24] 1559 	lcall	_func_call
      00056D D0 06            [24] 1560 	pop	ar6
      00056F D0 07            [24] 1561 	pop	ar7
      000571                       1562 00120$:
                                   1563 ;	./src/main.c:355: prestate[i] = state[i];
      000571 EE               [12] 1564 	mov	a,r6
      000572 2E               [12] 1565 	add	a,r6
      000573 FC               [12] 1566 	mov	r4,a
      000574 EF               [12] 1567 	mov	a,r7
      000575 33               [12] 1568 	rlc	a
      000576 EC               [12] 1569 	mov	a,r4
      000577 24r38            [12] 1570 	add	a,#_prestate
      000579 F9               [12] 1571 	mov	r1,a
      00057A EC               [12] 1572 	mov	a,r4
      00057B 24r1C            [12] 1573 	add	a,#_state
      00057D F8               [12] 1574 	mov	r0,a
      00057E 86 04            [24] 1575 	mov	ar4,@r0
      000580 08               [12] 1576 	inc	r0
      000581 86 05            [24] 1577 	mov	ar5,@r0
      000583 18               [12] 1578 	dec	r0
      000584 A7 04            [24] 1579 	mov	@r1,ar4
      000586 09               [12] 1580 	inc	r1
      000587 A7 05            [24] 1581 	mov	@r1,ar5
      000589 19               [12] 1582 	dec	r1
                                   1583 ;	./src/main.c:319: for (int i = 0; i < 14; i++)
      00058A 0E               [12] 1584 	inc	r6
      00058B BE 00 01         [24] 1585 	cjne	r6,#0x00,00204$
      00058E 0F               [12] 1586 	inc	r7
      00058F                       1587 00204$:
                                   1588 ;	./src/main.c:358: }
      00058F 02r04r89         [24] 1589 	ljmp	00130$
                                   1590 	.area CSEG    (CODE)
                                   1591 	.area CONST   (CODE)
                                   1592 	.area XINIT   (CODE)
                                   1593 	.area CABS    (ABS,CODE)
