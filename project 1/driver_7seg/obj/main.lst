                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sendbyte_PARM_2
                                     12 	.globl _main
                                     13 	.globl _func_call
                                     14 	.globl _sequence
                                     15 	.globl _read_curINPUT
                                     16 	.globl _delay_ms
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _display_seg
                                    114 	.globl _Write7219_PARM_2
                                    115 	.globl _op_cnt
                                    116 	.globl _patt1
                                    117 	.globl _patt
                                    118 	.globl _display
                                    119 	.globl _prestate
                                    120 	.globl _state
                                    121 	.globl _curINPUT
                                    122 	.globl _sendbyte
                                    123 	.globl _Write7219
                                    124 	.globl _Initial
                                    125 	.globl _draw
                                    126 	.globl _scan_row
                                    127 ;--------------------------------------------------------
                                    128 ; special function registers
                                    129 ;--------------------------------------------------------
                                    130 	.area RSEG    (ABS,DATA)
      000000                        131 	.org 0x0000
                           000080   132 _P0	=	0x0080
                           000081   133 _SP	=	0x0081
                           000082   134 _DPL	=	0x0082
                           000083   135 _DPH	=	0x0083
                           000087   136 _PCON	=	0x0087
                           000088   137 _TCON	=	0x0088
                           000089   138 _TMOD	=	0x0089
                           00008A   139 _TL0	=	0x008a
                           00008B   140 _TL1	=	0x008b
                           00008C   141 _TH0	=	0x008c
                           00008D   142 _TH1	=	0x008d
                           000090   143 _P1	=	0x0090
                           000098   144 _SCON	=	0x0098
                           000099   145 _SBUF	=	0x0099
                           0000A0   146 _P2	=	0x00a0
                           0000A8   147 _IE	=	0x00a8
                           0000B0   148 _P3	=	0x00b0
                           0000B8   149 _IP	=	0x00b8
                           0000D0   150 _PSW	=	0x00d0
                           0000E0   151 _ACC	=	0x00e0
                           0000F0   152 _B	=	0x00f0
                                    153 ;--------------------------------------------------------
                                    154 ; special function bits
                                    155 ;--------------------------------------------------------
                                    156 	.area RSEG    (ABS,DATA)
      000000                        157 	.org 0x0000
                           000080   158 _P0_0	=	0x0080
                           000081   159 _P0_1	=	0x0081
                           000082   160 _P0_2	=	0x0082
                           000083   161 _P0_3	=	0x0083
                           000084   162 _P0_4	=	0x0084
                           000085   163 _P0_5	=	0x0085
                           000086   164 _P0_6	=	0x0086
                           000087   165 _P0_7	=	0x0087
                           000088   166 _IT0	=	0x0088
                           000089   167 _IE0	=	0x0089
                           00008A   168 _IT1	=	0x008a
                           00008B   169 _IE1	=	0x008b
                           00008C   170 _TR0	=	0x008c
                           00008D   171 _TF0	=	0x008d
                           00008E   172 _TR1	=	0x008e
                           00008F   173 _TF1	=	0x008f
                           000090   174 _P1_0	=	0x0090
                           000091   175 _P1_1	=	0x0091
                           000092   176 _P1_2	=	0x0092
                           000093   177 _P1_3	=	0x0093
                           000094   178 _P1_4	=	0x0094
                           000095   179 _P1_5	=	0x0095
                           000096   180 _P1_6	=	0x0096
                           000097   181 _P1_7	=	0x0097
                           000098   182 _RI	=	0x0098
                           000099   183 _TI	=	0x0099
                           00009A   184 _RB8	=	0x009a
                           00009B   185 _TB8	=	0x009b
                           00009C   186 _REN	=	0x009c
                           00009D   187 _SM2	=	0x009d
                           00009E   188 _SM1	=	0x009e
                           00009F   189 _SM0	=	0x009f
                           0000A0   190 _P2_0	=	0x00a0
                           0000A1   191 _P2_1	=	0x00a1
                           0000A2   192 _P2_2	=	0x00a2
                           0000A3   193 _P2_3	=	0x00a3
                           0000A4   194 _P2_4	=	0x00a4
                           0000A5   195 _P2_5	=	0x00a5
                           0000A6   196 _P2_6	=	0x00a6
                           0000A7   197 _P2_7	=	0x00a7
                           0000A8   198 _EX0	=	0x00a8
                           0000A9   199 _ET0	=	0x00a9
                           0000AA   200 _EX1	=	0x00aa
                           0000AB   201 _ET1	=	0x00ab
                           0000AC   202 _ES	=	0x00ac
                           0000AF   203 _EA	=	0x00af
                           0000B0   204 _P3_0	=	0x00b0
                           0000B1   205 _P3_1	=	0x00b1
                           0000B2   206 _P3_2	=	0x00b2
                           0000B3   207 _P3_3	=	0x00b3
                           0000B4   208 _P3_4	=	0x00b4
                           0000B5   209 _P3_5	=	0x00b5
                           0000B6   210 _P3_6	=	0x00b6
                           0000B7   211 _P3_7	=	0x00b7
                           0000B0   212 _RXD	=	0x00b0
                           0000B1   213 _TXD	=	0x00b1
                           0000B2   214 _INT0	=	0x00b2
                           0000B3   215 _INT1	=	0x00b3
                           0000B4   216 _T0	=	0x00b4
                           0000B5   217 _T1	=	0x00b5
                           0000B6   218 _WR	=	0x00b6
                           0000B7   219 _RD	=	0x00b7
                           0000B8   220 _PX0	=	0x00b8
                           0000B9   221 _PT0	=	0x00b9
                           0000BA   222 _PX1	=	0x00ba
                           0000BB   223 _PT1	=	0x00bb
                           0000BC   224 _PS	=	0x00bc
                           0000D0   225 _P	=	0x00d0
                           0000D1   226 _F1	=	0x00d1
                           0000D2   227 _OV	=	0x00d2
                           0000D3   228 _RS0	=	0x00d3
                           0000D4   229 _RS1	=	0x00d4
                           0000D5   230 _F0	=	0x00d5
                           0000D6   231 _AC	=	0x00d6
                           0000D7   232 _CY	=	0x00d7
                                    233 ;--------------------------------------------------------
                                    234 ; overlayable register banks
                                    235 ;--------------------------------------------------------
                                    236 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        237 	.ds 8
                                    238 ;--------------------------------------------------------
                                    239 ; internal ram data
                                    240 ;--------------------------------------------------------
                                    241 	.area DSEG    (DATA)
      000000                        242 _curINPUT::
      000000                        243 	.ds 28
      00001C                        244 _state::
      00001C                        245 	.ds 28
      000038                        246 _prestate::
      000038                        247 	.ds 28
      000054                        248 _display::
      000054                        249 	.ds 8
      00005C                        250 _patt::
      00005C                        251 	.ds 1
      00005D                        252 _patt1::
      00005D                        253 	.ds 1
      00005E                        254 _op_cnt::
      00005E                        255 	.ds 2
      000060                        256 _Write7219_PARM_2:
      000060                        257 	.ds 1
      000061                        258 _display_seg::
      000061                        259 	.ds 11
                                    260 ;--------------------------------------------------------
                                    261 ; overlayable items in internal ram
                                    262 ;--------------------------------------------------------
                                    263 	.area	OSEG    (OVR,DATA)
      000000                        264 _sendbyte_PARM_2:
      000000                        265 	.ds 1
                                    266 	.area	OSEG    (OVR,DATA)
                                    267 ;--------------------------------------------------------
                                    268 ; Stack segment in internal ram
                                    269 ;--------------------------------------------------------
                                    270 	.area SSEG
      000000                        271 __start__stack:
      000000                        272 	.ds	1
                                    273 
                                    274 ;--------------------------------------------------------
                                    275 ; indirectly addressable internal ram data
                                    276 ;--------------------------------------------------------
                                    277 	.area ISEG    (DATA)
                                    278 ;--------------------------------------------------------
                                    279 ; absolute internal ram data
                                    280 ;--------------------------------------------------------
                                    281 	.area IABS    (ABS,DATA)
                                    282 	.area IABS    (ABS,DATA)
                                    283 ;--------------------------------------------------------
                                    284 ; bit data
                                    285 ;--------------------------------------------------------
                                    286 	.area BSEG    (BIT)
                                    287 ;--------------------------------------------------------
                                    288 ; paged external ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area PSEG    (PAG,XDATA)
                                    291 ;--------------------------------------------------------
                                    292 ; uninitialized external ram data
                                    293 ;--------------------------------------------------------
                                    294 	.area XSEG    (XDATA)
                                    295 ;--------------------------------------------------------
                                    296 ; absolute external ram data
                                    297 ;--------------------------------------------------------
                                    298 	.area XABS    (ABS,XDATA)
                                    299 ;--------------------------------------------------------
                                    300 ; initialized external ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area XISEG   (XDATA)
                                    303 	.area HOME    (CODE)
                                    304 	.area GSINIT0 (CODE)
                                    305 	.area GSINIT1 (CODE)
                                    306 	.area GSINIT2 (CODE)
                                    307 	.area GSINIT3 (CODE)
                                    308 	.area GSINIT4 (CODE)
                                    309 	.area GSINIT5 (CODE)
                                    310 	.area GSINIT  (CODE)
                                    311 	.area GSFINAL (CODE)
                                    312 	.area CSEG    (CODE)
                                    313 ;--------------------------------------------------------
                                    314 ; interrupt vector
                                    315 ;--------------------------------------------------------
                                    316 	.area HOME    (CODE)
      000000                        317 __interrupt_vect:
      000000 02r00r00         [24]  318 	ljmp	__sdcc_gsinit_startup
                                    319 ;--------------------------------------------------------
                                    320 ; global & static initialisations
                                    321 ;--------------------------------------------------------
                                    322 	.area HOME    (CODE)
                                    323 	.area GSINIT  (CODE)
                                    324 	.area GSFINAL (CODE)
                                    325 	.area GSINIT  (CODE)
                                    326 	.globl __sdcc_gsinit_startup
                                    327 	.globl __sdcc_program_startup
                                    328 	.globl __start__stack
                                    329 	.globl __mcs51_genXINIT
                                    330 	.globl __mcs51_genXRAMCLEAR
                                    331 	.globl __mcs51_genRAMCLEAR
                                    332 ;	./src/main.c:52: unsigned char patt = 0x08,patt1; // led value
      000000 75*5C 08         [24]  333 	mov	_patt,#0x08
                                    334 ;	./src/main.c:53: unsigned int op_cnt = 0;
      000003 E4               [12]  335 	clr	a
      000004 F5*5E            [12]  336 	mov	_op_cnt,a
      000006 F5*5F            [12]  337 	mov	(_op_cnt + 1),a
                                    338 ;	./src/main.c:213: unsigned char display_seg[] = {
      000008 75*61 30         [24]  339 	mov	_display_seg,#0x30
      00000B 75*62 6D         [24]  340 	mov	(_display_seg + 0x0001),#0x6d
      00000E 75*63 79         [24]  341 	mov	(_display_seg + 0x0002),#0x79
      000011 75*64 33         [24]  342 	mov	(_display_seg + 0x0003),#0x33
      000014 75*65 5B         [24]  343 	mov	(_display_seg + 0x0004),#0x5b
      000017 75*66 5F         [24]  344 	mov	(_display_seg + 0x0005),#0x5f
      00001A 75*67 70         [24]  345 	mov	(_display_seg + 0x0006),#0x70
      00001D 75*68 7F         [24]  346 	mov	(_display_seg + 0x0007),#0x7f
      000020 75*69 7B         [24]  347 	mov	(_display_seg + 0x0008),#0x7b
      000023 75*6A 7E         [24]  348 	mov	(_display_seg + 0x0009),#0x7e
      000026 75*6B 4F         [24]  349 	mov	(_display_seg + 0x000a),#0x4f
                                    350 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  351 	ljmp	__sdcc_program_startup
                                    352 ;--------------------------------------------------------
                                    353 ; Home
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area HOME    (CODE)
      000003                        357 __sdcc_program_startup:
      000003 02r02r6A         [24]  358 	ljmp	_main
                                    359 ;	return from main will return to caller
                                    360 ;--------------------------------------------------------
                                    361 ; code
                                    362 ;--------------------------------------------------------
                                    363 	.area CSEG    (CODE)
                                    364 ;------------------------------------------------------------
                                    365 ;Allocation info for local variables in function 'sendbyte'
                                    366 ;------------------------------------------------------------
                                    367 ;dat                       Allocated with name '_sendbyte_PARM_2'
                                    368 ;address                   Allocated to registers r7 
                                    369 ;i                         Allocated to registers r6 
                                    370 ;------------------------------------------------------------
                                    371 ;	./src/main.c:56: void sendbyte(unsigned char address,unsigned char dat){
                                    372 ;	-----------------------------------------
                                    373 ;	 function sendbyte
                                    374 ;	-----------------------------------------
      000000                        375 _sendbyte:
                           000007   376 	ar7 = 0x07
                           000006   377 	ar6 = 0x06
                           000005   378 	ar5 = 0x05
                           000004   379 	ar4 = 0x04
                           000003   380 	ar3 = 0x03
                           000002   381 	ar2 = 0x02
                           000001   382 	ar1 = 0x01
                           000000   383 	ar0 = 0x00
      000000 AF 82            [24]  384 	mov	r7,dpl
                                    385 ;	./src/main.c:58: for (i=0;i<8;i++)        //get last 8 bits(address)
      000002 7E 00            [12]  386 	mov	r6,#0x00
      000004                        387 00103$:
                                    388 ;	./src/main.c:60: CLK = 0;
                                    389 ;	assignBit
      000004 C2 A0            [12]  390 	clr	_P2_0
                                    391 ;	./src/main.c:61: DOUT = ( address & 0x80);   //get msb and shift left
      000006 EF               [12]  392 	mov	a,r7
      000007 23               [12]  393 	rl	a
      000008 54 01            [12]  394 	anl	a,#0x01
                                    395 ;	assignBit
      00000A 24 FF            [12]  396 	add	a,#0xff
      00000C 92 A2            [24]  397 	mov	_P2_2,c
                                    398 ;	./src/main.c:62: address <<= 1;
      00000E 8F 05            [24]  399 	mov	ar5,r7
      000010 ED               [12]  400 	mov	a,r5
      000011 2D               [12]  401 	add	a,r5
      000012 FF               [12]  402 	mov	r7,a
                                    403 ;	./src/main.c:63: CLK = 1;
                                    404 ;	assignBit
      000013 D2 A0            [12]  405 	setb	_P2_0
                                    406 ;	./src/main.c:58: for (i=0;i<8;i++)        //get last 8 bits(address)
      000015 0E               [12]  407 	inc	r6
      000016 BE 08 00         [24]  408 	cjne	r6,#0x08,00123$
      000019                        409 00123$:
      000019 40 E9            [24]  410 	jc	00103$
                                    411 ;	./src/main.c:65: for (i=0;i<8;i++)      //get first 8 bits(data)
      00001B 7F 00            [12]  412 	mov	r7,#0x00
      00001D                        413 00105$:
                                    414 ;	./src/main.c:67: CLK = 0;
                                    415 ;	assignBit
      00001D C2 A0            [12]  416 	clr	_P2_0
                                    417 ;	./src/main.c:68: DOUT=( dat & 0x80);    //get msb and shit left
      00001F E5*00            [12]  418 	mov	a,_sendbyte_PARM_2
      000021 23               [12]  419 	rl	a
      000022 54 01            [12]  420 	anl	a,#0x01
                                    421 ;	assignBit
      000024 24 FF            [12]  422 	add	a,#0xff
      000026 92 A2            [24]  423 	mov	_P2_2,c
                                    424 ;	./src/main.c:69: dat <<= 1;
      000028 E5*00            [12]  425 	mov	a,_sendbyte_PARM_2
      00002A 25 E0            [12]  426 	add	a,acc
      00002C F5*00            [12]  427 	mov	_sendbyte_PARM_2,a
                                    428 ;	./src/main.c:70: CLK = 1;
                                    429 ;	assignBit
      00002E D2 A0            [12]  430 	setb	_P2_0
                                    431 ;	./src/main.c:65: for (i=0;i<8;i++)      //get first 8 bits(data)
      000030 0F               [12]  432 	inc	r7
      000031 BF 08 00         [24]  433 	cjne	r7,#0x08,00125$
      000034                        434 00125$:
      000034 40 E7            [24]  435 	jc	00105$
                                    436 ;	./src/main.c:72: }
      000036 22               [24]  437 	ret
                                    438 ;------------------------------------------------------------
                                    439 ;Allocation info for local variables in function 'Write7219'
                                    440 ;------------------------------------------------------------
                                    441 ;dat                       Allocated with name '_Write7219_PARM_2'
                                    442 ;address                   Allocated to registers r7 
                                    443 ;cnt                       Allocated to registers r6 
                                    444 ;------------------------------------------------------------
                                    445 ;	./src/main.c:75: void Write7219(unsigned char address, unsigned char dat)
                                    446 ;	-----------------------------------------
                                    447 ;	 function Write7219
                                    448 ;	-----------------------------------------
      000037                        449 _Write7219:
      000037 AF 82            [24]  450 	mov	r7,dpl
                                    451 ;	./src/main.c:78: LOAD = 0;
                                    452 ;	assignBit
      000039 C2 A1            [12]  453 	clr	_P2_1
                                    454 ;	./src/main.c:80: for(cnt=1; cnt<=matrixnum; cnt++)       // send address and data according to the nuber of your matrix
      00003B 7E 01            [12]  455 	mov	r6,#0x01
      00003D                        456 00102$:
                                    457 ;	./src/main.c:82: sendbyte(address, dat);
      00003D 85*60*00         [24]  458 	mov	_sendbyte_PARM_2,_Write7219_PARM_2
      000040 8F 82            [24]  459 	mov	dpl,r7
      000042 C0 07            [24]  460 	push	ar7
      000044 C0 06            [24]  461 	push	ar6
      000046 12r00r00         [24]  462 	lcall	_sendbyte
      000049 D0 06            [24]  463 	pop	ar6
      00004B D0 07            [24]  464 	pop	ar7
                                    465 ;	./src/main.c:80: for(cnt=1; cnt<=matrixnum; cnt++)       // send address and data according to the nuber of your matrix
      00004D 0E               [12]  466 	inc	r6
      00004E EE               [12]  467 	mov	a,r6
      00004F 24 FE            [12]  468 	add	a,#0xff - 0x01
      000051 50 EA            [24]  469 	jnc	00102$
                                    470 ;	./src/main.c:85: LOAD = 1;                               // after the load becomes 1, will the 7-segment display display
                                    471 ;	assignBit
      000053 D2 A1            [12]  472 	setb	_P2_1
                                    473 ;	./src/main.c:86: }
      000055 22               [24]  474 	ret
                                    475 ;------------------------------------------------------------
                                    476 ;Allocation info for local variables in function 'Initial'
                                    477 ;------------------------------------------------------------
                                    478 ;i                         Allocated to registers r7 
                                    479 ;------------------------------------------------------------
                                    480 ;	./src/main.c:89: void Initial(void)
                                    481 ;	-----------------------------------------
                                    482 ;	 function Initial
                                    483 ;	-----------------------------------------
      000056                        484 _Initial:
                                    485 ;	./src/main.c:92: Write7219(SHUT_DOWN,0x01);         //normal mode(0xX1)
      000056 75*60 01         [24]  486 	mov	_Write7219_PARM_2,#0x01
      000059 75 82 0C         [24]  487 	mov	dpl,#0x0c
      00005C 12r00r37         [24]  488 	lcall	_Write7219
                                    489 ;	./src/main.c:93: Write7219(DISPLAY_TEST,0x00);
      00005F 75*60 00         [24]  490 	mov	_Write7219_PARM_2,#0x00
      000062 75 82 0F         [24]  491 	mov	dpl,#0x0f
      000065 12r00r37         [24]  492 	lcall	_Write7219
                                    493 ;	./src/main.c:94: Write7219(DECODE_MODE,0x00);       //select non-decode mode
      000068 75*60 00         [24]  494 	mov	_Write7219_PARM_2,#0x00
      00006B 75 82 09         [24]  495 	mov	dpl,#0x09
      00006E 12r00r37         [24]  496 	lcall	_Write7219
                                    497 ;	./src/main.c:95: Write7219(SCAN_LIMIT,0x07);        //use all 8 LED
      000071 75*60 07         [24]  498 	mov	_Write7219_PARM_2,#0x07
      000074 75 82 0B         [24]  499 	mov	dpl,#0x0b
      000077 12r00r37         [24]  500 	lcall	_Write7219
                                    501 ;	./src/main.c:96: Write7219(INTENSITY,0x00);         //set up intensity
      00007A 75*60 00         [24]  502 	mov	_Write7219_PARM_2,#0x00
      00007D 75 82 0A         [24]  503 	mov	dpl,#0x0a
      000080 12r00r37         [24]  504 	lcall	_Write7219
                                    505 ;	./src/main.c:97: for(i=1;i<=8;i++){
      000083 7F 01            [12]  506 	mov	r7,#0x01
      000085                        507 00102$:
                                    508 ;	./src/main.c:98: Write7219(i,0x00);   //turn off all LED
      000085 75*60 00         [24]  509 	mov	_Write7219_PARM_2,#0x00
      000088 8F 82            [24]  510 	mov	dpl,r7
      00008A C0 07            [24]  511 	push	ar7
      00008C 12r00r37         [24]  512 	lcall	_Write7219
      00008F D0 07            [24]  513 	pop	ar7
                                    514 ;	./src/main.c:97: for(i=1;i<=8;i++){
      000091 0F               [12]  515 	inc	r7
      000092 EF               [12]  516 	mov	a,r7
      000093 24 F7            [12]  517 	add	a,#0xff - 0x08
      000095 50 EE            [24]  518 	jnc	00102$
                                    519 ;	./src/main.c:100: }
      000097 22               [24]  520 	ret
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'draw'
                                    523 ;------------------------------------------------------------
                                    524 ;picture                   Allocated to registers 
                                    525 ;i                         Allocated to registers r7 
                                    526 ;------------------------------------------------------------
                                    527 ;	./src/main.c:103: void draw(unsigned char *picture){
                                    528 ;	-----------------------------------------
                                    529 ;	 function draw
                                    530 ;	-----------------------------------------
      000098                        531 _draw:
                                    532 ;	./src/main.c:108: for(i=1; i<=8; i++) {
      000098 7F 01            [12]  533 	mov	r7,#0x01
      00009A                        534 00102$:
                                    535 ;	./src/main.c:109: Write7219(i, display[i-1]);
      00009A 8F 06            [24]  536 	mov	ar6,r7
      00009C EE               [12]  537 	mov	a,r6
      00009D 14               [12]  538 	dec	a
      00009E 24r54            [12]  539 	add	a,#_display
      0000A0 F9               [12]  540 	mov	r1,a
      0000A1 87*60            [24]  541 	mov	_Write7219_PARM_2,@r1
      0000A3 8F 82            [24]  542 	mov	dpl,r7
      0000A5 C0 07            [24]  543 	push	ar7
      0000A7 12r00r37         [24]  544 	lcall	_Write7219
      0000AA D0 07            [24]  545 	pop	ar7
                                    546 ;	./src/main.c:108: for(i=1; i<=8; i++) {
      0000AC 0F               [12]  547 	inc	r7
      0000AD EF               [12]  548 	mov	a,r7
      0000AE 24 F7            [12]  549 	add	a,#0xff - 0x08
      0000B0 50 E8            [24]  550 	jnc	00102$
                                    551 ;	./src/main.c:111: }
      0000B2 22               [24]  552 	ret
                                    553 ;------------------------------------------------------------
                                    554 ;Allocation info for local variables in function 'scan_row'
                                    555 ;------------------------------------------------------------
                                    556 ;row                       Allocated to registers r6 r7 
                                    557 ;------------------------------------------------------------
                                    558 ;	./src/main.c:113: void scan_row(unsigned int row)
                                    559 ;	-----------------------------------------
                                    560 ;	 function scan_row
                                    561 ;	-----------------------------------------
      0000B3                        562 _scan_row:
      0000B3 AE 82            [24]  563 	mov	r6,dpl
      0000B5 AF 83            [24]  564 	mov	r7,dph
                                    565 ;	./src/main.c:115: switch (row)
      0000B7 C3               [12]  566 	clr	c
      0000B8 74 03            [12]  567 	mov	a,#0x03
      0000BA 9E               [12]  568 	subb	a,r6
      0000BB E4               [12]  569 	clr	a
      0000BC 9F               [12]  570 	subb	a,r7
      0000BD 40 31            [24]  571 	jc	00107$
      0000BF EE               [12]  572 	mov	a,r6
      0000C0 2E               [12]  573 	add	a,r6
                                    574 ;	./src/main.c:117: case 0:
      0000C1 90r00rC5         [24]  575 	mov	dptr,#00114$
      0000C4 73               [24]  576 	jmp	@a+dptr
      0000C5                        577 00114$:
      0000C5 80 06            [24]  578 	sjmp	00101$
      0000C7 80 0D            [24]  579 	sjmp	00102$
      0000C9 80 14            [24]  580 	sjmp	00103$
      0000CB 80 1B            [24]  581 	sjmp	00104$
      0000CD                        582 00101$:
                                    583 ;	./src/main.c:118: OUTPUT1 = 0; // row1 output 0
                                    584 ;	assignBit
      0000CD C2 86            [12]  585 	clr	_P0_6
                                    586 ;	./src/main.c:119: OUTPUT2 = 1; // row2 output 1
                                    587 ;	assignBit
      0000CF D2 85            [12]  588 	setb	_P0_5
                                    589 ;	./src/main.c:120: OUTPUT3 = 1; // row3 output 1
                                    590 ;	assignBit
      0000D1 D2 84            [12]  591 	setb	_P0_4
                                    592 ;	./src/main.c:121: OUTPUT0 = 1; // row0 output 1
                                    593 ;	assignBit
      0000D3 D2 83            [12]  594 	setb	_P0_3
                                    595 ;	./src/main.c:122: break;
                                    596 ;	./src/main.c:123: case 1:
      0000D5 22               [24]  597 	ret
      0000D6                        598 00102$:
                                    599 ;	./src/main.c:124: OUTPUT1 = 1; // row1 output 1
                                    600 ;	assignBit
      0000D6 D2 86            [12]  601 	setb	_P0_6
                                    602 ;	./src/main.c:125: OUTPUT2 = 0; // row2 output 0
                                    603 ;	assignBit
      0000D8 C2 85            [12]  604 	clr	_P0_5
                                    605 ;	./src/main.c:126: OUTPUT3 = 1; // row3 output 1
                                    606 ;	assignBit
      0000DA D2 84            [12]  607 	setb	_P0_4
                                    608 ;	./src/main.c:127: OUTPUT0 = 1; // row0 output 1
                                    609 ;	assignBit
      0000DC D2 83            [12]  610 	setb	_P0_3
                                    611 ;	./src/main.c:128: break;
                                    612 ;	./src/main.c:129: case 2:
      0000DE 22               [24]  613 	ret
      0000DF                        614 00103$:
                                    615 ;	./src/main.c:130: OUTPUT1 = 1; // row1 output 1
                                    616 ;	assignBit
      0000DF D2 86            [12]  617 	setb	_P0_6
                                    618 ;	./src/main.c:131: OUTPUT2 = 1; // row2 output 1
                                    619 ;	assignBit
      0000E1 D2 85            [12]  620 	setb	_P0_5
                                    621 ;	./src/main.c:132: OUTPUT3 = 0; // row3 output 0
                                    622 ;	assignBit
      0000E3 C2 84            [12]  623 	clr	_P0_4
                                    624 ;	./src/main.c:133: OUTPUT0 = 1; // row0 output 1
                                    625 ;	assignBit
      0000E5 D2 83            [12]  626 	setb	_P0_3
                                    627 ;	./src/main.c:134: break;
                                    628 ;	./src/main.c:135: case 3:
      0000E7 22               [24]  629 	ret
      0000E8                        630 00104$:
                                    631 ;	./src/main.c:136: OUTPUT1 = 1; // row1 output 1
                                    632 ;	assignBit
      0000E8 D2 86            [12]  633 	setb	_P0_6
                                    634 ;	./src/main.c:137: OUTPUT2 = 1; // row2 output 1
                                    635 ;	assignBit
      0000EA D2 85            [12]  636 	setb	_P0_5
                                    637 ;	./src/main.c:138: OUTPUT3 = 1; // row3 output 1
                                    638 ;	assignBit
      0000EC D2 84            [12]  639 	setb	_P0_4
                                    640 ;	./src/main.c:139: OUTPUT0 = 0; // row0 output 0
                                    641 ;	assignBit
      0000EE C2 83            [12]  642 	clr	_P0_3
                                    643 ;	./src/main.c:143: }
      0000F0                        644 00107$:
                                    645 ;	./src/main.c:144: }
      0000F0 22               [24]  646 	ret
                                    647 ;------------------------------------------------------------
                                    648 ;Allocation info for local variables in function 'read_curINPUT'
                                    649 ;------------------------------------------------------------
                                    650 ;i                         Allocated to registers r6 r7 
                                    651 ;------------------------------------------------------------
                                    652 ;	./src/main.c:146: void read_curINPUT(void)
                                    653 ;	-----------------------------------------
                                    654 ;	 function read_curINPUT
                                    655 ;	-----------------------------------------
      0000F1                        656 _read_curINPUT:
                                    657 ;	./src/main.c:148: for (int i = 0; i < 4; i++)
      0000F1 7E 00            [12]  658 	mov	r6,#0x00
      0000F3 7F 00            [12]  659 	mov	r7,#0x00
      0000F5                        660 00106$:
      0000F5 C3               [12]  661 	clr	c
      0000F6 EE               [12]  662 	mov	a,r6
      0000F7 94 04            [12]  663 	subb	a,#0x04
      0000F9 EF               [12]  664 	mov	a,r7
      0000FA 64 80            [12]  665 	xrl	a,#0x80
      0000FC 94 80            [12]  666 	subb	a,#0x80
      0000FE 50 6C            [24]  667 	jnc	00104$
                                    668 ;	./src/main.c:150: scan_row(i);
      000100 8E 82            [24]  669 	mov	dpl,r6
      000102 8F 83            [24]  670 	mov	dph,r7
      000104 C0 07            [24]  671 	push	ar7
      000106 C0 06            [24]  672 	push	ar6
      000108 12r00rB3         [24]  673 	lcall	_scan_row
      00010B D0 06            [24]  674 	pop	ar6
      00010D D0 07            [24]  675 	pop	ar7
                                    676 ;	./src/main.c:151: if(i==3)
      00010F BE 03 10         [24]  677 	cjne	r6,#0x03,00102$
      000112 BF 00 0D         [24]  678 	cjne	r7,#0x00,00102$
                                    679 ;	./src/main.c:152: curINPUT[9] = INPUT2;
      000115 A2 81            [12]  680 	mov	c,_P0_1
      000117 E4               [12]  681 	clr	a
      000118 33               [12]  682 	rlc	a
      000119 FC               [12]  683 	mov	r4,a
      00011A 7D 00            [12]  684 	mov	r5,#0x00
      00011C 8C*12            [24]  685 	mov	((_curINPUT + 0x0012) + 0),r4
      00011E 8D*13            [24]  686 	mov	((_curINPUT + 0x0012) + 1),r5
      000120 80 42            [24]  687 	sjmp	00107$
      000122                        688 00102$:
                                    689 ;	./src/main.c:154: curINPUT[i * 3 + 0] = INPUT1;
      000122 8E 05            [24]  690 	mov	ar5,r6
      000124 ED               [12]  691 	mov	a,r5
      000125 75 F0 03         [24]  692 	mov	b,#0x03
      000128 A4               [48]  693 	mul	ab
      000129 FD               [12]  694 	mov	r5,a
      00012A 25 E0            [12]  695 	add	a,acc
      00012C 24r00            [12]  696 	add	a,#_curINPUT
      00012E F9               [12]  697 	mov	r1,a
      00012F A2 80            [12]  698 	mov	c,_P0_0
      000131 E4               [12]  699 	clr	a
      000132 33               [12]  700 	rlc	a
      000133 FB               [12]  701 	mov	r3,a
      000134 7C 00            [12]  702 	mov	r4,#0x00
      000136 A7 03            [24]  703 	mov	@r1,ar3
      000138 09               [12]  704 	inc	r1
      000139 A7 04            [24]  705 	mov	@r1,ar4
      00013B 19               [12]  706 	dec	r1
                                    707 ;	./src/main.c:155: curINPUT[i * 3 + 1] = INPUT2;
      00013C ED               [12]  708 	mov	a,r5
      00013D 04               [12]  709 	inc	a
      00013E 25 E0            [12]  710 	add	a,acc
      000140 24r00            [12]  711 	add	a,#_curINPUT
      000142 F9               [12]  712 	mov	r1,a
      000143 A2 81            [12]  713 	mov	c,_P0_1
      000145 E4               [12]  714 	clr	a
      000146 33               [12]  715 	rlc	a
      000147 FB               [12]  716 	mov	r3,a
      000148 7C 00            [12]  717 	mov	r4,#0x00
      00014A A7 03            [24]  718 	mov	@r1,ar3
      00014C 09               [12]  719 	inc	r1
      00014D A7 04            [24]  720 	mov	@r1,ar4
      00014F 19               [12]  721 	dec	r1
                                    722 ;	./src/main.c:156: curINPUT[i * 3 + 2] = INPUT3;
      000150 0D               [12]  723 	inc	r5
      000151 0D               [12]  724 	inc	r5
      000152 ED               [12]  725 	mov	a,r5
      000153 2D               [12]  726 	add	a,r5
      000154 24r00            [12]  727 	add	a,#_curINPUT
      000156 F9               [12]  728 	mov	r1,a
      000157 A2 82            [12]  729 	mov	c,_P0_2
      000159 E4               [12]  730 	clr	a
      00015A 33               [12]  731 	rlc	a
      00015B FC               [12]  732 	mov	r4,a
      00015C 7D 00            [12]  733 	mov	r5,#0x00
      00015E A7 04            [24]  734 	mov	@r1,ar4
      000160 09               [12]  735 	inc	r1
      000161 A7 05            [24]  736 	mov	@r1,ar5
      000163 19               [12]  737 	dec	r1
      000164                        738 00107$:
                                    739 ;	./src/main.c:148: for (int i = 0; i < 4; i++)
      000164 0E               [12]  740 	inc	r6
      000165 BE 00 01         [24]  741 	cjne	r6,#0x00,00126$
      000168 0F               [12]  742 	inc	r7
      000169                        743 00126$:
      000169 02r00rF5         [24]  744 	ljmp	00106$
      00016C                        745 00104$:
                                    746 ;	./src/main.c:159: curINPUT[10] = but1;
      00016C A2 B2            [12]  747 	mov	c,_INT0
      00016E E4               [12]  748 	clr	a
      00016F 33               [12]  749 	rlc	a
      000170 FE               [12]  750 	mov	r6,a
      000171 7F 00            [12]  751 	mov	r7,#0x00
      000173 8E*14            [24]  752 	mov	((_curINPUT + 0x0014) + 0),r6
      000175 8F*15            [24]  753 	mov	((_curINPUT + 0x0014) + 1),r7
                                    754 ;	./src/main.c:160: curINPUT[11] = but2;
      000177 A2 B3            [12]  755 	mov	c,_INT1
      000179 E4               [12]  756 	clr	a
      00017A 33               [12]  757 	rlc	a
      00017B FE               [12]  758 	mov	r6,a
      00017C 7F 00            [12]  759 	mov	r7,#0x00
      00017E 8E*16            [24]  760 	mov	((_curINPUT + 0x0016) + 0),r6
      000180 8F*17            [24]  761 	mov	((_curINPUT + 0x0016) + 1),r7
                                    762 ;	./src/main.c:161: curINPUT[12] = but3;
      000182 A2 A0            [12]  763 	mov	c,_P2_0
      000184 E4               [12]  764 	clr	a
      000185 33               [12]  765 	rlc	a
      000186 FE               [12]  766 	mov	r6,a
      000187 7F 00            [12]  767 	mov	r7,#0x00
      000189 8E*18            [24]  768 	mov	((_curINPUT + 0x0018) + 0),r6
      00018B 8F*19            [24]  769 	mov	((_curINPUT + 0x0018) + 1),r7
                                    770 ;	./src/main.c:162: curINPUT[13] = but4;
      00018D A2 A1            [12]  771 	mov	c,_P2_1
      00018F E4               [12]  772 	clr	a
      000190 33               [12]  773 	rlc	a
      000191 FE               [12]  774 	mov	r6,a
      000192 7F 00            [12]  775 	mov	r7,#0x00
      000194 8E*1A            [24]  776 	mov	((_curINPUT + 0x001a) + 0),r6
      000196 8F*1B            [24]  777 	mov	((_curINPUT + 0x001a) + 1),r7
                                    778 ;	./src/main.c:163: }
      000198 22               [24]  779 	ret
                                    780 ;------------------------------------------------------------
                                    781 ;Allocation info for local variables in function 'sequence'
                                    782 ;------------------------------------------------------------
                                    783 ;a                         Allocated to registers r6 r7 
                                    784 ;------------------------------------------------------------
                                    785 ;	./src/main.c:165: void sequence(void){
                                    786 ;	-----------------------------------------
                                    787 ;	 function sequence
                                    788 ;	-----------------------------------------
      000199                        789 _sequence:
                                    790 ;	./src/main.c:166: for(int a = 7; a > 0; a--){
      000199 7E 07            [12]  791 	mov	r6,#0x07
      00019B 7F 00            [12]  792 	mov	r7,#0x00
      00019D                        793 00103$:
      00019D C3               [12]  794 	clr	c
      00019E E4               [12]  795 	clr	a
      00019F 9E               [12]  796 	subb	a,r6
      0001A0 74 80            [12]  797 	mov	a,#(0x00 ^ 0x80)
      0001A2 8F F0            [24]  798 	mov	b,r7
      0001A4 63 F0 80         [24]  799 	xrl	b,#0x80
      0001A7 95 F0            [12]  800 	subb	a,b
      0001A9 50 16            [24]  801 	jnc	00101$
                                    802 ;	./src/main.c:167: display[a] = display[a-1];
      0001AB EE               [12]  803 	mov	a,r6
      0001AC 24r54            [12]  804 	add	a,#_display
      0001AE F9               [12]  805 	mov	r1,a
      0001AF 8E 05            [24]  806 	mov	ar5,r6
      0001B1 ED               [12]  807 	mov	a,r5
      0001B2 14               [12]  808 	dec	a
      0001B3 24r54            [12]  809 	add	a,#_display
      0001B5 F8               [12]  810 	mov	r0,a
      0001B6 86 05            [24]  811 	mov	ar5,@r0
      0001B8 A7 05            [24]  812 	mov	@r1,ar5
                                    813 ;	./src/main.c:166: for(int a = 7; a > 0; a--){
      0001BA 1E               [12]  814 	dec	r6
      0001BB BE FF 01         [24]  815 	cjne	r6,#0xff,00117$
      0001BE 1F               [12]  816 	dec	r7
      0001BF                        817 00117$:
      0001BF 80 DC            [24]  818 	sjmp	00103$
      0001C1                        819 00101$:
                                    820 ;	./src/main.c:170: delay_ms(100);
      0001C1 90 00 64         [24]  821 	mov	dptr,#0x0064
                                    822 ;	./src/main.c:171: }
      0001C4 02r00r00         [24]  823 	ljmp	_delay_ms
                                    824 ;------------------------------------------------------------
                                    825 ;Allocation info for local variables in function 'func_call'
                                    826 ;------------------------------------------------------------
                                    827 ;cmd                       Allocated to registers r6 r7 
                                    828 ;a                         Allocated to registers r6 r7 
                                    829 ;------------------------------------------------------------
                                    830 ;	./src/main.c:173: void func_call(unsigned int cmd){
                                    831 ;	-----------------------------------------
                                    832 ;	 function func_call
                                    833 ;	-----------------------------------------
      0001C7                        834 _func_call:
      0001C7 AE 82            [24]  835 	mov	r6,dpl
      0001C9 AF 83            [24]  836 	mov	r7,dph
                                    837 ;	./src/main.c:175: switch (cmd)
      0001CB BE 0A 05         [24]  838 	cjne	r6,#0x0a,00151$
      0001CE BF 00 02         [24]  839 	cjne	r7,#0x00,00151$
      0001D1 80 1A            [24]  840 	sjmp	00101$
      0001D3                        841 00151$:
      0001D3 BE 0B 05         [24]  842 	cjne	r6,#0x0b,00152$
      0001D6 BF 00 02         [24]  843 	cjne	r7,#0x00,00152$
      0001D9 80 32            [24]  844 	sjmp	00107$
      0001DB                        845 00152$:
      0001DB BE 0C 05         [24]  846 	cjne	r6,#0x0c,00153$
      0001DE BF 00 02         [24]  847 	cjne	r7,#0x00,00153$
      0001E1 80 36            [24]  848 	sjmp	00125$
      0001E3                        849 00153$:
      0001E3 BE 0D 06         [24]  850 	cjne	r6,#0x0d,00154$
      0001E6 BF 00 03         [24]  851 	cjne	r7,#0x00,00154$
      0001E9 02r02r5E         [24]  852 	ljmp	00110$
      0001EC                        853 00154$:
      0001EC 22               [24]  854 	ret
                                    855 ;	./src/main.c:177: case 10:	//op
      0001ED                        856 00101$:
                                    857 ;	./src/main.c:178: if(patt == 0x80)
      0001ED 74 80            [12]  858 	mov	a,#0x80
      0001EF B5*5C 05         [24]  859 	cjne	a,_patt,00105$
                                    860 ;	./src/main.c:179: patt = 0x08;
      0001F2 75*5C 08         [24]  861 	mov	_patt,#0x08
      0001F5 80 07            [24]  862 	sjmp	00106$
      0001F7                        863 00105$:
                                    864 ;	./src/main.c:180: else if (patt == 0x00)
      0001F7 E5*5C            [12]  865 	mov	a,_patt
      0001F9 70 03            [24]  866 	jnz	00106$
                                    867 ;	./src/main.c:181: patt = 0x08;
      0001FB 75*5C 08         [24]  868 	mov	_patt,#0x08
      0001FE                        869 00106$:
                                    870 ;	./src/main.c:183: patt = patt << 1;
      0001FE E5*5C            [12]  871 	mov	a,_patt
      000200 25 E0            [12]  872 	add	a,acc
                                    873 ;	./src/main.c:184: led = ~patt;
      000202 F5*5C            [12]  874 	mov	_patt,a
      000204 F4               [12]  875 	cpl	a
      000205 F5 90            [12]  876 	mov	_P1,a
                                    877 ;	./src/main.c:185: delay_ms(20);
      000207 90 00 14         [24]  878 	mov	dptr,#0x0014
                                    879 ;	./src/main.c:186: break;
                                    880 ;	./src/main.c:187: case 11:	//back <-
      00020A 02r00r00         [24]  881 	ljmp	_delay_ms
      00020D                        882 00107$:
                                    883 ;	./src/main.c:188: patt1 = 0x01;
      00020D 75*5D 01         [24]  884 	mov	_patt1,#0x01
                                    885 ;	./src/main.c:189: led = ~patt1;
      000210 75 90 FE         [24]  886 	mov	_P1,#0xfe
                                    887 ;	./src/main.c:190: delay_ms(20);
      000213 90 00 14         [24]  888 	mov	dptr,#0x0014
                                    889 ;	./src/main.c:191: break;
                                    890 ;	./src/main.c:193: for(int a = 0; a < 8; a++){
      000216 02r00r00         [24]  891 	ljmp	_delay_ms
      000219                        892 00125$:
      000219 7E 00            [12]  893 	mov	r6,#0x00
      00021B 7F 00            [12]  894 	mov	r7,#0x00
      00021D                        895 00114$:
      00021D C3               [12]  896 	clr	c
      00021E EE               [12]  897 	mov	a,r6
      00021F 94 08            [12]  898 	subb	a,#0x08
      000221 EF               [12]  899 	mov	a,r7
      000222 64 80            [12]  900 	xrl	a,#0x80
      000224 94 80            [12]  901 	subb	a,#0x80
      000226 50 21            [24]  902 	jnc	00109$
                                    903 ;	./src/main.c:194: display[a] = 0x00;
      000228 EE               [12]  904 	mov	a,r6
      000229 24r54            [12]  905 	add	a,#_display
      00022B F8               [12]  906 	mov	r0,a
      00022C 76 00            [12]  907 	mov	@r0,#0x00
                                    908 ;	./src/main.c:195: Write7219(a+1,0x00);
      00022E 8E 05            [24]  909 	mov	ar5,r6
      000230 ED               [12]  910 	mov	a,r5
      000231 04               [12]  911 	inc	a
      000232 F5 82            [12]  912 	mov	dpl,a
      000234 75*60 00         [24]  913 	mov	_Write7219_PARM_2,#0x00
      000237 C0 07            [24]  914 	push	ar7
      000239 C0 06            [24]  915 	push	ar6
      00023B 12r00r37         [24]  916 	lcall	_Write7219
      00023E D0 06            [24]  917 	pop	ar6
      000240 D0 07            [24]  918 	pop	ar7
                                    919 ;	./src/main.c:193: for(int a = 0; a < 8; a++){
      000242 0E               [12]  920 	inc	r6
      000243 BE 00 D7         [24]  921 	cjne	r6,#0x00,00114$
      000246 0F               [12]  922 	inc	r7
      000247 80 D4            [24]  923 	sjmp	00114$
      000249                        924 00109$:
                                    925 ;	./src/main.c:197: Write7219(0x01,0x08);
      000249 75*60 08         [24]  926 	mov	_Write7219_PARM_2,#0x08
      00024C 75 82 01         [24]  927 	mov	dpl,#0x01
      00024F 12r00r37         [24]  928 	lcall	_Write7219
                                    929 ;	./src/main.c:198: patt1 = 0x02;
      000252 75*5D 02         [24]  930 	mov	_patt1,#0x02
                                    931 ;	./src/main.c:199: led = ~patt1;
      000255 75 90 FD         [24]  932 	mov	_P1,#0xfd
                                    933 ;	./src/main.c:200: delay_ms(20);
      000258 90 00 14         [24]  934 	mov	dptr,#0x0014
                                    935 ;	./src/main.c:201: break;
                                    936 ;	./src/main.c:202: case 13:	//equal=
      00025B 02r00r00         [24]  937 	ljmp	_delay_ms
      00025E                        938 00110$:
                                    939 ;	./src/main.c:203: patt1 = 0x04;
      00025E 75*5D 04         [24]  940 	mov	_patt1,#0x04
                                    941 ;	./src/main.c:204: led = ~patt1;
      000261 75 90 FB         [24]  942 	mov	_P1,#0xfb
                                    943 ;	./src/main.c:205: delay_ms(20);
      000264 90 00 14         [24]  944 	mov	dptr,#0x0014
                                    945 ;	./src/main.c:209: }
                                    946 ;	./src/main.c:210: }
      000267 02r00r00         [24]  947 	ljmp	_delay_ms
                                    948 ;------------------------------------------------------------
                                    949 ;Allocation info for local variables in function 'main'
                                    950 ;------------------------------------------------------------
                                    951 ;i                         Allocated to registers r6 r7 
                                    952 ;i                         Allocated to registers r6 r7 
                                    953 ;------------------------------------------------------------
                                    954 ;	./src/main.c:229: void main(void)
                                    955 ;	-----------------------------------------
                                    956 ;	 function main
                                    957 ;	-----------------------------------------
      00026A                        958 _main:
                                    959 ;	./src/main.c:232: Initial();
      00026A 12r00r56         [24]  960 	lcall	_Initial
                                    961 ;	./src/main.c:233: for (int i = 0; i < 14; i++)
      00026D 7E 00            [12]  962 	mov	r6,#0x00
      00026F 7F 00            [12]  963 	mov	r7,#0x00
      000271                        964 00127$:
      000271 C3               [12]  965 	clr	c
      000272 EE               [12]  966 	mov	a,r6
      000273 94 0E            [12]  967 	subb	a,#0x0e
      000275 EF               [12]  968 	mov	a,r7
      000276 64 80            [12]  969 	xrl	a,#0x80
      000278 94 80            [12]  970 	subb	a,#0x80
      00027A 50 27            [24]  971 	jnc	00101$
                                    972 ;	./src/main.c:235: curINPUT[i] = LEVEL_HIGH;
      00027C EE               [12]  973 	mov	a,r6
      00027D 2E               [12]  974 	add	a,r6
      00027E FC               [12]  975 	mov	r4,a
      00027F EF               [12]  976 	mov	a,r7
      000280 33               [12]  977 	rlc	a
      000281 EC               [12]  978 	mov	a,r4
      000282 24r00            [12]  979 	add	a,#_curINPUT
      000284 F8               [12]  980 	mov	r0,a
      000285 76 01            [12]  981 	mov	@r0,#0x01
      000287 08               [12]  982 	inc	r0
      000288 76 00            [12]  983 	mov	@r0,#0x00
                                    984 ;	./src/main.c:236: state[i] = BTN_RELEASED;
      00028A EC               [12]  985 	mov	a,r4
      00028B 24r1C            [12]  986 	add	a,#_state
      00028D F8               [12]  987 	mov	r0,a
      00028E 76 00            [12]  988 	mov	@r0,#0x00
      000290 08               [12]  989 	inc	r0
      000291 76 00            [12]  990 	mov	@r0,#0x00
                                    991 ;	./src/main.c:237: prestate[i] = BTN_RELEASED;
      000293 EC               [12]  992 	mov	a,r4
      000294 24r38            [12]  993 	add	a,#_prestate
      000296 F8               [12]  994 	mov	r0,a
      000297 76 00            [12]  995 	mov	@r0,#0x00
      000299 08               [12]  996 	inc	r0
      00029A 76 00            [12]  997 	mov	@r0,#0x00
                                    998 ;	./src/main.c:233: for (int i = 0; i < 14; i++)
      00029C 0E               [12]  999 	inc	r6
      00029D BE 00 D1         [24] 1000 	cjne	r6,#0x00,00127$
      0002A0 0F               [12] 1001 	inc	r7
      0002A1 80 CE            [24] 1002 	sjmp	00127$
      0002A3                       1003 00101$:
                                   1004 ;	./src/main.c:239: func_call(12);
      0002A3 90 00 0C         [24] 1005 	mov	dptr,#0x000c
      0002A6 12r01rC7         [24] 1006 	lcall	_func_call
                                   1007 ;	./src/main.c:241: while(1)
      0002A9                       1008 00124$:
                                   1009 ;	./src/main.c:243: delay_ms(20);
      0002A9 90 00 14         [24] 1010 	mov	dptr,#0x0014
      0002AC 12r00r00         [24] 1011 	lcall	_delay_ms
                                   1012 ;	./src/main.c:246: read_curINPUT();
      0002AF 12r00rF1         [24] 1013 	lcall	_read_curINPUT
                                   1014 ;	./src/main.c:247: for (int i = 0; i < 14; i++)
      0002B2 7E 00            [12] 1015 	mov	r6,#0x00
      0002B4 7F 00            [12] 1016 	mov	r7,#0x00
      0002B6                       1017 00130$:
      0002B6 C3               [12] 1018 	clr	c
      0002B7 EE               [12] 1019 	mov	a,r6
      0002B8 94 0E            [12] 1020 	subb	a,#0x0e
      0002BA EF               [12] 1021 	mov	a,r7
      0002BB 64 80            [12] 1022 	xrl	a,#0x80
      0002BD 94 80            [12] 1023 	subb	a,#0x80
      0002BF 50 E8            [24] 1024 	jnc	00124$
                                   1025 ;	./src/main.c:250: switch (state[i])
      0002C1 EE               [12] 1026 	mov	a,r6
      0002C2 2E               [12] 1027 	add	a,r6
      0002C3 FC               [12] 1028 	mov	r4,a
      0002C4 EF               [12] 1029 	mov	a,r7
      0002C5 33               [12] 1030 	rlc	a
      0002C6 FD               [12] 1031 	mov	r5,a
      0002C7 EC               [12] 1032 	mov	a,r4
      0002C8 24r1C            [12] 1033 	add	a,#_state
      0002CA F9               [12] 1034 	mov	r1,a
      0002CB 87 02            [24] 1035 	mov	ar2,@r1
      0002CD 09               [12] 1036 	inc	r1
      0002CE 87 03            [24] 1037 	mov	ar3,@r1
      0002D0 19               [12] 1038 	dec	r1
      0002D1 BA 00 05         [24] 1039 	cjne	r2,#0x00,00194$
      0002D4 BB 00 02         [24] 1040 	cjne	r3,#0x00,00194$
      0002D7 80 10            [24] 1041 	sjmp	00102$
      0002D9                       1042 00194$:
      0002D9 BA 01 05         [24] 1043 	cjne	r2,#0x01,00195$
      0002DC BB 00 02         [24] 1044 	cjne	r3,#0x00,00195$
      0002DF 80 26            [24] 1045 	sjmp	00106$
      0002E1                       1046 00195$:
                                   1047 ;	./src/main.c:252: case BTN_RELEASED:
      0002E1 BA 02 5D         [24] 1048 	cjne	r2,#0x02,00115$
      0002E4 BB 00 5A         [24] 1049 	cjne	r3,#0x00,00115$
      0002E7 80 3C            [24] 1050 	sjmp	00110$
      0002E9                       1051 00102$:
                                   1052 ;	./src/main.c:253: if (curINPUT[i] == LEVEL_LOW)
      0002E9 EC               [12] 1053 	mov	a,r4
      0002EA 24r00            [12] 1054 	add	a,#_curINPUT
      0002EC F8               [12] 1055 	mov	r0,a
      0002ED 86 02            [24] 1056 	mov	ar2,@r0
      0002EF 08               [12] 1057 	inc	r0
      0002F0 86 03            [24] 1058 	mov	ar3,@r0
      0002F2 18               [12] 1059 	dec	r0
      0002F3 EA               [12] 1060 	mov	a,r2
      0002F4 4B               [12] 1061 	orl	a,r3
      0002F5 70 08            [24] 1062 	jnz	00104$
                                   1063 ;	./src/main.c:254: state[i] = BTN_DEBOUNCED;
      0002F7 77 01            [12] 1064 	mov	@r1,#0x01
      0002F9 09               [12] 1065 	inc	r1
      0002FA 77 00            [12] 1066 	mov	@r1,#0x00
      0002FC 19               [12] 1067 	dec	r1
      0002FD 80 42            [24] 1068 	sjmp	00115$
      0002FF                       1069 00104$:
                                   1070 ;	./src/main.c:256: state[i] = BTN_RELEASED;
      0002FF 77 00            [12] 1071 	mov	@r1,#0x00
      000301 09               [12] 1072 	inc	r1
      000302 77 00            [12] 1073 	mov	@r1,#0x00
      000304 19               [12] 1074 	dec	r1
                                   1075 ;	./src/main.c:257: break;
                                   1076 ;	./src/main.c:258: case BTN_DEBOUNCED:
      000305 80 3A            [24] 1077 	sjmp	00115$
      000307                       1078 00106$:
                                   1079 ;	./src/main.c:259: if (curINPUT[i] == LEVEL_LOW)
      000307 EC               [12] 1080 	mov	a,r4
      000308 24r00            [12] 1081 	add	a,#_curINPUT
      00030A F8               [12] 1082 	mov	r0,a
      00030B 86 02            [24] 1083 	mov	ar2,@r0
      00030D 08               [12] 1084 	inc	r0
      00030E 86 03            [24] 1085 	mov	ar3,@r0
      000310 18               [12] 1086 	dec	r0
      000311 EA               [12] 1087 	mov	a,r2
      000312 4B               [12] 1088 	orl	a,r3
      000313 70 08            [24] 1089 	jnz	00108$
                                   1090 ;	./src/main.c:260: state[i] = BTN_PRESSED;
      000315 77 02            [12] 1091 	mov	@r1,#0x02
      000317 09               [12] 1092 	inc	r1
      000318 77 00            [12] 1093 	mov	@r1,#0x00
      00031A 19               [12] 1094 	dec	r1
      00031B 80 24            [24] 1095 	sjmp	00115$
      00031D                       1096 00108$:
                                   1097 ;	./src/main.c:262: state[i] = BTN_RELEASED;
      00031D 77 00            [12] 1098 	mov	@r1,#0x00
      00031F 09               [12] 1099 	inc	r1
      000320 77 00            [12] 1100 	mov	@r1,#0x00
      000322 19               [12] 1101 	dec	r1
                                   1102 ;	./src/main.c:263: break;
                                   1103 ;	./src/main.c:264: case BTN_PRESSED:
      000323 80 1C            [24] 1104 	sjmp	00115$
      000325                       1105 00110$:
                                   1106 ;	./src/main.c:265: if (curINPUT[i] == LEVEL_LOW)
      000325 EC               [12] 1107 	mov	a,r4
      000326 24r00            [12] 1108 	add	a,#_curINPUT
      000328 F8               [12] 1109 	mov	r0,a
      000329 86 04            [24] 1110 	mov	ar4,@r0
      00032B 08               [12] 1111 	inc	r0
      00032C 86 05            [24] 1112 	mov	ar5,@r0
      00032E 18               [12] 1113 	dec	r0
      00032F EC               [12] 1114 	mov	a,r4
      000330 4D               [12] 1115 	orl	a,r5
      000331 70 08            [24] 1116 	jnz	00112$
                                   1117 ;	./src/main.c:266: state[i] = BTN_PRESSED;
      000333 77 02            [12] 1118 	mov	@r1,#0x02
      000335 09               [12] 1119 	inc	r1
      000336 77 00            [12] 1120 	mov	@r1,#0x00
      000338 19               [12] 1121 	dec	r1
      000339 80 06            [24] 1122 	sjmp	00115$
      00033B                       1123 00112$:
                                   1124 ;	./src/main.c:268: state[i] = BTN_RELEASED;
      00033B 77 00            [12] 1125 	mov	@r1,#0x00
      00033D 09               [12] 1126 	inc	r1
      00033E 77 00            [12] 1127 	mov	@r1,#0x00
      000340 19               [12] 1128 	dec	r1
                                   1129 ;	./src/main.c:272: }
      000341                       1130 00115$:
                                   1131 ;	./src/main.c:274: if ((state[i] == BTN_RELEASED) && (prestate[i] == BTN_PRESSED)){
      000341 EE               [12] 1132 	mov	a,r6
      000342 2E               [12] 1133 	add	a,r6
      000343 FC               [12] 1134 	mov	r4,a
      000344 EF               [12] 1135 	mov	a,r7
      000345 33               [12] 1136 	rlc	a
      000346 FD               [12] 1137 	mov	r5,a
      000347 EC               [12] 1138 	mov	a,r4
      000348 24r1C            [12] 1139 	add	a,#_state
      00034A F9               [12] 1140 	mov	r1,a
      00034B 87 02            [24] 1141 	mov	ar2,@r1
      00034D 09               [12] 1142 	inc	r1
      00034E 87 03            [24] 1143 	mov	ar3,@r1
      000350 19               [12] 1144 	dec	r1
      000351 EA               [12] 1145 	mov	a,r2
      000352 4B               [12] 1146 	orl	a,r3
      000353 70 50            [24] 1147 	jnz	00120$
      000355 EC               [12] 1148 	mov	a,r4
      000356 24r38            [12] 1149 	add	a,#_prestate
      000358 F9               [12] 1150 	mov	r1,a
      000359 87 04            [24] 1151 	mov	ar4,@r1
      00035B 09               [12] 1152 	inc	r1
      00035C 87 05            [24] 1153 	mov	ar5,@r1
      00035E 19               [12] 1154 	dec	r1
      00035F BC 02 43         [24] 1155 	cjne	r4,#0x02,00120$
      000362 BD 00 40         [24] 1156 	cjne	r5,#0x00,00120$
                                   1157 ;	./src/main.c:276: if (i < 10){
      000365 C3               [12] 1158 	clr	c
      000366 EE               [12] 1159 	mov	a,r6
      000367 94 0A            [12] 1160 	subb	a,#0x0a
      000369 EF               [12] 1161 	mov	a,r7
      00036A 64 80            [12] 1162 	xrl	a,#0x80
      00036C 94 80            [12] 1163 	subb	a,#0x80
      00036E 50 26            [24] 1164 	jnc	00117$
                                   1165 ;	./src/main.c:277: sequence();
      000370 C0 07            [24] 1166 	push	ar7
      000372 C0 06            [24] 1167 	push	ar6
      000374 12r01r99         [24] 1168 	lcall	_sequence
      000377 D0 06            [24] 1169 	pop	ar6
      000379 D0 07            [24] 1170 	pop	ar7
                                   1171 ;	./src/main.c:278: display[0] = display_seg[i];
      00037B EE               [12] 1172 	mov	a,r6
      00037C 24r61            [12] 1173 	add	a,#_display_seg
      00037E F9               [12] 1174 	mov	r1,a
      00037F 87 05            [24] 1175 	mov	ar5,@r1
      000381 8D*54            [24] 1176 	mov	_display,r5
                                   1177 ;	./src/main.c:279: draw(display);
      000383 90r00r54         [24] 1178 	mov	dptr,#_display
      000386 75 F0 40         [24] 1179 	mov	b,#0x40
      000389 C0 07            [24] 1180 	push	ar7
      00038B C0 06            [24] 1181 	push	ar6
      00038D 12r00r98         [24] 1182 	lcall	_draw
      000390 D0 06            [24] 1183 	pop	ar6
      000392 D0 07            [24] 1184 	pop	ar7
      000394 80 0F            [24] 1185 	sjmp	00120$
      000396                       1186 00117$:
                                   1187 ;	./src/main.c:281: func_call(i);
      000396 8E 82            [24] 1188 	mov	dpl,r6
      000398 8F 83            [24] 1189 	mov	dph,r7
      00039A C0 07            [24] 1190 	push	ar7
      00039C C0 06            [24] 1191 	push	ar6
      00039E 12r01rC7         [24] 1192 	lcall	_func_call
      0003A1 D0 06            [24] 1193 	pop	ar6
      0003A3 D0 07            [24] 1194 	pop	ar7
      0003A5                       1195 00120$:
                                   1196 ;	./src/main.c:284: prestate[i] = state[i];
      0003A5 EE               [12] 1197 	mov	a,r6
      0003A6 2E               [12] 1198 	add	a,r6
      0003A7 FC               [12] 1199 	mov	r4,a
      0003A8 EF               [12] 1200 	mov	a,r7
      0003A9 33               [12] 1201 	rlc	a
      0003AA EC               [12] 1202 	mov	a,r4
      0003AB 24r38            [12] 1203 	add	a,#_prestate
      0003AD F9               [12] 1204 	mov	r1,a
      0003AE EC               [12] 1205 	mov	a,r4
      0003AF 24r1C            [12] 1206 	add	a,#_state
      0003B1 F8               [12] 1207 	mov	r0,a
      0003B2 86 04            [24] 1208 	mov	ar4,@r0
      0003B4 08               [12] 1209 	inc	r0
      0003B5 86 05            [24] 1210 	mov	ar5,@r0
      0003B7 18               [12] 1211 	dec	r0
      0003B8 A7 04            [24] 1212 	mov	@r1,ar4
      0003BA 09               [12] 1213 	inc	r1
      0003BB A7 05            [24] 1214 	mov	@r1,ar5
      0003BD 19               [12] 1215 	dec	r1
                                   1216 ;	./src/main.c:247: for (int i = 0; i < 14; i++)
      0003BE 0E               [12] 1217 	inc	r6
      0003BF BE 00 01         [24] 1218 	cjne	r6,#0x00,00204$
      0003C2 0F               [12] 1219 	inc	r7
      0003C3                       1220 00204$:
                                   1221 ;	./src/main.c:287: }
      0003C3 02r02rB6         [24] 1222 	ljmp	00130$
                                   1223 	.area CSEG    (CODE)
                                   1224 	.area CONST   (CODE)
                                   1225 	.area XINIT   (CODE)
                                   1226 	.area CABS    (ABS,CODE)
