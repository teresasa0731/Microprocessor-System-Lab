                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sendbyte_PARM_2
                                     12 	.globl _main
                                     13 	.globl _func_call
                                     14 	.globl _sequence
                                     15 	.globl _read_curINPUT
                                     16 	.globl _delay_ms
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _display_seg
                                    114 	.globl _Write7219_PARM_2
                                    115 	.globl _op_cnt
                                    116 	.globl _patt1
                                    117 	.globl _patt
                                    118 	.globl _display
                                    119 	.globl _prestate
                                    120 	.globl _state
                                    121 	.globl _curINPUT
                                    122 	.globl _sendbyte
                                    123 	.globl _Write7219
                                    124 	.globl _Initial
                                    125 	.globl _draw
                                    126 	.globl _scan_row
                                    127 ;--------------------------------------------------------
                                    128 ; special function registers
                                    129 ;--------------------------------------------------------
                                    130 	.area RSEG    (ABS,DATA)
      000000                        131 	.org 0x0000
                           000080   132 _P0	=	0x0080
                           000081   133 _SP	=	0x0081
                           000082   134 _DPL	=	0x0082
                           000083   135 _DPH	=	0x0083
                           000087   136 _PCON	=	0x0087
                           000088   137 _TCON	=	0x0088
                           000089   138 _TMOD	=	0x0089
                           00008A   139 _TL0	=	0x008a
                           00008B   140 _TL1	=	0x008b
                           00008C   141 _TH0	=	0x008c
                           00008D   142 _TH1	=	0x008d
                           000090   143 _P1	=	0x0090
                           000098   144 _SCON	=	0x0098
                           000099   145 _SBUF	=	0x0099
                           0000A0   146 _P2	=	0x00a0
                           0000A8   147 _IE	=	0x00a8
                           0000B0   148 _P3	=	0x00b0
                           0000B8   149 _IP	=	0x00b8
                           0000D0   150 _PSW	=	0x00d0
                           0000E0   151 _ACC	=	0x00e0
                           0000F0   152 _B	=	0x00f0
                                    153 ;--------------------------------------------------------
                                    154 ; special function bits
                                    155 ;--------------------------------------------------------
                                    156 	.area RSEG    (ABS,DATA)
      000000                        157 	.org 0x0000
                           000080   158 _P0_0	=	0x0080
                           000081   159 _P0_1	=	0x0081
                           000082   160 _P0_2	=	0x0082
                           000083   161 _P0_3	=	0x0083
                           000084   162 _P0_4	=	0x0084
                           000085   163 _P0_5	=	0x0085
                           000086   164 _P0_6	=	0x0086
                           000087   165 _P0_7	=	0x0087
                           000088   166 _IT0	=	0x0088
                           000089   167 _IE0	=	0x0089
                           00008A   168 _IT1	=	0x008a
                           00008B   169 _IE1	=	0x008b
                           00008C   170 _TR0	=	0x008c
                           00008D   171 _TF0	=	0x008d
                           00008E   172 _TR1	=	0x008e
                           00008F   173 _TF1	=	0x008f
                           000090   174 _P1_0	=	0x0090
                           000091   175 _P1_1	=	0x0091
                           000092   176 _P1_2	=	0x0092
                           000093   177 _P1_3	=	0x0093
                           000094   178 _P1_4	=	0x0094
                           000095   179 _P1_5	=	0x0095
                           000096   180 _P1_6	=	0x0096
                           000097   181 _P1_7	=	0x0097
                           000098   182 _RI	=	0x0098
                           000099   183 _TI	=	0x0099
                           00009A   184 _RB8	=	0x009a
                           00009B   185 _TB8	=	0x009b
                           00009C   186 _REN	=	0x009c
                           00009D   187 _SM2	=	0x009d
                           00009E   188 _SM1	=	0x009e
                           00009F   189 _SM0	=	0x009f
                           0000A0   190 _P2_0	=	0x00a0
                           0000A1   191 _P2_1	=	0x00a1
                           0000A2   192 _P2_2	=	0x00a2
                           0000A3   193 _P2_3	=	0x00a3
                           0000A4   194 _P2_4	=	0x00a4
                           0000A5   195 _P2_5	=	0x00a5
                           0000A6   196 _P2_6	=	0x00a6
                           0000A7   197 _P2_7	=	0x00a7
                           0000A8   198 _EX0	=	0x00a8
                           0000A9   199 _ET0	=	0x00a9
                           0000AA   200 _EX1	=	0x00aa
                           0000AB   201 _ET1	=	0x00ab
                           0000AC   202 _ES	=	0x00ac
                           0000AF   203 _EA	=	0x00af
                           0000B0   204 _P3_0	=	0x00b0
                           0000B1   205 _P3_1	=	0x00b1
                           0000B2   206 _P3_2	=	0x00b2
                           0000B3   207 _P3_3	=	0x00b3
                           0000B4   208 _P3_4	=	0x00b4
                           0000B5   209 _P3_5	=	0x00b5
                           0000B6   210 _P3_6	=	0x00b6
                           0000B7   211 _P3_7	=	0x00b7
                           0000B0   212 _RXD	=	0x00b0
                           0000B1   213 _TXD	=	0x00b1
                           0000B2   214 _INT0	=	0x00b2
                           0000B3   215 _INT1	=	0x00b3
                           0000B4   216 _T0	=	0x00b4
                           0000B5   217 _T1	=	0x00b5
                           0000B6   218 _WR	=	0x00b6
                           0000B7   219 _RD	=	0x00b7
                           0000B8   220 _PX0	=	0x00b8
                           0000B9   221 _PT0	=	0x00b9
                           0000BA   222 _PX1	=	0x00ba
                           0000BB   223 _PT1	=	0x00bb
                           0000BC   224 _PS	=	0x00bc
                           0000D0   225 _P	=	0x00d0
                           0000D1   226 _F1	=	0x00d1
                           0000D2   227 _OV	=	0x00d2
                           0000D3   228 _RS0	=	0x00d3
                           0000D4   229 _RS1	=	0x00d4
                           0000D5   230 _F0	=	0x00d5
                           0000D6   231 _AC	=	0x00d6
                           0000D7   232 _CY	=	0x00d7
                                    233 ;--------------------------------------------------------
                                    234 ; overlayable register banks
                                    235 ;--------------------------------------------------------
                                    236 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        237 	.ds 8
                                    238 ;--------------------------------------------------------
                                    239 ; internal ram data
                                    240 ;--------------------------------------------------------
                                    241 	.area DSEG    (DATA)
      000000                        242 _curINPUT::
      000000                        243 	.ds 28
      00001C                        244 _state::
      00001C                        245 	.ds 28
      000038                        246 _prestate::
      000038                        247 	.ds 28
      000054                        248 _display::
      000054                        249 	.ds 8
      00005C                        250 _patt::
      00005C                        251 	.ds 1
      00005D                        252 _patt1::
      00005D                        253 	.ds 1
      00005E                        254 _op_cnt::
      00005E                        255 	.ds 2
      000060                        256 _Write7219_PARM_2:
      000060                        257 	.ds 1
      000061                        258 _draw_picture_65536_22:
      000061                        259 	.ds 3
      000064                        260 _display_seg::
      000064                        261 	.ds 11
                                    262 ;--------------------------------------------------------
                                    263 ; overlayable items in internal ram
                                    264 ;--------------------------------------------------------
                                    265 	.area	OSEG    (OVR,DATA)
      000000                        266 _sendbyte_PARM_2:
      000000                        267 	.ds 1
                                    268 	.area	OSEG    (OVR,DATA)
                                    269 	.area	OSEG    (OVR,DATA)
                                    270 ;--------------------------------------------------------
                                    271 ; Stack segment in internal ram
                                    272 ;--------------------------------------------------------
                                    273 	.area SSEG
      000000                        274 __start__stack:
      000000                        275 	.ds	1
                                    276 
                                    277 ;--------------------------------------------------------
                                    278 ; indirectly addressable internal ram data
                                    279 ;--------------------------------------------------------
                                    280 	.area ISEG    (DATA)
                                    281 ;--------------------------------------------------------
                                    282 ; absolute internal ram data
                                    283 ;--------------------------------------------------------
                                    284 	.area IABS    (ABS,DATA)
                                    285 	.area IABS    (ABS,DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; bit data
                                    288 ;--------------------------------------------------------
                                    289 	.area BSEG    (BIT)
                                    290 ;--------------------------------------------------------
                                    291 ; paged external ram data
                                    292 ;--------------------------------------------------------
                                    293 	.area PSEG    (PAG,XDATA)
                                    294 ;--------------------------------------------------------
                                    295 ; uninitialized external ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area XSEG    (XDATA)
                                    298 ;--------------------------------------------------------
                                    299 ; absolute external ram data
                                    300 ;--------------------------------------------------------
                                    301 	.area XABS    (ABS,XDATA)
                                    302 ;--------------------------------------------------------
                                    303 ; initialized external ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area XISEG   (XDATA)
                                    306 	.area HOME    (CODE)
                                    307 	.area GSINIT0 (CODE)
                                    308 	.area GSINIT1 (CODE)
                                    309 	.area GSINIT2 (CODE)
                                    310 	.area GSINIT3 (CODE)
                                    311 	.area GSINIT4 (CODE)
                                    312 	.area GSINIT5 (CODE)
                                    313 	.area GSINIT  (CODE)
                                    314 	.area GSFINAL (CODE)
                                    315 	.area CSEG    (CODE)
                                    316 ;--------------------------------------------------------
                                    317 ; interrupt vector
                                    318 ;--------------------------------------------------------
                                    319 	.area HOME    (CODE)
      000000                        320 __interrupt_vect:
      000000 02r00r00         [24]  321 	ljmp	__sdcc_gsinit_startup
                                    322 ;--------------------------------------------------------
                                    323 ; global & static initialisations
                                    324 ;--------------------------------------------------------
                                    325 	.area HOME    (CODE)
                                    326 	.area GSINIT  (CODE)
                                    327 	.area GSFINAL (CODE)
                                    328 	.area GSINIT  (CODE)
                                    329 	.globl __sdcc_gsinit_startup
                                    330 	.globl __sdcc_program_startup
                                    331 	.globl __start__stack
                                    332 	.globl __mcs51_genXINIT
                                    333 	.globl __mcs51_genXRAMCLEAR
                                    334 	.globl __mcs51_genRAMCLEAR
                                    335 ;	./src/main.c:52: unsigned char patt = 0x08,patt1; // led value
      000000 75*5C 08         [24]  336 	mov	_patt,#0x08
                                    337 ;	./src/main.c:53: unsigned int op_cnt = 0;
      000003 E4               [12]  338 	clr	a
      000004 F5*5E            [12]  339 	mov	_op_cnt,a
      000006 F5*5F            [12]  340 	mov	(_op_cnt + 1),a
                                    341 ;	./src/main.c:224: unsigned char display_seg[] = {
      000008 75*64 30         [24]  342 	mov	_display_seg,#0x30
      00000B 75*65 6D         [24]  343 	mov	(_display_seg + 0x0001),#0x6d
      00000E 75*66 79         [24]  344 	mov	(_display_seg + 0x0002),#0x79
      000011 75*67 33         [24]  345 	mov	(_display_seg + 0x0003),#0x33
      000014 75*68 5B         [24]  346 	mov	(_display_seg + 0x0004),#0x5b
      000017 75*69 5F         [24]  347 	mov	(_display_seg + 0x0005),#0x5f
      00001A 75*6A 70         [24]  348 	mov	(_display_seg + 0x0006),#0x70
      00001D 75*6B 7F         [24]  349 	mov	(_display_seg + 0x0007),#0x7f
      000020 75*6C 7B         [24]  350 	mov	(_display_seg + 0x0008),#0x7b
      000023 75*6D 7E         [24]  351 	mov	(_display_seg + 0x0009),#0x7e
      000026 75*6E 4F         [24]  352 	mov	(_display_seg + 0x000a),#0x4f
                                    353 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  354 	ljmp	__sdcc_program_startup
                                    355 ;--------------------------------------------------------
                                    356 ; Home
                                    357 ;--------------------------------------------------------
                                    358 	.area HOME    (CODE)
                                    359 	.area HOME    (CODE)
      000003                        360 __sdcc_program_startup:
      000003 02r02rCE         [24]  361 	ljmp	_main
                                    362 ;	return from main will return to caller
                                    363 ;--------------------------------------------------------
                                    364 ; code
                                    365 ;--------------------------------------------------------
                                    366 	.area CSEG    (CODE)
                                    367 ;------------------------------------------------------------
                                    368 ;Allocation info for local variables in function 'sendbyte'
                                    369 ;------------------------------------------------------------
                                    370 ;dat                       Allocated with name '_sendbyte_PARM_2'
                                    371 ;address                   Allocated to registers r7 
                                    372 ;i                         Allocated to registers r6 
                                    373 ;------------------------------------------------------------
                                    374 ;	./src/main.c:56: void sendbyte(unsigned char address,unsigned char dat){
                                    375 ;	-----------------------------------------
                                    376 ;	 function sendbyte
                                    377 ;	-----------------------------------------
      000000                        378 _sendbyte:
                           000007   379 	ar7 = 0x07
                           000006   380 	ar6 = 0x06
                           000005   381 	ar5 = 0x05
                           000004   382 	ar4 = 0x04
                           000003   383 	ar3 = 0x03
                           000002   384 	ar2 = 0x02
                           000001   385 	ar1 = 0x01
                           000000   386 	ar0 = 0x00
      000000 AF 82            [24]  387 	mov	r7,dpl
                                    388 ;	./src/main.c:58: for (i=0;i<8;i++)        //get last 8 bits(address)
      000002 7E 00            [12]  389 	mov	r6,#0x00
      000004                        390 00103$:
                                    391 ;	./src/main.c:60: CLK = 0;
                                    392 ;	assignBit
      000004 C2 A0            [12]  393 	clr	_P2_0
                                    394 ;	./src/main.c:61: DOUT = ( address & 0x80);   //get msb and shift left
      000006 EF               [12]  395 	mov	a,r7
      000007 23               [12]  396 	rl	a
      000008 54 01            [12]  397 	anl	a,#0x01
                                    398 ;	assignBit
      00000A 24 FF            [12]  399 	add	a,#0xff
      00000C 92 A2            [24]  400 	mov	_P2_2,c
                                    401 ;	./src/main.c:62: address <<= 1;
      00000E 8F 05            [24]  402 	mov	ar5,r7
      000010 ED               [12]  403 	mov	a,r5
      000011 2D               [12]  404 	add	a,r5
      000012 FF               [12]  405 	mov	r7,a
                                    406 ;	./src/main.c:63: CLK = 1;
                                    407 ;	assignBit
      000013 D2 A0            [12]  408 	setb	_P2_0
                                    409 ;	./src/main.c:58: for (i=0;i<8;i++)        //get last 8 bits(address)
      000015 0E               [12]  410 	inc	r6
      000016 BE 08 00         [24]  411 	cjne	r6,#0x08,00123$
      000019                        412 00123$:
      000019 40 E9            [24]  413 	jc	00103$
                                    414 ;	./src/main.c:65: for (i=0;i<8;i++)      //get first 8 bits(data)
      00001B 7F 00            [12]  415 	mov	r7,#0x00
      00001D                        416 00105$:
                                    417 ;	./src/main.c:67: CLK = 0;
                                    418 ;	assignBit
      00001D C2 A0            [12]  419 	clr	_P2_0
                                    420 ;	./src/main.c:68: DOUT=( dat & 0x80);    //get msb and shit left
      00001F E5*00            [12]  421 	mov	a,_sendbyte_PARM_2
      000021 23               [12]  422 	rl	a
      000022 54 01            [12]  423 	anl	a,#0x01
                                    424 ;	assignBit
      000024 24 FF            [12]  425 	add	a,#0xff
      000026 92 A2            [24]  426 	mov	_P2_2,c
                                    427 ;	./src/main.c:69: dat <<= 1;
      000028 E5*00            [12]  428 	mov	a,_sendbyte_PARM_2
      00002A 25 E0            [12]  429 	add	a,acc
      00002C F5*00            [12]  430 	mov	_sendbyte_PARM_2,a
                                    431 ;	./src/main.c:70: CLK = 1;
                                    432 ;	assignBit
      00002E D2 A0            [12]  433 	setb	_P2_0
                                    434 ;	./src/main.c:65: for (i=0;i<8;i++)      //get first 8 bits(data)
      000030 0F               [12]  435 	inc	r7
      000031 BF 08 00         [24]  436 	cjne	r7,#0x08,00125$
      000034                        437 00125$:
      000034 40 E7            [24]  438 	jc	00105$
                                    439 ;	./src/main.c:72: }
      000036 22               [24]  440 	ret
                                    441 ;------------------------------------------------------------
                                    442 ;Allocation info for local variables in function 'Write7219'
                                    443 ;------------------------------------------------------------
                                    444 ;dat                       Allocated with name '_Write7219_PARM_2'
                                    445 ;address                   Allocated to registers r7 
                                    446 ;cnt                       Allocated to registers r6 
                                    447 ;------------------------------------------------------------
                                    448 ;	./src/main.c:75: void Write7219(unsigned char address, unsigned char dat)
                                    449 ;	-----------------------------------------
                                    450 ;	 function Write7219
                                    451 ;	-----------------------------------------
      000037                        452 _Write7219:
      000037 AF 82            [24]  453 	mov	r7,dpl
                                    454 ;	./src/main.c:78: LOAD = 0;
                                    455 ;	assignBit
      000039 C2 A1            [12]  456 	clr	_P2_1
                                    457 ;	./src/main.c:80: for(cnt=1; cnt<=matrixnum; cnt++)       // send address and data according to the nuber of your matrix
      00003B 7E 01            [12]  458 	mov	r6,#0x01
      00003D                        459 00102$:
                                    460 ;	./src/main.c:82: sendbyte(address, dat);
      00003D 85*60*00         [24]  461 	mov	_sendbyte_PARM_2,_Write7219_PARM_2
      000040 8F 82            [24]  462 	mov	dpl,r7
      000042 C0 07            [24]  463 	push	ar7
      000044 C0 06            [24]  464 	push	ar6
      000046 12r00r00         [24]  465 	lcall	_sendbyte
      000049 D0 06            [24]  466 	pop	ar6
      00004B D0 07            [24]  467 	pop	ar7
                                    468 ;	./src/main.c:80: for(cnt=1; cnt<=matrixnum; cnt++)       // send address and data according to the nuber of your matrix
      00004D 0E               [12]  469 	inc	r6
      00004E EE               [12]  470 	mov	a,r6
      00004F 24 FE            [12]  471 	add	a,#0xff - 0x01
      000051 50 EA            [24]  472 	jnc	00102$
                                    473 ;	./src/main.c:85: LOAD = 1;                               // after the load becomes 1, will the 7-segment display display
                                    474 ;	assignBit
      000053 D2 A1            [12]  475 	setb	_P2_1
                                    476 ;	./src/main.c:86: }
      000055 22               [24]  477 	ret
                                    478 ;------------------------------------------------------------
                                    479 ;Allocation info for local variables in function 'Initial'
                                    480 ;------------------------------------------------------------
                                    481 ;i                         Allocated to registers r7 
                                    482 ;------------------------------------------------------------
                                    483 ;	./src/main.c:89: void Initial(void)
                                    484 ;	-----------------------------------------
                                    485 ;	 function Initial
                                    486 ;	-----------------------------------------
      000056                        487 _Initial:
                                    488 ;	./src/main.c:92: Write7219(SHUT_DOWN,0x01);         //normal mode(0xX1)
      000056 75*60 01         [24]  489 	mov	_Write7219_PARM_2,#0x01
      000059 75 82 0C         [24]  490 	mov	dpl,#0x0c
      00005C 12r00r37         [24]  491 	lcall	_Write7219
                                    492 ;	./src/main.c:93: Write7219(DISPLAY_TEST,0x00);
      00005F 75*60 00         [24]  493 	mov	_Write7219_PARM_2,#0x00
      000062 75 82 0F         [24]  494 	mov	dpl,#0x0f
      000065 12r00r37         [24]  495 	lcall	_Write7219
                                    496 ;	./src/main.c:94: Write7219(DECODE_MODE,0x00);       //select non-decode mode
      000068 75*60 00         [24]  497 	mov	_Write7219_PARM_2,#0x00
      00006B 75 82 09         [24]  498 	mov	dpl,#0x09
      00006E 12r00r37         [24]  499 	lcall	_Write7219
                                    500 ;	./src/main.c:95: Write7219(SCAN_LIMIT,0x07);        //use all 8 LED
      000071 75*60 07         [24]  501 	mov	_Write7219_PARM_2,#0x07
      000074 75 82 0B         [24]  502 	mov	dpl,#0x0b
      000077 12r00r37         [24]  503 	lcall	_Write7219
                                    504 ;	./src/main.c:96: Write7219(INTENSITY,0x00);         //set up intensity
      00007A 75*60 00         [24]  505 	mov	_Write7219_PARM_2,#0x00
      00007D 75 82 0A         [24]  506 	mov	dpl,#0x0a
      000080 12r00r37         [24]  507 	lcall	_Write7219
                                    508 ;	./src/main.c:97: for(i=1;i<=8;i++){
      000083 7F 01            [12]  509 	mov	r7,#0x01
      000085                        510 00102$:
                                    511 ;	./src/main.c:98: Write7219(i,0x00);   //turn off all LED
      000085 75*60 00         [24]  512 	mov	_Write7219_PARM_2,#0x00
      000088 8F 82            [24]  513 	mov	dpl,r7
      00008A C0 07            [24]  514 	push	ar7
      00008C 12r00r37         [24]  515 	lcall	_Write7219
      00008F D0 07            [24]  516 	pop	ar7
                                    517 ;	./src/main.c:97: for(i=1;i<=8;i++){
      000091 0F               [12]  518 	inc	r7
      000092 EF               [12]  519 	mov	a,r7
      000093 24 F7            [12]  520 	add	a,#0xff - 0x08
      000095 50 EE            [24]  521 	jnc	00102$
                                    522 ;	./src/main.c:100: }
      000097 22               [24]  523 	ret
                                    524 ;------------------------------------------------------------
                                    525 ;Allocation info for local variables in function 'draw'
                                    526 ;------------------------------------------------------------
                                    527 ;picture                   Allocated with name '_draw_picture_65536_22'
                                    528 ;value                     Allocated to registers r7 
                                    529 ;i                         Allocated to registers r4 
                                    530 ;------------------------------------------------------------
                                    531 ;	./src/main.c:103: void draw(unsigned char *picture){
                                    532 ;	-----------------------------------------
                                    533 ;	 function draw
                                    534 ;	-----------------------------------------
      000098                        535 _draw:
      000098 85 82*61         [24]  536 	mov	_draw_picture_65536_22,dpl
      00009B 85 83*62         [24]  537 	mov	(_draw_picture_65536_22 + 1),dph
      00009E 85 F0*63         [24]  538 	mov	(_draw_picture_65536_22 + 2),b
                                    539 ;	./src/main.c:107: for(i=1; i<=8; i++) {
      0000A1 7C 01            [12]  540 	mov	r4,#0x01
      0000A3                        541 00105$:
                                    542 ;	./src/main.c:108: value = *(picture+i-1);
      0000A3 EC               [12]  543 	mov	a,r4
      0000A4 25*61            [12]  544 	add	a,_draw_picture_65536_22
      0000A6 FA               [12]  545 	mov	r2,a
      0000A7 E4               [12]  546 	clr	a
      0000A8 35*62            [12]  547 	addc	a,(_draw_picture_65536_22 + 1)
      0000AA FB               [12]  548 	mov	r3,a
      0000AB AF*63            [24]  549 	mov	r7,(_draw_picture_65536_22 + 2)
      0000AD 1A               [12]  550 	dec	r2
      0000AE BA FF 01         [24]  551 	cjne	r2,#0xff,00118$
      0000B1 1B               [12]  552 	dec	r3
      0000B2                        553 00118$:
      0000B2 8A 82            [24]  554 	mov	dpl,r2
      0000B4 8B 83            [24]  555 	mov	dph,r3
      0000B6 8F F0            [24]  556 	mov	b,r7
      0000B8 12r00r00         [24]  557 	lcall	__gptrget
      0000BB FF               [12]  558 	mov	r7,a
                                    559 ;	./src/main.c:109: if(value == display[i-1]){
      0000BC 8C 06            [24]  560 	mov	ar6,r4
      0000BE EE               [12]  561 	mov	a,r6
      0000BF 14               [12]  562 	dec	a
      0000C0 24r54            [12]  563 	add	a,#_display
      0000C2 F9               [12]  564 	mov	r1,a
      0000C3 87 06            [24]  565 	mov	ar6,@r1
      0000C5 EF               [12]  566 	mov	a,r7
      0000C6 B5 06 16         [24]  567 	cjne	a,ar6,00102$
                                    568 ;	./src/main.c:110: patt = 0x80;
      0000C9 75*5C 80         [24]  569 	mov	_patt,#0x80
                                    570 ;	./src/main.c:111: led = ~patt;
      0000CC 75 90 7F         [24]  571 	mov	_P1,#0x7f
                                    572 ;	./src/main.c:112: delay_ms(20);
      0000CF 90 00 14         [24]  573 	mov	dptr,#0x0014
      0000D2 C0 07            [24]  574 	push	ar7
      0000D4 C0 04            [24]  575 	push	ar4
      0000D6 12r00r00         [24]  576 	lcall	_delay_ms
      0000D9 D0 04            [24]  577 	pop	ar4
      0000DB D0 07            [24]  578 	pop	ar7
      0000DD 80 14            [24]  579 	sjmp	00103$
      0000DF                        580 00102$:
                                    581 ;	./src/main.c:114: patt = 0x08;
      0000DF 75*5C 08         [24]  582 	mov	_patt,#0x08
                                    583 ;	./src/main.c:115: led = ~patt;
      0000E2 75 90 F7         [24]  584 	mov	_P1,#0xf7
                                    585 ;	./src/main.c:116: delay_ms(20);
      0000E5 90 00 14         [24]  586 	mov	dptr,#0x0014
      0000E8 C0 07            [24]  587 	push	ar7
      0000EA C0 04            [24]  588 	push	ar4
      0000EC 12r00r00         [24]  589 	lcall	_delay_ms
      0000EF D0 04            [24]  590 	pop	ar4
      0000F1 D0 07            [24]  591 	pop	ar7
      0000F3                        592 00103$:
                                    593 ;	./src/main.c:118: Write7219(i, value);
      0000F3 8F*60            [24]  594 	mov	_Write7219_PARM_2,r7
      0000F5 8C 82            [24]  595 	mov	dpl,r4
      0000F7 C0 04            [24]  596 	push	ar4
      0000F9 12r00r37         [24]  597 	lcall	_Write7219
      0000FC D0 04            [24]  598 	pop	ar4
                                    599 ;	./src/main.c:107: for(i=1; i<=8; i++) {
      0000FE 0C               [12]  600 	inc	r4
      0000FF EC               [12]  601 	mov	a,r4
      000100 24 F7            [12]  602 	add	a,#0xff - 0x08
      000102 50 9F            [24]  603 	jnc	00105$
                                    604 ;	./src/main.c:120: }
      000104 22               [24]  605 	ret
                                    606 ;------------------------------------------------------------
                                    607 ;Allocation info for local variables in function 'scan_row'
                                    608 ;------------------------------------------------------------
                                    609 ;row                       Allocated to registers r6 r7 
                                    610 ;------------------------------------------------------------
                                    611 ;	./src/main.c:122: void scan_row(unsigned int row)
                                    612 ;	-----------------------------------------
                                    613 ;	 function scan_row
                                    614 ;	-----------------------------------------
      000105                        615 _scan_row:
      000105 AE 82            [24]  616 	mov	r6,dpl
      000107 AF 83            [24]  617 	mov	r7,dph
                                    618 ;	./src/main.c:124: switch (row)
      000109 C3               [12]  619 	clr	c
      00010A 74 03            [12]  620 	mov	a,#0x03
      00010C 9E               [12]  621 	subb	a,r6
      00010D E4               [12]  622 	clr	a
      00010E 9F               [12]  623 	subb	a,r7
      00010F 40 31            [24]  624 	jc	00107$
      000111 EE               [12]  625 	mov	a,r6
      000112 2E               [12]  626 	add	a,r6
                                    627 ;	./src/main.c:126: case 0:
      000113 90r01r17         [24]  628 	mov	dptr,#00114$
      000116 73               [24]  629 	jmp	@a+dptr
      000117                        630 00114$:
      000117 80 06            [24]  631 	sjmp	00101$
      000119 80 0D            [24]  632 	sjmp	00102$
      00011B 80 14            [24]  633 	sjmp	00103$
      00011D 80 1B            [24]  634 	sjmp	00104$
      00011F                        635 00101$:
                                    636 ;	./src/main.c:127: OUTPUT1 = 0; // row1 output 0
                                    637 ;	assignBit
      00011F C2 86            [12]  638 	clr	_P0_6
                                    639 ;	./src/main.c:128: OUTPUT2 = 1; // row2 output 1
                                    640 ;	assignBit
      000121 D2 85            [12]  641 	setb	_P0_5
                                    642 ;	./src/main.c:129: OUTPUT3 = 1; // row3 output 1
                                    643 ;	assignBit
      000123 D2 84            [12]  644 	setb	_P0_4
                                    645 ;	./src/main.c:130: OUTPUT0 = 1; // row0 output 1
                                    646 ;	assignBit
      000125 D2 83            [12]  647 	setb	_P0_3
                                    648 ;	./src/main.c:131: break;
                                    649 ;	./src/main.c:132: case 1:
      000127 22               [24]  650 	ret
      000128                        651 00102$:
                                    652 ;	./src/main.c:133: OUTPUT1 = 1; // row1 output 1
                                    653 ;	assignBit
      000128 D2 86            [12]  654 	setb	_P0_6
                                    655 ;	./src/main.c:134: OUTPUT2 = 0; // row2 output 0
                                    656 ;	assignBit
      00012A C2 85            [12]  657 	clr	_P0_5
                                    658 ;	./src/main.c:135: OUTPUT3 = 1; // row3 output 1
                                    659 ;	assignBit
      00012C D2 84            [12]  660 	setb	_P0_4
                                    661 ;	./src/main.c:136: OUTPUT0 = 1; // row0 output 1
                                    662 ;	assignBit
      00012E D2 83            [12]  663 	setb	_P0_3
                                    664 ;	./src/main.c:137: break;
                                    665 ;	./src/main.c:138: case 2:
      000130 22               [24]  666 	ret
      000131                        667 00103$:
                                    668 ;	./src/main.c:139: OUTPUT1 = 1; // row1 output 1
                                    669 ;	assignBit
      000131 D2 86            [12]  670 	setb	_P0_6
                                    671 ;	./src/main.c:140: OUTPUT2 = 1; // row2 output 1
                                    672 ;	assignBit
      000133 D2 85            [12]  673 	setb	_P0_5
                                    674 ;	./src/main.c:141: OUTPUT3 = 0; // row3 output 0
                                    675 ;	assignBit
      000135 C2 84            [12]  676 	clr	_P0_4
                                    677 ;	./src/main.c:142: OUTPUT0 = 1; // row0 output 1
                                    678 ;	assignBit
      000137 D2 83            [12]  679 	setb	_P0_3
                                    680 ;	./src/main.c:143: break;
                                    681 ;	./src/main.c:144: case 3:
      000139 22               [24]  682 	ret
      00013A                        683 00104$:
                                    684 ;	./src/main.c:145: OUTPUT1 = 1; // row1 output 1
                                    685 ;	assignBit
      00013A D2 86            [12]  686 	setb	_P0_6
                                    687 ;	./src/main.c:146: OUTPUT2 = 1; // row2 output 1
                                    688 ;	assignBit
      00013C D2 85            [12]  689 	setb	_P0_5
                                    690 ;	./src/main.c:147: OUTPUT3 = 1; // row3 output 1
                                    691 ;	assignBit
      00013E D2 84            [12]  692 	setb	_P0_4
                                    693 ;	./src/main.c:148: OUTPUT0 = 0; // row0 output 0
                                    694 ;	assignBit
      000140 C2 83            [12]  695 	clr	_P0_3
                                    696 ;	./src/main.c:152: }
      000142                        697 00107$:
                                    698 ;	./src/main.c:153: }
      000142 22               [24]  699 	ret
                                    700 ;------------------------------------------------------------
                                    701 ;Allocation info for local variables in function 'read_curINPUT'
                                    702 ;------------------------------------------------------------
                                    703 ;i                         Allocated to registers r6 r7 
                                    704 ;------------------------------------------------------------
                                    705 ;	./src/main.c:155: void read_curINPUT(void)
                                    706 ;	-----------------------------------------
                                    707 ;	 function read_curINPUT
                                    708 ;	-----------------------------------------
      000143                        709 _read_curINPUT:
                                    710 ;	./src/main.c:157: for (int i = 0; i < 4; i++)
      000143 7E 00            [12]  711 	mov	r6,#0x00
      000145 7F 00            [12]  712 	mov	r7,#0x00
      000147                        713 00106$:
      000147 C3               [12]  714 	clr	c
      000148 EE               [12]  715 	mov	a,r6
      000149 94 04            [12]  716 	subb	a,#0x04
      00014B EF               [12]  717 	mov	a,r7
      00014C 64 80            [12]  718 	xrl	a,#0x80
      00014E 94 80            [12]  719 	subb	a,#0x80
      000150 50 6C            [24]  720 	jnc	00104$
                                    721 ;	./src/main.c:159: scan_row(i);
      000152 8E 82            [24]  722 	mov	dpl,r6
      000154 8F 83            [24]  723 	mov	dph,r7
      000156 C0 07            [24]  724 	push	ar7
      000158 C0 06            [24]  725 	push	ar6
      00015A 12r01r05         [24]  726 	lcall	_scan_row
      00015D D0 06            [24]  727 	pop	ar6
      00015F D0 07            [24]  728 	pop	ar7
                                    729 ;	./src/main.c:160: if(i==3)
      000161 BE 03 10         [24]  730 	cjne	r6,#0x03,00102$
      000164 BF 00 0D         [24]  731 	cjne	r7,#0x00,00102$
                                    732 ;	./src/main.c:161: curINPUT[9] = INPUT2;
      000167 A2 81            [12]  733 	mov	c,_P0_1
      000169 E4               [12]  734 	clr	a
      00016A 33               [12]  735 	rlc	a
      00016B FC               [12]  736 	mov	r4,a
      00016C 7D 00            [12]  737 	mov	r5,#0x00
      00016E 8C*12            [24]  738 	mov	((_curINPUT + 0x0012) + 0),r4
      000170 8D*13            [24]  739 	mov	((_curINPUT + 0x0012) + 1),r5
      000172 80 42            [24]  740 	sjmp	00107$
      000174                        741 00102$:
                                    742 ;	./src/main.c:163: curINPUT[i * 3 + 0] = INPUT1;
      000174 8E 05            [24]  743 	mov	ar5,r6
      000176 ED               [12]  744 	mov	a,r5
      000177 75 F0 03         [24]  745 	mov	b,#0x03
      00017A A4               [48]  746 	mul	ab
      00017B FD               [12]  747 	mov	r5,a
      00017C 25 E0            [12]  748 	add	a,acc
      00017E 24r00            [12]  749 	add	a,#_curINPUT
      000180 F9               [12]  750 	mov	r1,a
      000181 A2 80            [12]  751 	mov	c,_P0_0
      000183 E4               [12]  752 	clr	a
      000184 33               [12]  753 	rlc	a
      000185 FB               [12]  754 	mov	r3,a
      000186 7C 00            [12]  755 	mov	r4,#0x00
      000188 A7 03            [24]  756 	mov	@r1,ar3
      00018A 09               [12]  757 	inc	r1
      00018B A7 04            [24]  758 	mov	@r1,ar4
      00018D 19               [12]  759 	dec	r1
                                    760 ;	./src/main.c:164: curINPUT[i * 3 + 1] = INPUT2;
      00018E ED               [12]  761 	mov	a,r5
      00018F 04               [12]  762 	inc	a
      000190 25 E0            [12]  763 	add	a,acc
      000192 24r00            [12]  764 	add	a,#_curINPUT
      000194 F9               [12]  765 	mov	r1,a
      000195 A2 81            [12]  766 	mov	c,_P0_1
      000197 E4               [12]  767 	clr	a
      000198 33               [12]  768 	rlc	a
      000199 FB               [12]  769 	mov	r3,a
      00019A 7C 00            [12]  770 	mov	r4,#0x00
      00019C A7 03            [24]  771 	mov	@r1,ar3
      00019E 09               [12]  772 	inc	r1
      00019F A7 04            [24]  773 	mov	@r1,ar4
      0001A1 19               [12]  774 	dec	r1
                                    775 ;	./src/main.c:165: curINPUT[i * 3 + 2] = INPUT3;
      0001A2 0D               [12]  776 	inc	r5
      0001A3 0D               [12]  777 	inc	r5
      0001A4 ED               [12]  778 	mov	a,r5
      0001A5 2D               [12]  779 	add	a,r5
      0001A6 24r00            [12]  780 	add	a,#_curINPUT
      0001A8 F9               [12]  781 	mov	r1,a
      0001A9 A2 82            [12]  782 	mov	c,_P0_2
      0001AB E4               [12]  783 	clr	a
      0001AC 33               [12]  784 	rlc	a
      0001AD FC               [12]  785 	mov	r4,a
      0001AE 7D 00            [12]  786 	mov	r5,#0x00
      0001B0 A7 04            [24]  787 	mov	@r1,ar4
      0001B2 09               [12]  788 	inc	r1
      0001B3 A7 05            [24]  789 	mov	@r1,ar5
      0001B5 19               [12]  790 	dec	r1
      0001B6                        791 00107$:
                                    792 ;	./src/main.c:157: for (int i = 0; i < 4; i++)
      0001B6 0E               [12]  793 	inc	r6
      0001B7 BE 00 01         [24]  794 	cjne	r6,#0x00,00126$
      0001BA 0F               [12]  795 	inc	r7
      0001BB                        796 00126$:
      0001BB 02r01r47         [24]  797 	ljmp	00106$
      0001BE                        798 00104$:
                                    799 ;	./src/main.c:168: curINPUT[10] = but1;
      0001BE A2 B2            [12]  800 	mov	c,_INT0
      0001C0 E4               [12]  801 	clr	a
      0001C1 33               [12]  802 	rlc	a
      0001C2 FE               [12]  803 	mov	r6,a
      0001C3 7F 00            [12]  804 	mov	r7,#0x00
      0001C5 8E*14            [24]  805 	mov	((_curINPUT + 0x0014) + 0),r6
      0001C7 8F*15            [24]  806 	mov	((_curINPUT + 0x0014) + 1),r7
                                    807 ;	./src/main.c:169: curINPUT[11] = but2;
      0001C9 A2 B3            [12]  808 	mov	c,_INT1
      0001CB E4               [12]  809 	clr	a
      0001CC 33               [12]  810 	rlc	a
      0001CD FE               [12]  811 	mov	r6,a
      0001CE 7F 00            [12]  812 	mov	r7,#0x00
      0001D0 8E*16            [24]  813 	mov	((_curINPUT + 0x0016) + 0),r6
      0001D2 8F*17            [24]  814 	mov	((_curINPUT + 0x0016) + 1),r7
                                    815 ;	./src/main.c:170: curINPUT[12] = but3;
      0001D4 A2 A0            [12]  816 	mov	c,_P2_0
      0001D6 E4               [12]  817 	clr	a
      0001D7 33               [12]  818 	rlc	a
      0001D8 FE               [12]  819 	mov	r6,a
      0001D9 7F 00            [12]  820 	mov	r7,#0x00
      0001DB 8E*18            [24]  821 	mov	((_curINPUT + 0x0018) + 0),r6
      0001DD 8F*19            [24]  822 	mov	((_curINPUT + 0x0018) + 1),r7
                                    823 ;	./src/main.c:171: curINPUT[13] = but4;
      0001DF A2 A1            [12]  824 	mov	c,_P2_1
      0001E1 E4               [12]  825 	clr	a
      0001E2 33               [12]  826 	rlc	a
      0001E3 FE               [12]  827 	mov	r6,a
      0001E4 7F 00            [12]  828 	mov	r7,#0x00
      0001E6 8E*1A            [24]  829 	mov	((_curINPUT + 0x001a) + 0),r6
      0001E8 8F*1B            [24]  830 	mov	((_curINPUT + 0x001a) + 1),r7
                                    831 ;	./src/main.c:172: }
      0001EA 22               [24]  832 	ret
                                    833 ;------------------------------------------------------------
                                    834 ;Allocation info for local variables in function 'sequence'
                                    835 ;------------------------------------------------------------
                                    836 ;a                         Allocated to registers r6 r7 
                                    837 ;------------------------------------------------------------
                                    838 ;	./src/main.c:174: void sequence(void){
                                    839 ;	-----------------------------------------
                                    840 ;	 function sequence
                                    841 ;	-----------------------------------------
      0001EB                        842 _sequence:
                                    843 ;	./src/main.c:175: for(int a = 7; a > 0; a--){
      0001EB 7E 07            [12]  844 	mov	r6,#0x07
      0001ED 7F 00            [12]  845 	mov	r7,#0x00
      0001EF                        846 00103$:
      0001EF C3               [12]  847 	clr	c
      0001F0 E4               [12]  848 	clr	a
      0001F1 9E               [12]  849 	subb	a,r6
      0001F2 74 80            [12]  850 	mov	a,#(0x00 ^ 0x80)
      0001F4 8F F0            [24]  851 	mov	b,r7
      0001F6 63 F0 80         [24]  852 	xrl	b,#0x80
      0001F9 95 F0            [12]  853 	subb	a,b
      0001FB 50 16            [24]  854 	jnc	00105$
                                    855 ;	./src/main.c:176: display[a] = display[a-1];
      0001FD EE               [12]  856 	mov	a,r6
      0001FE 24r54            [12]  857 	add	a,#_display
      000200 F9               [12]  858 	mov	r1,a
      000201 8E 05            [24]  859 	mov	ar5,r6
      000203 ED               [12]  860 	mov	a,r5
      000204 14               [12]  861 	dec	a
      000205 24r54            [12]  862 	add	a,#_display
      000207 F8               [12]  863 	mov	r0,a
      000208 86 05            [24]  864 	mov	ar5,@r0
      00020A A7 05            [24]  865 	mov	@r1,ar5
                                    866 ;	./src/main.c:175: for(int a = 7; a > 0; a--){
      00020C 1E               [12]  867 	dec	r6
      00020D BE FF 01         [24]  868 	cjne	r6,#0xff,00117$
      000210 1F               [12]  869 	dec	r7
      000211                        870 00117$:
      000211 80 DC            [24]  871 	sjmp	00103$
      000213                        872 00105$:
                                    873 ;	./src/main.c:178: }
      000213 22               [24]  874 	ret
                                    875 ;------------------------------------------------------------
                                    876 ;Allocation info for local variables in function 'func_call'
                                    877 ;------------------------------------------------------------
                                    878 ;cmd                       Allocated to registers r6 r7 
                                    879 ;a                         Allocated to registers r6 r7 
                                    880 ;------------------------------------------------------------
                                    881 ;	./src/main.c:180: void func_call(unsigned int cmd){
                                    882 ;	-----------------------------------------
                                    883 ;	 function func_call
                                    884 ;	-----------------------------------------
      000214                        885 _func_call:
      000214 AE 82            [24]  886 	mov	r6,dpl
      000216 AF 83            [24]  887 	mov	r7,dph
                                    888 ;	./src/main.c:182: switch (cmd)
      000218 BE 0A 05         [24]  889 	cjne	r6,#0x0a,00157$
      00021B BF 00 02         [24]  890 	cjne	r7,#0x00,00157$
      00021E 80 1A            [24]  891 	sjmp	00101$
      000220                        892 00157$:
      000220 BE 0B 05         [24]  893 	cjne	r6,#0x0b,00158$
      000223 BF 00 02         [24]  894 	cjne	r7,#0x00,00158$
      000226 80 49            [24]  895 	sjmp	00109$
      000228                        896 00158$:
      000228 BE 0C 05         [24]  897 	cjne	r6,#0x0c,00159$
      00022B BF 00 02         [24]  898 	cjne	r7,#0x00,00159$
      00022E 80 4D            [24]  899 	sjmp	00128$
      000230                        900 00159$:
      000230 BE 0D 06         [24]  901 	cjne	r6,#0x0d,00160$
      000233 BF 00 03         [24]  902 	cjne	r7,#0x00,00160$
      000236 02r02rC2         [24]  903 	ljmp	00112$
      000239                        904 00160$:
      000239 22               [24]  905 	ret
                                    906 ;	./src/main.c:184: case 10:	//op
      00023A                        907 00101$:
                                    908 ;	./src/main.c:185: if(patt == 0x80)
      00023A 74 80            [12]  909 	mov	a,#0x80
      00023C B5*5C 05         [24]  910 	cjne	a,_patt,00105$
                                    911 ;	./src/main.c:186: patt = 0x08;
      00023F 75*5C 08         [24]  912 	mov	_patt,#0x08
      000242 80 07            [24]  913 	sjmp	00106$
      000244                        914 00105$:
                                    915 ;	./src/main.c:187: else if (patt == 0x00)
      000244 E5*5C            [12]  916 	mov	a,_patt
      000246 70 03            [24]  917 	jnz	00106$
                                    918 ;	./src/main.c:188: patt = 0x08;
      000248 75*5C 08         [24]  919 	mov	_patt,#0x08
      00024B                        920 00106$:
                                    921 ;	./src/main.c:190: op_cnt++;
      00024B 05*5E            [12]  922 	inc	_op_cnt
      00024D E4               [12]  923 	clr	a
      00024E B5*5E 02         [24]  924 	cjne	a,_op_cnt,00164$
      000251 05*5F            [12]  925 	inc	(_op_cnt + 1)
      000253                        926 00164$:
                                    927 ;	./src/main.c:191: if(op_cnt > 4)
      000253 C3               [12]  928 	clr	c
      000254 74 04            [12]  929 	mov	a,#0x04
      000256 95*5E            [12]  930 	subb	a,_op_cnt
      000258 E4               [12]  931 	clr	a
      000259 95*5F            [12]  932 	subb	a,(_op_cnt + 1)
      00025B 50 05            [24]  933 	jnc	00108$
                                    934 ;	./src/main.c:192: op_cnt = 0;
      00025D E4               [12]  935 	clr	a
      00025E F5*5E            [12]  936 	mov	_op_cnt,a
      000260 F5*5F            [12]  937 	mov	(_op_cnt + 1),a
      000262                        938 00108$:
                                    939 ;	./src/main.c:194: patt = patt << 1;
      000262 E5*5C            [12]  940 	mov	a,_patt
      000264 25 E0            [12]  941 	add	a,acc
                                    942 ;	./src/main.c:195: led = ~patt;
      000266 F5*5C            [12]  943 	mov	_patt,a
      000268 F4               [12]  944 	cpl	a
      000269 F5 90            [12]  945 	mov	_P1,a
                                    946 ;	./src/main.c:196: delay_ms(20);
      00026B 90 00 14         [24]  947 	mov	dptr,#0x0014
                                    948 ;	./src/main.c:197: break;
                                    949 ;	./src/main.c:198: case 11:	//back <-
      00026E 02r00r00         [24]  950 	ljmp	_delay_ms
      000271                        951 00109$:
                                    952 ;	./src/main.c:199: patt1 = 0x01;
      000271 75*5D 01         [24]  953 	mov	_patt1,#0x01
                                    954 ;	./src/main.c:200: led = ~patt1;
      000274 75 90 FE         [24]  955 	mov	_P1,#0xfe
                                    956 ;	./src/main.c:201: delay_ms(20);
      000277 90 00 14         [24]  957 	mov	dptr,#0x0014
                                    958 ;	./src/main.c:202: break;
                                    959 ;	./src/main.c:204: for(int a = 0; a < 8; a++){
      00027A 02r00r00         [24]  960 	ljmp	_delay_ms
      00027D                        961 00128$:
      00027D 7E 00            [12]  962 	mov	r6,#0x00
      00027F 7F 00            [12]  963 	mov	r7,#0x00
      000281                        964 00116$:
      000281 C3               [12]  965 	clr	c
      000282 EE               [12]  966 	mov	a,r6
      000283 94 08            [12]  967 	subb	a,#0x08
      000285 EF               [12]  968 	mov	a,r7
      000286 64 80            [12]  969 	xrl	a,#0x80
      000288 94 80            [12]  970 	subb	a,#0x80
      00028A 50 21            [24]  971 	jnc	00111$
                                    972 ;	./src/main.c:205: display[a] = 0x00;
      00028C EE               [12]  973 	mov	a,r6
      00028D 24r54            [12]  974 	add	a,#_display
      00028F F8               [12]  975 	mov	r0,a
      000290 76 00            [12]  976 	mov	@r0,#0x00
                                    977 ;	./src/main.c:206: Write7219(a+1,0x00);
      000292 8E 05            [24]  978 	mov	ar5,r6
      000294 ED               [12]  979 	mov	a,r5
      000295 04               [12]  980 	inc	a
      000296 F5 82            [12]  981 	mov	dpl,a
      000298 75*60 00         [24]  982 	mov	_Write7219_PARM_2,#0x00
      00029B C0 07            [24]  983 	push	ar7
      00029D C0 06            [24]  984 	push	ar6
      00029F 12r00r37         [24]  985 	lcall	_Write7219
      0002A2 D0 06            [24]  986 	pop	ar6
      0002A4 D0 07            [24]  987 	pop	ar7
                                    988 ;	./src/main.c:204: for(int a = 0; a < 8; a++){
      0002A6 0E               [12]  989 	inc	r6
      0002A7 BE 00 D7         [24]  990 	cjne	r6,#0x00,00116$
      0002AA 0F               [12]  991 	inc	r7
      0002AB 80 D4            [24]  992 	sjmp	00116$
      0002AD                        993 00111$:
                                    994 ;	./src/main.c:208: Write7219(0x01,0x08);
      0002AD 75*60 08         [24]  995 	mov	_Write7219_PARM_2,#0x08
      0002B0 75 82 01         [24]  996 	mov	dpl,#0x01
      0002B3 12r00r37         [24]  997 	lcall	_Write7219
                                    998 ;	./src/main.c:209: patt1 = 0x02;
      0002B6 75*5D 02         [24]  999 	mov	_patt1,#0x02
                                   1000 ;	./src/main.c:210: led = ~patt1;
      0002B9 75 90 FD         [24] 1001 	mov	_P1,#0xfd
                                   1002 ;	./src/main.c:211: delay_ms(20);
      0002BC 90 00 14         [24] 1003 	mov	dptr,#0x0014
                                   1004 ;	./src/main.c:212: break;
                                   1005 ;	./src/main.c:213: case 13:	//equal=
      0002BF 02r00r00         [24] 1006 	ljmp	_delay_ms
      0002C2                       1007 00112$:
                                   1008 ;	./src/main.c:214: patt1 = 0x04;
      0002C2 75*5D 04         [24] 1009 	mov	_patt1,#0x04
                                   1010 ;	./src/main.c:215: led = ~patt1;
      0002C5 75 90 FB         [24] 1011 	mov	_P1,#0xfb
                                   1012 ;	./src/main.c:216: delay_ms(20);
      0002C8 90 00 14         [24] 1013 	mov	dptr,#0x0014
                                   1014 ;	./src/main.c:220: }
                                   1015 ;	./src/main.c:221: }
      0002CB 02r00r00         [24] 1016 	ljmp	_delay_ms
                                   1017 ;------------------------------------------------------------
                                   1018 ;Allocation info for local variables in function 'main'
                                   1019 ;------------------------------------------------------------
                                   1020 ;i                         Allocated to registers r6 r7 
                                   1021 ;i                         Allocated to registers r6 r7 
                                   1022 ;------------------------------------------------------------
                                   1023 ;	./src/main.c:240: void main(void)
                                   1024 ;	-----------------------------------------
                                   1025 ;	 function main
                                   1026 ;	-----------------------------------------
      0002CE                       1027 _main:
                                   1028 ;	./src/main.c:243: Initial();
      0002CE 12r00r56         [24] 1029 	lcall	_Initial
                                   1030 ;	./src/main.c:244: for (int i = 0; i < 14; i++)
      0002D1 7E 00            [12] 1031 	mov	r6,#0x00
      0002D3 7F 00            [12] 1032 	mov	r7,#0x00
      0002D5                       1033 00127$:
      0002D5 C3               [12] 1034 	clr	c
      0002D6 EE               [12] 1035 	mov	a,r6
      0002D7 94 0E            [12] 1036 	subb	a,#0x0e
      0002D9 EF               [12] 1037 	mov	a,r7
      0002DA 64 80            [12] 1038 	xrl	a,#0x80
      0002DC 94 80            [12] 1039 	subb	a,#0x80
      0002DE 50 27            [24] 1040 	jnc	00101$
                                   1041 ;	./src/main.c:246: curINPUT[i] = LEVEL_HIGH;
      0002E0 EE               [12] 1042 	mov	a,r6
      0002E1 2E               [12] 1043 	add	a,r6
      0002E2 FC               [12] 1044 	mov	r4,a
      0002E3 EF               [12] 1045 	mov	a,r7
      0002E4 33               [12] 1046 	rlc	a
      0002E5 EC               [12] 1047 	mov	a,r4
      0002E6 24r00            [12] 1048 	add	a,#_curINPUT
      0002E8 F8               [12] 1049 	mov	r0,a
      0002E9 76 01            [12] 1050 	mov	@r0,#0x01
      0002EB 08               [12] 1051 	inc	r0
      0002EC 76 00            [12] 1052 	mov	@r0,#0x00
                                   1053 ;	./src/main.c:247: state[i] = BTN_RELEASED;
      0002EE EC               [12] 1054 	mov	a,r4
      0002EF 24r1C            [12] 1055 	add	a,#_state
      0002F1 F8               [12] 1056 	mov	r0,a
      0002F2 76 00            [12] 1057 	mov	@r0,#0x00
      0002F4 08               [12] 1058 	inc	r0
      0002F5 76 00            [12] 1059 	mov	@r0,#0x00
                                   1060 ;	./src/main.c:248: prestate[i] = BTN_RELEASED;
      0002F7 EC               [12] 1061 	mov	a,r4
      0002F8 24r38            [12] 1062 	add	a,#_prestate
      0002FA F8               [12] 1063 	mov	r0,a
      0002FB 76 00            [12] 1064 	mov	@r0,#0x00
      0002FD 08               [12] 1065 	inc	r0
      0002FE 76 00            [12] 1066 	mov	@r0,#0x00
                                   1067 ;	./src/main.c:244: for (int i = 0; i < 14; i++)
      000300 0E               [12] 1068 	inc	r6
      000301 BE 00 D1         [24] 1069 	cjne	r6,#0x00,00127$
      000304 0F               [12] 1070 	inc	r7
      000305 80 CE            [24] 1071 	sjmp	00127$
      000307                       1072 00101$:
                                   1073 ;	./src/main.c:250: func_call(12);
      000307 90 00 0C         [24] 1074 	mov	dptr,#0x000c
      00030A 12r02r14         [24] 1075 	lcall	_func_call
                                   1076 ;	./src/main.c:252: while(1)
      00030D                       1077 00124$:
                                   1078 ;	./src/main.c:254: delay_ms(20);
      00030D 90 00 14         [24] 1079 	mov	dptr,#0x0014
      000310 12r00r00         [24] 1080 	lcall	_delay_ms
                                   1081 ;	./src/main.c:257: read_curINPUT();
      000313 12r01r43         [24] 1082 	lcall	_read_curINPUT
                                   1083 ;	./src/main.c:258: for (int i = 0; i < 14; i++)
      000316 7E 00            [12] 1084 	mov	r6,#0x00
      000318 7F 00            [12] 1085 	mov	r7,#0x00
      00031A                       1086 00130$:
      00031A C3               [12] 1087 	clr	c
      00031B EE               [12] 1088 	mov	a,r6
      00031C 94 0E            [12] 1089 	subb	a,#0x0e
      00031E EF               [12] 1090 	mov	a,r7
      00031F 64 80            [12] 1091 	xrl	a,#0x80
      000321 94 80            [12] 1092 	subb	a,#0x80
      000323 50 E8            [24] 1093 	jnc	00124$
                                   1094 ;	./src/main.c:261: switch (state[i])
      000325 EE               [12] 1095 	mov	a,r6
      000326 2E               [12] 1096 	add	a,r6
      000327 FC               [12] 1097 	mov	r4,a
      000328 EF               [12] 1098 	mov	a,r7
      000329 33               [12] 1099 	rlc	a
      00032A FD               [12] 1100 	mov	r5,a
      00032B EC               [12] 1101 	mov	a,r4
      00032C 24r1C            [12] 1102 	add	a,#_state
      00032E F9               [12] 1103 	mov	r1,a
      00032F 87 02            [24] 1104 	mov	ar2,@r1
      000331 09               [12] 1105 	inc	r1
      000332 87 03            [24] 1106 	mov	ar3,@r1
      000334 19               [12] 1107 	dec	r1
      000335 BA 00 05         [24] 1108 	cjne	r2,#0x00,00194$
      000338 BB 00 02         [24] 1109 	cjne	r3,#0x00,00194$
      00033B 80 10            [24] 1110 	sjmp	00102$
      00033D                       1111 00194$:
      00033D BA 01 05         [24] 1112 	cjne	r2,#0x01,00195$
      000340 BB 00 02         [24] 1113 	cjne	r3,#0x00,00195$
      000343 80 26            [24] 1114 	sjmp	00106$
      000345                       1115 00195$:
                                   1116 ;	./src/main.c:263: case BTN_RELEASED:
      000345 BA 02 5D         [24] 1117 	cjne	r2,#0x02,00115$
      000348 BB 00 5A         [24] 1118 	cjne	r3,#0x00,00115$
      00034B 80 3C            [24] 1119 	sjmp	00110$
      00034D                       1120 00102$:
                                   1121 ;	./src/main.c:264: if (curINPUT[i] == LEVEL_LOW)
      00034D EC               [12] 1122 	mov	a,r4
      00034E 24r00            [12] 1123 	add	a,#_curINPUT
      000350 F8               [12] 1124 	mov	r0,a
      000351 86 02            [24] 1125 	mov	ar2,@r0
      000353 08               [12] 1126 	inc	r0
      000354 86 03            [24] 1127 	mov	ar3,@r0
      000356 18               [12] 1128 	dec	r0
      000357 EA               [12] 1129 	mov	a,r2
      000358 4B               [12] 1130 	orl	a,r3
      000359 70 08            [24] 1131 	jnz	00104$
                                   1132 ;	./src/main.c:265: state[i] = BTN_DEBOUNCED;
      00035B 77 01            [12] 1133 	mov	@r1,#0x01
      00035D 09               [12] 1134 	inc	r1
      00035E 77 00            [12] 1135 	mov	@r1,#0x00
      000360 19               [12] 1136 	dec	r1
      000361 80 42            [24] 1137 	sjmp	00115$
      000363                       1138 00104$:
                                   1139 ;	./src/main.c:267: state[i] = BTN_RELEASED;
      000363 77 00            [12] 1140 	mov	@r1,#0x00
      000365 09               [12] 1141 	inc	r1
      000366 77 00            [12] 1142 	mov	@r1,#0x00
      000368 19               [12] 1143 	dec	r1
                                   1144 ;	./src/main.c:268: break;
                                   1145 ;	./src/main.c:269: case BTN_DEBOUNCED:
      000369 80 3A            [24] 1146 	sjmp	00115$
      00036B                       1147 00106$:
                                   1148 ;	./src/main.c:270: if (curINPUT[i] == LEVEL_LOW)
      00036B EC               [12] 1149 	mov	a,r4
      00036C 24r00            [12] 1150 	add	a,#_curINPUT
      00036E F8               [12] 1151 	mov	r0,a
      00036F 86 02            [24] 1152 	mov	ar2,@r0
      000371 08               [12] 1153 	inc	r0
      000372 86 03            [24] 1154 	mov	ar3,@r0
      000374 18               [12] 1155 	dec	r0
      000375 EA               [12] 1156 	mov	a,r2
      000376 4B               [12] 1157 	orl	a,r3
      000377 70 08            [24] 1158 	jnz	00108$
                                   1159 ;	./src/main.c:271: state[i] = BTN_PRESSED;
      000379 77 02            [12] 1160 	mov	@r1,#0x02
      00037B 09               [12] 1161 	inc	r1
      00037C 77 00            [12] 1162 	mov	@r1,#0x00
      00037E 19               [12] 1163 	dec	r1
      00037F 80 24            [24] 1164 	sjmp	00115$
      000381                       1165 00108$:
                                   1166 ;	./src/main.c:273: state[i] = BTN_RELEASED;
      000381 77 00            [12] 1167 	mov	@r1,#0x00
      000383 09               [12] 1168 	inc	r1
      000384 77 00            [12] 1169 	mov	@r1,#0x00
      000386 19               [12] 1170 	dec	r1
                                   1171 ;	./src/main.c:274: break;
                                   1172 ;	./src/main.c:275: case BTN_PRESSED:
      000387 80 1C            [24] 1173 	sjmp	00115$
      000389                       1174 00110$:
                                   1175 ;	./src/main.c:276: if (curINPUT[i] == LEVEL_LOW)
      000389 EC               [12] 1176 	mov	a,r4
      00038A 24r00            [12] 1177 	add	a,#_curINPUT
      00038C F8               [12] 1178 	mov	r0,a
      00038D 86 04            [24] 1179 	mov	ar4,@r0
      00038F 08               [12] 1180 	inc	r0
      000390 86 05            [24] 1181 	mov	ar5,@r0
      000392 18               [12] 1182 	dec	r0
      000393 EC               [12] 1183 	mov	a,r4
      000394 4D               [12] 1184 	orl	a,r5
      000395 70 08            [24] 1185 	jnz	00112$
                                   1186 ;	./src/main.c:277: state[i] = BTN_PRESSED;
      000397 77 02            [12] 1187 	mov	@r1,#0x02
      000399 09               [12] 1188 	inc	r1
      00039A 77 00            [12] 1189 	mov	@r1,#0x00
      00039C 19               [12] 1190 	dec	r1
      00039D 80 06            [24] 1191 	sjmp	00115$
      00039F                       1192 00112$:
                                   1193 ;	./src/main.c:279: state[i] = BTN_RELEASED;
      00039F 77 00            [12] 1194 	mov	@r1,#0x00
      0003A1 09               [12] 1195 	inc	r1
      0003A2 77 00            [12] 1196 	mov	@r1,#0x00
      0003A4 19               [12] 1197 	dec	r1
                                   1198 ;	./src/main.c:283: }
      0003A5                       1199 00115$:
                                   1200 ;	./src/main.c:285: if ((state[i] == BTN_RELEASED) && (prestate[i] == BTN_PRESSED)){
      0003A5 EE               [12] 1201 	mov	a,r6
      0003A6 2E               [12] 1202 	add	a,r6
      0003A7 FC               [12] 1203 	mov	r4,a
      0003A8 EF               [12] 1204 	mov	a,r7
      0003A9 33               [12] 1205 	rlc	a
      0003AA FD               [12] 1206 	mov	r5,a
      0003AB EC               [12] 1207 	mov	a,r4
      0003AC 24r1C            [12] 1208 	add	a,#_state
      0003AE F9               [12] 1209 	mov	r1,a
      0003AF 87 02            [24] 1210 	mov	ar2,@r1
      0003B1 09               [12] 1211 	inc	r1
      0003B2 87 03            [24] 1212 	mov	ar3,@r1
      0003B4 19               [12] 1213 	dec	r1
      0003B5 EA               [12] 1214 	mov	a,r2
      0003B6 4B               [12] 1215 	orl	a,r3
      0003B7 70 50            [24] 1216 	jnz	00120$
      0003B9 EC               [12] 1217 	mov	a,r4
      0003BA 24r38            [12] 1218 	add	a,#_prestate
      0003BC F9               [12] 1219 	mov	r1,a
      0003BD 87 04            [24] 1220 	mov	ar4,@r1
      0003BF 09               [12] 1221 	inc	r1
      0003C0 87 05            [24] 1222 	mov	ar5,@r1
      0003C2 19               [12] 1223 	dec	r1
      0003C3 BC 02 43         [24] 1224 	cjne	r4,#0x02,00120$
      0003C6 BD 00 40         [24] 1225 	cjne	r5,#0x00,00120$
                                   1226 ;	./src/main.c:287: if (i < 10){
      0003C9 C3               [12] 1227 	clr	c
      0003CA EE               [12] 1228 	mov	a,r6
      0003CB 94 0A            [12] 1229 	subb	a,#0x0a
      0003CD EF               [12] 1230 	mov	a,r7
      0003CE 64 80            [12] 1231 	xrl	a,#0x80
      0003D0 94 80            [12] 1232 	subb	a,#0x80
      0003D2 50 26            [24] 1233 	jnc	00117$
                                   1234 ;	./src/main.c:288: sequence();
      0003D4 C0 07            [24] 1235 	push	ar7
      0003D6 C0 06            [24] 1236 	push	ar6
      0003D8 12r01rEB         [24] 1237 	lcall	_sequence
      0003DB D0 06            [24] 1238 	pop	ar6
      0003DD D0 07            [24] 1239 	pop	ar7
                                   1240 ;	./src/main.c:289: display[0] = display_seg[i];
      0003DF EE               [12] 1241 	mov	a,r6
      0003E0 24r64            [12] 1242 	add	a,#_display_seg
      0003E2 F9               [12] 1243 	mov	r1,a
      0003E3 87 05            [24] 1244 	mov	ar5,@r1
      0003E5 8D*54            [24] 1245 	mov	_display,r5
                                   1246 ;	./src/main.c:290: draw(display);
      0003E7 90r00r54         [24] 1247 	mov	dptr,#_display
      0003EA 75 F0 40         [24] 1248 	mov	b,#0x40
      0003ED C0 07            [24] 1249 	push	ar7
      0003EF C0 06            [24] 1250 	push	ar6
      0003F1 12r00r98         [24] 1251 	lcall	_draw
      0003F4 D0 06            [24] 1252 	pop	ar6
      0003F6 D0 07            [24] 1253 	pop	ar7
      0003F8 80 0F            [24] 1254 	sjmp	00120$
      0003FA                       1255 00117$:
                                   1256 ;	./src/main.c:292: func_call(i);
      0003FA 8E 82            [24] 1257 	mov	dpl,r6
      0003FC 8F 83            [24] 1258 	mov	dph,r7
      0003FE C0 07            [24] 1259 	push	ar7
      000400 C0 06            [24] 1260 	push	ar6
      000402 12r02r14         [24] 1261 	lcall	_func_call
      000405 D0 06            [24] 1262 	pop	ar6
      000407 D0 07            [24] 1263 	pop	ar7
      000409                       1264 00120$:
                                   1265 ;	./src/main.c:295: prestate[i] = state[i];
      000409 EE               [12] 1266 	mov	a,r6
      00040A 2E               [12] 1267 	add	a,r6
      00040B FC               [12] 1268 	mov	r4,a
      00040C EF               [12] 1269 	mov	a,r7
      00040D 33               [12] 1270 	rlc	a
      00040E EC               [12] 1271 	mov	a,r4
      00040F 24r38            [12] 1272 	add	a,#_prestate
      000411 F9               [12] 1273 	mov	r1,a
      000412 EC               [12] 1274 	mov	a,r4
      000413 24r1C            [12] 1275 	add	a,#_state
      000415 F8               [12] 1276 	mov	r0,a
      000416 86 04            [24] 1277 	mov	ar4,@r0
      000418 08               [12] 1278 	inc	r0
      000419 86 05            [24] 1279 	mov	ar5,@r0
      00041B 18               [12] 1280 	dec	r0
      00041C A7 04            [24] 1281 	mov	@r1,ar4
      00041E 09               [12] 1282 	inc	r1
      00041F A7 05            [24] 1283 	mov	@r1,ar5
      000421 19               [12] 1284 	dec	r1
                                   1285 ;	./src/main.c:258: for (int i = 0; i < 14; i++)
      000422 0E               [12] 1286 	inc	r6
      000423 BE 00 01         [24] 1287 	cjne	r6,#0x00,00204$
      000426 0F               [12] 1288 	inc	r7
      000427                       1289 00204$:
                                   1290 ;	./src/main.c:298: }
      000427 02r03r1A         [24] 1291 	ljmp	00130$
                                   1292 	.area CSEG    (CODE)
                                   1293 	.area CONST   (CODE)
                                   1294 	.area XINIT   (CODE)
                                   1295 	.area CABS    (ABS,CODE)
