                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sendbyte_PARM_2
                                     12 	.globl _main
                                     13 	.globl _func_call
                                     14 	.globl _sequence
                                     15 	.globl _read_curINPUT
                                     16 	.globl _delay_ms
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _display_seg
                                    114 	.globl _Write7219_PARM_2
                                    115 	.globl _op_cnt
                                    116 	.globl _patt1
                                    117 	.globl _patt
                                    118 	.globl _display
                                    119 	.globl _prestate
                                    120 	.globl _state
                                    121 	.globl _curINPUT
                                    122 	.globl _sendbyte
                                    123 	.globl _Write7219
                                    124 	.globl _Initial
                                    125 	.globl _draw
                                    126 	.globl _scan_row
                                    127 ;--------------------------------------------------------
                                    128 ; special function registers
                                    129 ;--------------------------------------------------------
                                    130 	.area RSEG    (ABS,DATA)
      000000                        131 	.org 0x0000
                           000080   132 _P0	=	0x0080
                           000081   133 _SP	=	0x0081
                           000082   134 _DPL	=	0x0082
                           000083   135 _DPH	=	0x0083
                           000087   136 _PCON	=	0x0087
                           000088   137 _TCON	=	0x0088
                           000089   138 _TMOD	=	0x0089
                           00008A   139 _TL0	=	0x008a
                           00008B   140 _TL1	=	0x008b
                           00008C   141 _TH0	=	0x008c
                           00008D   142 _TH1	=	0x008d
                           000090   143 _P1	=	0x0090
                           000098   144 _SCON	=	0x0098
                           000099   145 _SBUF	=	0x0099
                           0000A0   146 _P2	=	0x00a0
                           0000A8   147 _IE	=	0x00a8
                           0000B0   148 _P3	=	0x00b0
                           0000B8   149 _IP	=	0x00b8
                           0000D0   150 _PSW	=	0x00d0
                           0000E0   151 _ACC	=	0x00e0
                           0000F0   152 _B	=	0x00f0
                                    153 ;--------------------------------------------------------
                                    154 ; special function bits
                                    155 ;--------------------------------------------------------
                                    156 	.area RSEG    (ABS,DATA)
      000000                        157 	.org 0x0000
                           000080   158 _P0_0	=	0x0080
                           000081   159 _P0_1	=	0x0081
                           000082   160 _P0_2	=	0x0082
                           000083   161 _P0_3	=	0x0083
                           000084   162 _P0_4	=	0x0084
                           000085   163 _P0_5	=	0x0085
                           000086   164 _P0_6	=	0x0086
                           000087   165 _P0_7	=	0x0087
                           000088   166 _IT0	=	0x0088
                           000089   167 _IE0	=	0x0089
                           00008A   168 _IT1	=	0x008a
                           00008B   169 _IE1	=	0x008b
                           00008C   170 _TR0	=	0x008c
                           00008D   171 _TF0	=	0x008d
                           00008E   172 _TR1	=	0x008e
                           00008F   173 _TF1	=	0x008f
                           000090   174 _P1_0	=	0x0090
                           000091   175 _P1_1	=	0x0091
                           000092   176 _P1_2	=	0x0092
                           000093   177 _P1_3	=	0x0093
                           000094   178 _P1_4	=	0x0094
                           000095   179 _P1_5	=	0x0095
                           000096   180 _P1_6	=	0x0096
                           000097   181 _P1_7	=	0x0097
                           000098   182 _RI	=	0x0098
                           000099   183 _TI	=	0x0099
                           00009A   184 _RB8	=	0x009a
                           00009B   185 _TB8	=	0x009b
                           00009C   186 _REN	=	0x009c
                           00009D   187 _SM2	=	0x009d
                           00009E   188 _SM1	=	0x009e
                           00009F   189 _SM0	=	0x009f
                           0000A0   190 _P2_0	=	0x00a0
                           0000A1   191 _P2_1	=	0x00a1
                           0000A2   192 _P2_2	=	0x00a2
                           0000A3   193 _P2_3	=	0x00a3
                           0000A4   194 _P2_4	=	0x00a4
                           0000A5   195 _P2_5	=	0x00a5
                           0000A6   196 _P2_6	=	0x00a6
                           0000A7   197 _P2_7	=	0x00a7
                           0000A8   198 _EX0	=	0x00a8
                           0000A9   199 _ET0	=	0x00a9
                           0000AA   200 _EX1	=	0x00aa
                           0000AB   201 _ET1	=	0x00ab
                           0000AC   202 _ES	=	0x00ac
                           0000AF   203 _EA	=	0x00af
                           0000B0   204 _P3_0	=	0x00b0
                           0000B1   205 _P3_1	=	0x00b1
                           0000B2   206 _P3_2	=	0x00b2
                           0000B3   207 _P3_3	=	0x00b3
                           0000B4   208 _P3_4	=	0x00b4
                           0000B5   209 _P3_5	=	0x00b5
                           0000B6   210 _P3_6	=	0x00b6
                           0000B7   211 _P3_7	=	0x00b7
                           0000B0   212 _RXD	=	0x00b0
                           0000B1   213 _TXD	=	0x00b1
                           0000B2   214 _INT0	=	0x00b2
                           0000B3   215 _INT1	=	0x00b3
                           0000B4   216 _T0	=	0x00b4
                           0000B5   217 _T1	=	0x00b5
                           0000B6   218 _WR	=	0x00b6
                           0000B7   219 _RD	=	0x00b7
                           0000B8   220 _PX0	=	0x00b8
                           0000B9   221 _PT0	=	0x00b9
                           0000BA   222 _PX1	=	0x00ba
                           0000BB   223 _PT1	=	0x00bb
                           0000BC   224 _PS	=	0x00bc
                           0000D0   225 _P	=	0x00d0
                           0000D1   226 _F1	=	0x00d1
                           0000D2   227 _OV	=	0x00d2
                           0000D3   228 _RS0	=	0x00d3
                           0000D4   229 _RS1	=	0x00d4
                           0000D5   230 _F0	=	0x00d5
                           0000D6   231 _AC	=	0x00d6
                           0000D7   232 _CY	=	0x00d7
                                    233 ;--------------------------------------------------------
                                    234 ; overlayable register banks
                                    235 ;--------------------------------------------------------
                                    236 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        237 	.ds 8
                                    238 ;--------------------------------------------------------
                                    239 ; internal ram data
                                    240 ;--------------------------------------------------------
                                    241 	.area DSEG    (DATA)
      000000                        242 _curINPUT::
      000000                        243 	.ds 28
      00001C                        244 _state::
      00001C                        245 	.ds 28
      000038                        246 _prestate::
      000038                        247 	.ds 28
      000054                        248 _display::
      000054                        249 	.ds 8
      00005C                        250 _patt::
      00005C                        251 	.ds 1
      00005D                        252 _patt1::
      00005D                        253 	.ds 1
      00005E                        254 _op_cnt::
      00005E                        255 	.ds 2
      000060                        256 _Write7219_PARM_2:
      000060                        257 	.ds 1
      000061                        258 _display_seg::
      000061                        259 	.ds 11
                                    260 ;--------------------------------------------------------
                                    261 ; overlayable items in internal ram
                                    262 ;--------------------------------------------------------
                                    263 	.area	OSEG    (OVR,DATA)
      000000                        264 _sendbyte_PARM_2:
      000000                        265 	.ds 1
                                    266 	.area	OSEG    (OVR,DATA)
                                    267 ;--------------------------------------------------------
                                    268 ; Stack segment in internal ram
                                    269 ;--------------------------------------------------------
                                    270 	.area SSEG
      000000                        271 __start__stack:
      000000                        272 	.ds	1
                                    273 
                                    274 ;--------------------------------------------------------
                                    275 ; indirectly addressable internal ram data
                                    276 ;--------------------------------------------------------
                                    277 	.area ISEG    (DATA)
                                    278 ;--------------------------------------------------------
                                    279 ; absolute internal ram data
                                    280 ;--------------------------------------------------------
                                    281 	.area IABS    (ABS,DATA)
                                    282 	.area IABS    (ABS,DATA)
                                    283 ;--------------------------------------------------------
                                    284 ; bit data
                                    285 ;--------------------------------------------------------
                                    286 	.area BSEG    (BIT)
                                    287 ;--------------------------------------------------------
                                    288 ; paged external ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area PSEG    (PAG,XDATA)
                                    291 ;--------------------------------------------------------
                                    292 ; uninitialized external ram data
                                    293 ;--------------------------------------------------------
                                    294 	.area XSEG    (XDATA)
                                    295 ;--------------------------------------------------------
                                    296 ; absolute external ram data
                                    297 ;--------------------------------------------------------
                                    298 	.area XABS    (ABS,XDATA)
                                    299 ;--------------------------------------------------------
                                    300 ; initialized external ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area XISEG   (XDATA)
                                    303 	.area HOME    (CODE)
                                    304 	.area GSINIT0 (CODE)
                                    305 	.area GSINIT1 (CODE)
                                    306 	.area GSINIT2 (CODE)
                                    307 	.area GSINIT3 (CODE)
                                    308 	.area GSINIT4 (CODE)
                                    309 	.area GSINIT5 (CODE)
                                    310 	.area GSINIT  (CODE)
                                    311 	.area GSFINAL (CODE)
                                    312 	.area CSEG    (CODE)
                                    313 ;--------------------------------------------------------
                                    314 ; interrupt vector
                                    315 ;--------------------------------------------------------
                                    316 	.area HOME    (CODE)
      000000                        317 __interrupt_vect:
      000000 02r00r00         [24]  318 	ljmp	__sdcc_gsinit_startup
                                    319 ;--------------------------------------------------------
                                    320 ; global & static initialisations
                                    321 ;--------------------------------------------------------
                                    322 	.area HOME    (CODE)
                                    323 	.area GSINIT  (CODE)
                                    324 	.area GSFINAL (CODE)
                                    325 	.area GSINIT  (CODE)
                                    326 	.globl __sdcc_gsinit_startup
                                    327 	.globl __sdcc_program_startup
                                    328 	.globl __start__stack
                                    329 	.globl __mcs51_genXINIT
                                    330 	.globl __mcs51_genXRAMCLEAR
                                    331 	.globl __mcs51_genRAMCLEAR
                                    332 ;	./src/main.c:52: unsigned char patt = 0x08,patt1; // led value
      000000 75*5C 08         [24]  333 	mov	_patt,#0x08
                                    334 ;	./src/main.c:53: unsigned int op_cnt = 0;
      000003 E4               [12]  335 	clr	a
      000004 F5*5E            [12]  336 	mov	_op_cnt,a
      000006 F5*5F            [12]  337 	mov	(_op_cnt + 1),a
                                    338 ;	./src/main.c:217: unsigned char display_seg[] = {
      000008 75*61 30         [24]  339 	mov	_display_seg,#0x30
      00000B 75*62 6D         [24]  340 	mov	(_display_seg + 0x0001),#0x6d
      00000E 75*63 79         [24]  341 	mov	(_display_seg + 0x0002),#0x79
      000011 75*64 33         [24]  342 	mov	(_display_seg + 0x0003),#0x33
      000014 75*65 5B         [24]  343 	mov	(_display_seg + 0x0004),#0x5b
      000017 75*66 5F         [24]  344 	mov	(_display_seg + 0x0005),#0x5f
      00001A 75*67 70         [24]  345 	mov	(_display_seg + 0x0006),#0x70
      00001D 75*68 7F         [24]  346 	mov	(_display_seg + 0x0007),#0x7f
      000020 75*69 7B         [24]  347 	mov	(_display_seg + 0x0008),#0x7b
      000023 75*6A 7E         [24]  348 	mov	(_display_seg + 0x0009),#0x7e
      000026 75*6B 4F         [24]  349 	mov	(_display_seg + 0x000a),#0x4f
                                    350 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  351 	ljmp	__sdcc_program_startup
                                    352 ;--------------------------------------------------------
                                    353 ; Home
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area HOME    (CODE)
      000003                        357 __sdcc_program_startup:
      000003 02r02r9B         [24]  358 	ljmp	_main
                                    359 ;	return from main will return to caller
                                    360 ;--------------------------------------------------------
                                    361 ; code
                                    362 ;--------------------------------------------------------
                                    363 	.area CSEG    (CODE)
                                    364 ;------------------------------------------------------------
                                    365 ;Allocation info for local variables in function 'sendbyte'
                                    366 ;------------------------------------------------------------
                                    367 ;dat                       Allocated with name '_sendbyte_PARM_2'
                                    368 ;address                   Allocated to registers r7 
                                    369 ;i                         Allocated to registers r6 
                                    370 ;------------------------------------------------------------
                                    371 ;	./src/main.c:56: void sendbyte(unsigned char address,unsigned char dat){
                                    372 ;	-----------------------------------------
                                    373 ;	 function sendbyte
                                    374 ;	-----------------------------------------
      000000                        375 _sendbyte:
                           000007   376 	ar7 = 0x07
                           000006   377 	ar6 = 0x06
                           000005   378 	ar5 = 0x05
                           000004   379 	ar4 = 0x04
                           000003   380 	ar3 = 0x03
                           000002   381 	ar2 = 0x02
                           000001   382 	ar1 = 0x01
                           000000   383 	ar0 = 0x00
      000000 AF 82            [24]  384 	mov	r7,dpl
                                    385 ;	./src/main.c:58: for (i=0;i<8;i++)        //get last 8 bits(address)
      000002 7E 00            [12]  386 	mov	r6,#0x00
      000004                        387 00103$:
                                    388 ;	./src/main.c:60: CLK = 0;
                                    389 ;	assignBit
      000004 C2 A0            [12]  390 	clr	_P2_0
                                    391 ;	./src/main.c:61: DOUT = ( address & 0x80);   //get msb and shift left
      000006 EF               [12]  392 	mov	a,r7
      000007 23               [12]  393 	rl	a
      000008 54 01            [12]  394 	anl	a,#0x01
                                    395 ;	assignBit
      00000A 24 FF            [12]  396 	add	a,#0xff
      00000C 92 A2            [24]  397 	mov	_P2_2,c
                                    398 ;	./src/main.c:62: address <<= 1;
      00000E 8F 05            [24]  399 	mov	ar5,r7
      000010 ED               [12]  400 	mov	a,r5
      000011 2D               [12]  401 	add	a,r5
      000012 FF               [12]  402 	mov	r7,a
                                    403 ;	./src/main.c:63: CLK = 1;
                                    404 ;	assignBit
      000013 D2 A0            [12]  405 	setb	_P2_0
                                    406 ;	./src/main.c:58: for (i=0;i<8;i++)        //get last 8 bits(address)
      000015 0E               [12]  407 	inc	r6
      000016 BE 08 00         [24]  408 	cjne	r6,#0x08,00123$
      000019                        409 00123$:
      000019 40 E9            [24]  410 	jc	00103$
                                    411 ;	./src/main.c:65: for (i=0;i<8;i++)      //get first 8 bits(data)
      00001B 7F 00            [12]  412 	mov	r7,#0x00
      00001D                        413 00105$:
                                    414 ;	./src/main.c:67: CLK = 0;
                                    415 ;	assignBit
      00001D C2 A0            [12]  416 	clr	_P2_0
                                    417 ;	./src/main.c:68: DOUT=( dat & 0x80);    //get msb and shit left
      00001F E5*00            [12]  418 	mov	a,_sendbyte_PARM_2
      000021 23               [12]  419 	rl	a
      000022 54 01            [12]  420 	anl	a,#0x01
                                    421 ;	assignBit
      000024 24 FF            [12]  422 	add	a,#0xff
      000026 92 A2            [24]  423 	mov	_P2_2,c
                                    424 ;	./src/main.c:69: dat <<= 1;
      000028 E5*00            [12]  425 	mov	a,_sendbyte_PARM_2
      00002A 25 E0            [12]  426 	add	a,acc
      00002C F5*00            [12]  427 	mov	_sendbyte_PARM_2,a
                                    428 ;	./src/main.c:70: CLK = 1;
                                    429 ;	assignBit
      00002E D2 A0            [12]  430 	setb	_P2_0
                                    431 ;	./src/main.c:65: for (i=0;i<8;i++)      //get first 8 bits(data)
      000030 0F               [12]  432 	inc	r7
      000031 BF 08 00         [24]  433 	cjne	r7,#0x08,00125$
      000034                        434 00125$:
      000034 40 E7            [24]  435 	jc	00105$
                                    436 ;	./src/main.c:72: }
      000036 22               [24]  437 	ret
                                    438 ;------------------------------------------------------------
                                    439 ;Allocation info for local variables in function 'Write7219'
                                    440 ;------------------------------------------------------------
                                    441 ;dat                       Allocated with name '_Write7219_PARM_2'
                                    442 ;address                   Allocated to registers r7 
                                    443 ;cnt                       Allocated to registers r6 
                                    444 ;------------------------------------------------------------
                                    445 ;	./src/main.c:75: void Write7219(unsigned char address, unsigned char dat)
                                    446 ;	-----------------------------------------
                                    447 ;	 function Write7219
                                    448 ;	-----------------------------------------
      000037                        449 _Write7219:
      000037 AF 82            [24]  450 	mov	r7,dpl
                                    451 ;	./src/main.c:78: LOAD = 0;
                                    452 ;	assignBit
      000039 C2 A1            [12]  453 	clr	_P2_1
                                    454 ;	./src/main.c:80: for(cnt=1; cnt<=matrixnum; cnt++)       // send address and data according to the nuber of your matrix
      00003B 7E 01            [12]  455 	mov	r6,#0x01
      00003D                        456 00102$:
                                    457 ;	./src/main.c:82: sendbyte(address, dat);
      00003D 85*60*00         [24]  458 	mov	_sendbyte_PARM_2,_Write7219_PARM_2
      000040 8F 82            [24]  459 	mov	dpl,r7
      000042 C0 07            [24]  460 	push	ar7
      000044 C0 06            [24]  461 	push	ar6
      000046 12r00r00         [24]  462 	lcall	_sendbyte
      000049 D0 06            [24]  463 	pop	ar6
      00004B D0 07            [24]  464 	pop	ar7
                                    465 ;	./src/main.c:80: for(cnt=1; cnt<=matrixnum; cnt++)       // send address and data according to the nuber of your matrix
      00004D 0E               [12]  466 	inc	r6
      00004E EE               [12]  467 	mov	a,r6
      00004F 24 FE            [12]  468 	add	a,#0xff - 0x01
      000051 50 EA            [24]  469 	jnc	00102$
                                    470 ;	./src/main.c:85: LOAD = 1;                               // after the load becomes 1, will the 7-segment display display
                                    471 ;	assignBit
      000053 D2 A1            [12]  472 	setb	_P2_1
                                    473 ;	./src/main.c:86: }
      000055 22               [24]  474 	ret
                                    475 ;------------------------------------------------------------
                                    476 ;Allocation info for local variables in function 'Initial'
                                    477 ;------------------------------------------------------------
                                    478 ;i                         Allocated to registers r7 
                                    479 ;------------------------------------------------------------
                                    480 ;	./src/main.c:89: void Initial(void)
                                    481 ;	-----------------------------------------
                                    482 ;	 function Initial
                                    483 ;	-----------------------------------------
      000056                        484 _Initial:
                                    485 ;	./src/main.c:92: Write7219(SHUT_DOWN,0x01);         //normal mode(0xX1)
      000056 75*60 01         [24]  486 	mov	_Write7219_PARM_2,#0x01
      000059 75 82 0C         [24]  487 	mov	dpl,#0x0c
      00005C 12r00r37         [24]  488 	lcall	_Write7219
                                    489 ;	./src/main.c:93: Write7219(DISPLAY_TEST,0x00);
      00005F 75*60 00         [24]  490 	mov	_Write7219_PARM_2,#0x00
      000062 75 82 0F         [24]  491 	mov	dpl,#0x0f
      000065 12r00r37         [24]  492 	lcall	_Write7219
                                    493 ;	./src/main.c:94: Write7219(DECODE_MODE,0x00);       //select non-decode mode
      000068 75*60 00         [24]  494 	mov	_Write7219_PARM_2,#0x00
      00006B 75 82 09         [24]  495 	mov	dpl,#0x09
      00006E 12r00r37         [24]  496 	lcall	_Write7219
                                    497 ;	./src/main.c:95: Write7219(SCAN_LIMIT,0x07);        //use all 8 LED
      000071 75*60 07         [24]  498 	mov	_Write7219_PARM_2,#0x07
      000074 75 82 0B         [24]  499 	mov	dpl,#0x0b
      000077 12r00r37         [24]  500 	lcall	_Write7219
                                    501 ;	./src/main.c:96: Write7219(INTENSITY,0x00);         //set up intensity
      00007A 75*60 00         [24]  502 	mov	_Write7219_PARM_2,#0x00
      00007D 75 82 0A         [24]  503 	mov	dpl,#0x0a
      000080 12r00r37         [24]  504 	lcall	_Write7219
                                    505 ;	./src/main.c:97: for(i=1;i<=8;i++){
      000083 7F 01            [12]  506 	mov	r7,#0x01
      000085                        507 00102$:
                                    508 ;	./src/main.c:98: Write7219(i,0x00);   //turn off all LED
      000085 75*60 00         [24]  509 	mov	_Write7219_PARM_2,#0x00
      000088 8F 82            [24]  510 	mov	dpl,r7
      00008A C0 07            [24]  511 	push	ar7
      00008C 12r00r37         [24]  512 	lcall	_Write7219
      00008F D0 07            [24]  513 	pop	ar7
                                    514 ;	./src/main.c:97: for(i=1;i<=8;i++){
      000091 0F               [12]  515 	inc	r7
      000092 EF               [12]  516 	mov	a,r7
      000093 24 F7            [12]  517 	add	a,#0xff - 0x08
      000095 50 EE            [24]  518 	jnc	00102$
                                    519 ;	./src/main.c:100: }
      000097 22               [24]  520 	ret
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'draw'
                                    523 ;------------------------------------------------------------
                                    524 ;picture                   Allocated to registers r5 r6 r7 
                                    525 ;i                         Allocated to registers r7 
                                    526 ;------------------------------------------------------------
                                    527 ;	./src/main.c:103: void draw(unsigned char *picture){
                                    528 ;	-----------------------------------------
                                    529 ;	 function draw
                                    530 ;	-----------------------------------------
      000098                        531 _draw:
      000098 AD 82            [24]  532 	mov	r5,dpl
      00009A AE 83            [24]  533 	mov	r6,dph
      00009C AF F0            [24]  534 	mov	r7,b
                                    535 ;	./src/main.c:106: if(picture == display){
      00009E 74r54            [12]  536 	mov	a,#_display
      0000A0 C0 E0            [24]  537 	push	acc
      0000A2 74s00            [12]  538 	mov	a,#(_display >> 8)
      0000A4 C0 E0            [24]  539 	push	acc
      0000A6 74 40            [12]  540 	mov	a,#0x40
      0000A8 C0 E0            [24]  541 	push	acc
      0000AA 8D 82            [24]  542 	mov	dpl,r5
      0000AC 8E 83            [24]  543 	mov	dph,r6
      0000AE 8F F0            [24]  544 	mov	b,r7
      0000B0 12r00r00         [24]  545 	lcall	___gptr_cmp
      0000B3 15 81            [12]  546 	dec	sp
      0000B5 15 81            [12]  547 	dec	sp
      0000B7 15 81            [12]  548 	dec	sp
      0000B9 60 02            [24]  549 	jz	00118$
      0000BB 80 0C            [24]  550 	sjmp	00109$
      0000BD                        551 00118$:
                                    552 ;	./src/main.c:107: patt = 0x80;
      0000BD 75*5C 80         [24]  553 	mov	_patt,#0x80
                                    554 ;	./src/main.c:108: led = ~patt;
      0000C0 75 90 7F         [24]  555 	mov	_P1,#0x7f
                                    556 ;	./src/main.c:109: delay_ms(20);
      0000C3 90 00 14         [24]  557 	mov	dptr,#0x0014
      0000C6 12r00r00         [24]  558 	lcall	_delay_ms
                                    559 ;	./src/main.c:111: for(i=1; i<=8; i++) {
      0000C9                        560 00109$:
      0000C9 7F 01            [12]  561 	mov	r7,#0x01
      0000CB                        562 00104$:
                                    563 ;	./src/main.c:112: Write7219(i, display[i-1]);
      0000CB 8F 06            [24]  564 	mov	ar6,r7
      0000CD EE               [12]  565 	mov	a,r6
      0000CE 14               [12]  566 	dec	a
      0000CF 24r54            [12]  567 	add	a,#_display
      0000D1 F9               [12]  568 	mov	r1,a
      0000D2 87*60            [24]  569 	mov	_Write7219_PARM_2,@r1
      0000D4 8F 82            [24]  570 	mov	dpl,r7
      0000D6 C0 07            [24]  571 	push	ar7
      0000D8 12r00r37         [24]  572 	lcall	_Write7219
      0000DB D0 07            [24]  573 	pop	ar7
                                    574 ;	./src/main.c:111: for(i=1; i<=8; i++) {
      0000DD 0F               [12]  575 	inc	r7
      0000DE EF               [12]  576 	mov	a,r7
      0000DF 24 F7            [12]  577 	add	a,#0xff - 0x08
      0000E1 50 E8            [24]  578 	jnc	00104$
                                    579 ;	./src/main.c:115: }
      0000E3 22               [24]  580 	ret
                                    581 ;------------------------------------------------------------
                                    582 ;Allocation info for local variables in function 'scan_row'
                                    583 ;------------------------------------------------------------
                                    584 ;row                       Allocated to registers r6 r7 
                                    585 ;------------------------------------------------------------
                                    586 ;	./src/main.c:117: void scan_row(unsigned int row)
                                    587 ;	-----------------------------------------
                                    588 ;	 function scan_row
                                    589 ;	-----------------------------------------
      0000E4                        590 _scan_row:
      0000E4 AE 82            [24]  591 	mov	r6,dpl
      0000E6 AF 83            [24]  592 	mov	r7,dph
                                    593 ;	./src/main.c:119: switch (row)
      0000E8 C3               [12]  594 	clr	c
      0000E9 74 03            [12]  595 	mov	a,#0x03
      0000EB 9E               [12]  596 	subb	a,r6
      0000EC E4               [12]  597 	clr	a
      0000ED 9F               [12]  598 	subb	a,r7
      0000EE 40 31            [24]  599 	jc	00107$
      0000F0 EE               [12]  600 	mov	a,r6
      0000F1 2E               [12]  601 	add	a,r6
                                    602 ;	./src/main.c:121: case 0:
      0000F2 90r00rF6         [24]  603 	mov	dptr,#00114$
      0000F5 73               [24]  604 	jmp	@a+dptr
      0000F6                        605 00114$:
      0000F6 80 06            [24]  606 	sjmp	00101$
      0000F8 80 0D            [24]  607 	sjmp	00102$
      0000FA 80 14            [24]  608 	sjmp	00103$
      0000FC 80 1B            [24]  609 	sjmp	00104$
      0000FE                        610 00101$:
                                    611 ;	./src/main.c:122: OUTPUT1 = 0; // row1 output 0
                                    612 ;	assignBit
      0000FE C2 86            [12]  613 	clr	_P0_6
                                    614 ;	./src/main.c:123: OUTPUT2 = 1; // row2 output 1
                                    615 ;	assignBit
      000100 D2 85            [12]  616 	setb	_P0_5
                                    617 ;	./src/main.c:124: OUTPUT3 = 1; // row3 output 1
                                    618 ;	assignBit
      000102 D2 84            [12]  619 	setb	_P0_4
                                    620 ;	./src/main.c:125: OUTPUT0 = 1; // row0 output 1
                                    621 ;	assignBit
      000104 D2 83            [12]  622 	setb	_P0_3
                                    623 ;	./src/main.c:126: break;
                                    624 ;	./src/main.c:127: case 1:
      000106 22               [24]  625 	ret
      000107                        626 00102$:
                                    627 ;	./src/main.c:128: OUTPUT1 = 1; // row1 output 1
                                    628 ;	assignBit
      000107 D2 86            [12]  629 	setb	_P0_6
                                    630 ;	./src/main.c:129: OUTPUT2 = 0; // row2 output 0
                                    631 ;	assignBit
      000109 C2 85            [12]  632 	clr	_P0_5
                                    633 ;	./src/main.c:130: OUTPUT3 = 1; // row3 output 1
                                    634 ;	assignBit
      00010B D2 84            [12]  635 	setb	_P0_4
                                    636 ;	./src/main.c:131: OUTPUT0 = 1; // row0 output 1
                                    637 ;	assignBit
      00010D D2 83            [12]  638 	setb	_P0_3
                                    639 ;	./src/main.c:132: break;
                                    640 ;	./src/main.c:133: case 2:
      00010F 22               [24]  641 	ret
      000110                        642 00103$:
                                    643 ;	./src/main.c:134: OUTPUT1 = 1; // row1 output 1
                                    644 ;	assignBit
      000110 D2 86            [12]  645 	setb	_P0_6
                                    646 ;	./src/main.c:135: OUTPUT2 = 1; // row2 output 1
                                    647 ;	assignBit
      000112 D2 85            [12]  648 	setb	_P0_5
                                    649 ;	./src/main.c:136: OUTPUT3 = 0; // row3 output 0
                                    650 ;	assignBit
      000114 C2 84            [12]  651 	clr	_P0_4
                                    652 ;	./src/main.c:137: OUTPUT0 = 1; // row0 output 1
                                    653 ;	assignBit
      000116 D2 83            [12]  654 	setb	_P0_3
                                    655 ;	./src/main.c:138: break;
                                    656 ;	./src/main.c:139: case 3:
      000118 22               [24]  657 	ret
      000119                        658 00104$:
                                    659 ;	./src/main.c:140: OUTPUT1 = 1; // row1 output 1
                                    660 ;	assignBit
      000119 D2 86            [12]  661 	setb	_P0_6
                                    662 ;	./src/main.c:141: OUTPUT2 = 1; // row2 output 1
                                    663 ;	assignBit
      00011B D2 85            [12]  664 	setb	_P0_5
                                    665 ;	./src/main.c:142: OUTPUT3 = 1; // row3 output 1
                                    666 ;	assignBit
      00011D D2 84            [12]  667 	setb	_P0_4
                                    668 ;	./src/main.c:143: OUTPUT0 = 0; // row0 output 0
                                    669 ;	assignBit
      00011F C2 83            [12]  670 	clr	_P0_3
                                    671 ;	./src/main.c:147: }
      000121                        672 00107$:
                                    673 ;	./src/main.c:148: }
      000121 22               [24]  674 	ret
                                    675 ;------------------------------------------------------------
                                    676 ;Allocation info for local variables in function 'read_curINPUT'
                                    677 ;------------------------------------------------------------
                                    678 ;i                         Allocated to registers r6 r7 
                                    679 ;------------------------------------------------------------
                                    680 ;	./src/main.c:150: void read_curINPUT(void)
                                    681 ;	-----------------------------------------
                                    682 ;	 function read_curINPUT
                                    683 ;	-----------------------------------------
      000122                        684 _read_curINPUT:
                                    685 ;	./src/main.c:152: for (int i = 0; i < 4; i++)
      000122 7E 00            [12]  686 	mov	r6,#0x00
      000124 7F 00            [12]  687 	mov	r7,#0x00
      000126                        688 00106$:
      000126 C3               [12]  689 	clr	c
      000127 EE               [12]  690 	mov	a,r6
      000128 94 04            [12]  691 	subb	a,#0x04
      00012A EF               [12]  692 	mov	a,r7
      00012B 64 80            [12]  693 	xrl	a,#0x80
      00012D 94 80            [12]  694 	subb	a,#0x80
      00012F 50 6C            [24]  695 	jnc	00104$
                                    696 ;	./src/main.c:154: scan_row(i);
      000131 8E 82            [24]  697 	mov	dpl,r6
      000133 8F 83            [24]  698 	mov	dph,r7
      000135 C0 07            [24]  699 	push	ar7
      000137 C0 06            [24]  700 	push	ar6
      000139 12r00rE4         [24]  701 	lcall	_scan_row
      00013C D0 06            [24]  702 	pop	ar6
      00013E D0 07            [24]  703 	pop	ar7
                                    704 ;	./src/main.c:155: if(i==3)
      000140 BE 03 10         [24]  705 	cjne	r6,#0x03,00102$
      000143 BF 00 0D         [24]  706 	cjne	r7,#0x00,00102$
                                    707 ;	./src/main.c:156: curINPUT[9] = INPUT2;
      000146 A2 81            [12]  708 	mov	c,_P0_1
      000148 E4               [12]  709 	clr	a
      000149 33               [12]  710 	rlc	a
      00014A FC               [12]  711 	mov	r4,a
      00014B 7D 00            [12]  712 	mov	r5,#0x00
      00014D 8C*12            [24]  713 	mov	((_curINPUT + 0x0012) + 0),r4
      00014F 8D*13            [24]  714 	mov	((_curINPUT + 0x0012) + 1),r5
      000151 80 42            [24]  715 	sjmp	00107$
      000153                        716 00102$:
                                    717 ;	./src/main.c:158: curINPUT[i * 3 + 0] = INPUT1;
      000153 8E 05            [24]  718 	mov	ar5,r6
      000155 ED               [12]  719 	mov	a,r5
      000156 75 F0 03         [24]  720 	mov	b,#0x03
      000159 A4               [48]  721 	mul	ab
      00015A FD               [12]  722 	mov	r5,a
      00015B 25 E0            [12]  723 	add	a,acc
      00015D 24r00            [12]  724 	add	a,#_curINPUT
      00015F F9               [12]  725 	mov	r1,a
      000160 A2 80            [12]  726 	mov	c,_P0_0
      000162 E4               [12]  727 	clr	a
      000163 33               [12]  728 	rlc	a
      000164 FB               [12]  729 	mov	r3,a
      000165 7C 00            [12]  730 	mov	r4,#0x00
      000167 A7 03            [24]  731 	mov	@r1,ar3
      000169 09               [12]  732 	inc	r1
      00016A A7 04            [24]  733 	mov	@r1,ar4
      00016C 19               [12]  734 	dec	r1
                                    735 ;	./src/main.c:159: curINPUT[i * 3 + 1] = INPUT2;
      00016D ED               [12]  736 	mov	a,r5
      00016E 04               [12]  737 	inc	a
      00016F 25 E0            [12]  738 	add	a,acc
      000171 24r00            [12]  739 	add	a,#_curINPUT
      000173 F9               [12]  740 	mov	r1,a
      000174 A2 81            [12]  741 	mov	c,_P0_1
      000176 E4               [12]  742 	clr	a
      000177 33               [12]  743 	rlc	a
      000178 FB               [12]  744 	mov	r3,a
      000179 7C 00            [12]  745 	mov	r4,#0x00
      00017B A7 03            [24]  746 	mov	@r1,ar3
      00017D 09               [12]  747 	inc	r1
      00017E A7 04            [24]  748 	mov	@r1,ar4
      000180 19               [12]  749 	dec	r1
                                    750 ;	./src/main.c:160: curINPUT[i * 3 + 2] = INPUT3;
      000181 0D               [12]  751 	inc	r5
      000182 0D               [12]  752 	inc	r5
      000183 ED               [12]  753 	mov	a,r5
      000184 2D               [12]  754 	add	a,r5
      000185 24r00            [12]  755 	add	a,#_curINPUT
      000187 F9               [12]  756 	mov	r1,a
      000188 A2 82            [12]  757 	mov	c,_P0_2
      00018A E4               [12]  758 	clr	a
      00018B 33               [12]  759 	rlc	a
      00018C FC               [12]  760 	mov	r4,a
      00018D 7D 00            [12]  761 	mov	r5,#0x00
      00018F A7 04            [24]  762 	mov	@r1,ar4
      000191 09               [12]  763 	inc	r1
      000192 A7 05            [24]  764 	mov	@r1,ar5
      000194 19               [12]  765 	dec	r1
      000195                        766 00107$:
                                    767 ;	./src/main.c:152: for (int i = 0; i < 4; i++)
      000195 0E               [12]  768 	inc	r6
      000196 BE 00 01         [24]  769 	cjne	r6,#0x00,00126$
      000199 0F               [12]  770 	inc	r7
      00019A                        771 00126$:
      00019A 02r01r26         [24]  772 	ljmp	00106$
      00019D                        773 00104$:
                                    774 ;	./src/main.c:163: curINPUT[10] = but1;
      00019D A2 B2            [12]  775 	mov	c,_INT0
      00019F E4               [12]  776 	clr	a
      0001A0 33               [12]  777 	rlc	a
      0001A1 FE               [12]  778 	mov	r6,a
      0001A2 7F 00            [12]  779 	mov	r7,#0x00
      0001A4 8E*14            [24]  780 	mov	((_curINPUT + 0x0014) + 0),r6
      0001A6 8F*15            [24]  781 	mov	((_curINPUT + 0x0014) + 1),r7
                                    782 ;	./src/main.c:164: curINPUT[11] = but2;
      0001A8 A2 B3            [12]  783 	mov	c,_INT1
      0001AA E4               [12]  784 	clr	a
      0001AB 33               [12]  785 	rlc	a
      0001AC FE               [12]  786 	mov	r6,a
      0001AD 7F 00            [12]  787 	mov	r7,#0x00
      0001AF 8E*16            [24]  788 	mov	((_curINPUT + 0x0016) + 0),r6
      0001B1 8F*17            [24]  789 	mov	((_curINPUT + 0x0016) + 1),r7
                                    790 ;	./src/main.c:165: curINPUT[12] = but3;
      0001B3 A2 A0            [12]  791 	mov	c,_P2_0
      0001B5 E4               [12]  792 	clr	a
      0001B6 33               [12]  793 	rlc	a
      0001B7 FE               [12]  794 	mov	r6,a
      0001B8 7F 00            [12]  795 	mov	r7,#0x00
      0001BA 8E*18            [24]  796 	mov	((_curINPUT + 0x0018) + 0),r6
      0001BC 8F*19            [24]  797 	mov	((_curINPUT + 0x0018) + 1),r7
                                    798 ;	./src/main.c:166: curINPUT[13] = but4;
      0001BE A2 A1            [12]  799 	mov	c,_P2_1
      0001C0 E4               [12]  800 	clr	a
      0001C1 33               [12]  801 	rlc	a
      0001C2 FE               [12]  802 	mov	r6,a
      0001C3 7F 00            [12]  803 	mov	r7,#0x00
      0001C5 8E*1A            [24]  804 	mov	((_curINPUT + 0x001a) + 0),r6
      0001C7 8F*1B            [24]  805 	mov	((_curINPUT + 0x001a) + 1),r7
                                    806 ;	./src/main.c:167: }
      0001C9 22               [24]  807 	ret
                                    808 ;------------------------------------------------------------
                                    809 ;Allocation info for local variables in function 'sequence'
                                    810 ;------------------------------------------------------------
                                    811 ;a                         Allocated to registers r6 r7 
                                    812 ;------------------------------------------------------------
                                    813 ;	./src/main.c:169: void sequence(void){
                                    814 ;	-----------------------------------------
                                    815 ;	 function sequence
                                    816 ;	-----------------------------------------
      0001CA                        817 _sequence:
                                    818 ;	./src/main.c:170: for(int a = 7; a > 0; a--){
      0001CA 7E 07            [12]  819 	mov	r6,#0x07
      0001CC 7F 00            [12]  820 	mov	r7,#0x00
      0001CE                        821 00103$:
      0001CE C3               [12]  822 	clr	c
      0001CF E4               [12]  823 	clr	a
      0001D0 9E               [12]  824 	subb	a,r6
      0001D1 74 80            [12]  825 	mov	a,#(0x00 ^ 0x80)
      0001D3 8F F0            [24]  826 	mov	b,r7
      0001D5 63 F0 80         [24]  827 	xrl	b,#0x80
      0001D8 95 F0            [12]  828 	subb	a,b
      0001DA 50 16            [24]  829 	jnc	00101$
                                    830 ;	./src/main.c:171: display[a] = display[a-1];
      0001DC EE               [12]  831 	mov	a,r6
      0001DD 24r54            [12]  832 	add	a,#_display
      0001DF F9               [12]  833 	mov	r1,a
      0001E0 8E 05            [24]  834 	mov	ar5,r6
      0001E2 ED               [12]  835 	mov	a,r5
      0001E3 14               [12]  836 	dec	a
      0001E4 24r54            [12]  837 	add	a,#_display
      0001E6 F8               [12]  838 	mov	r0,a
      0001E7 86 05            [24]  839 	mov	ar5,@r0
      0001E9 A7 05            [24]  840 	mov	@r1,ar5
                                    841 ;	./src/main.c:170: for(int a = 7; a > 0; a--){
      0001EB 1E               [12]  842 	dec	r6
      0001EC BE FF 01         [24]  843 	cjne	r6,#0xff,00117$
      0001EF 1F               [12]  844 	dec	r7
      0001F0                        845 00117$:
      0001F0 80 DC            [24]  846 	sjmp	00103$
      0001F2                        847 00101$:
                                    848 ;	./src/main.c:174: delay_ms(100);
      0001F2 90 00 64         [24]  849 	mov	dptr,#0x0064
                                    850 ;	./src/main.c:175: }
      0001F5 02r00r00         [24]  851 	ljmp	_delay_ms
                                    852 ;------------------------------------------------------------
                                    853 ;Allocation info for local variables in function 'func_call'
                                    854 ;------------------------------------------------------------
                                    855 ;cmd                       Allocated to registers r6 r7 
                                    856 ;a                         Allocated to registers r6 r7 
                                    857 ;------------------------------------------------------------
                                    858 ;	./src/main.c:177: void func_call(unsigned int cmd){
                                    859 ;	-----------------------------------------
                                    860 ;	 function func_call
                                    861 ;	-----------------------------------------
      0001F8                        862 _func_call:
      0001F8 AE 82            [24]  863 	mov	r6,dpl
      0001FA AF 83            [24]  864 	mov	r7,dph
                                    865 ;	./src/main.c:179: switch (cmd)
      0001FC BE 0A 05         [24]  866 	cjne	r6,#0x0a,00151$
      0001FF BF 00 02         [24]  867 	cjne	r7,#0x00,00151$
      000202 80 1A            [24]  868 	sjmp	00101$
      000204                        869 00151$:
      000204 BE 0B 05         [24]  870 	cjne	r6,#0x0b,00152$
      000207 BF 00 02         [24]  871 	cjne	r7,#0x00,00152$
      00020A 80 32            [24]  872 	sjmp	00107$
      00020C                        873 00152$:
      00020C BE 0C 05         [24]  874 	cjne	r6,#0x0c,00153$
      00020F BF 00 02         [24]  875 	cjne	r7,#0x00,00153$
      000212 80 36            [24]  876 	sjmp	00125$
      000214                        877 00153$:
      000214 BE 0D 06         [24]  878 	cjne	r6,#0x0d,00154$
      000217 BF 00 03         [24]  879 	cjne	r7,#0x00,00154$
      00021A 02r02r8F         [24]  880 	ljmp	00110$
      00021D                        881 00154$:
      00021D 22               [24]  882 	ret
                                    883 ;	./src/main.c:181: case 10:	//op
      00021E                        884 00101$:
                                    885 ;	./src/main.c:182: if(patt == 0x80)
      00021E 74 80            [12]  886 	mov	a,#0x80
      000220 B5*5C 05         [24]  887 	cjne	a,_patt,00105$
                                    888 ;	./src/main.c:183: patt = 0x08;
      000223 75*5C 08         [24]  889 	mov	_patt,#0x08
      000226 80 07            [24]  890 	sjmp	00106$
      000228                        891 00105$:
                                    892 ;	./src/main.c:184: else if (patt == 0x00)
      000228 E5*5C            [12]  893 	mov	a,_patt
      00022A 70 03            [24]  894 	jnz	00106$
                                    895 ;	./src/main.c:185: patt = 0x08;
      00022C 75*5C 08         [24]  896 	mov	_patt,#0x08
      00022F                        897 00106$:
                                    898 ;	./src/main.c:187: patt = patt << 1;
      00022F E5*5C            [12]  899 	mov	a,_patt
      000231 25 E0            [12]  900 	add	a,acc
                                    901 ;	./src/main.c:188: led = ~patt;
      000233 F5*5C            [12]  902 	mov	_patt,a
      000235 F4               [12]  903 	cpl	a
      000236 F5 90            [12]  904 	mov	_P1,a
                                    905 ;	./src/main.c:189: delay_ms(20);
      000238 90 00 14         [24]  906 	mov	dptr,#0x0014
                                    907 ;	./src/main.c:190: break;
                                    908 ;	./src/main.c:191: case 11:	//back <-
      00023B 02r00r00         [24]  909 	ljmp	_delay_ms
      00023E                        910 00107$:
                                    911 ;	./src/main.c:192: patt1 = 0x01;
      00023E 75*5D 01         [24]  912 	mov	_patt1,#0x01
                                    913 ;	./src/main.c:193: led = ~patt1;
      000241 75 90 FE         [24]  914 	mov	_P1,#0xfe
                                    915 ;	./src/main.c:194: delay_ms(20);
      000244 90 00 14         [24]  916 	mov	dptr,#0x0014
                                    917 ;	./src/main.c:195: break;
                                    918 ;	./src/main.c:197: for(int a = 0; a < 8; a++){
      000247 02r00r00         [24]  919 	ljmp	_delay_ms
      00024A                        920 00125$:
      00024A 7E 00            [12]  921 	mov	r6,#0x00
      00024C 7F 00            [12]  922 	mov	r7,#0x00
      00024E                        923 00114$:
      00024E C3               [12]  924 	clr	c
      00024F EE               [12]  925 	mov	a,r6
      000250 94 08            [12]  926 	subb	a,#0x08
      000252 EF               [12]  927 	mov	a,r7
      000253 64 80            [12]  928 	xrl	a,#0x80
      000255 94 80            [12]  929 	subb	a,#0x80
      000257 50 21            [24]  930 	jnc	00109$
                                    931 ;	./src/main.c:198: display[a] = 0x00;
      000259 EE               [12]  932 	mov	a,r6
      00025A 24r54            [12]  933 	add	a,#_display
      00025C F8               [12]  934 	mov	r0,a
      00025D 76 00            [12]  935 	mov	@r0,#0x00
                                    936 ;	./src/main.c:199: Write7219(a+1,0x00);
      00025F 8E 05            [24]  937 	mov	ar5,r6
      000261 ED               [12]  938 	mov	a,r5
      000262 04               [12]  939 	inc	a
      000263 F5 82            [12]  940 	mov	dpl,a
      000265 75*60 00         [24]  941 	mov	_Write7219_PARM_2,#0x00
      000268 C0 07            [24]  942 	push	ar7
      00026A C0 06            [24]  943 	push	ar6
      00026C 12r00r37         [24]  944 	lcall	_Write7219
      00026F D0 06            [24]  945 	pop	ar6
      000271 D0 07            [24]  946 	pop	ar7
                                    947 ;	./src/main.c:197: for(int a = 0; a < 8; a++){
      000273 0E               [12]  948 	inc	r6
      000274 BE 00 D7         [24]  949 	cjne	r6,#0x00,00114$
      000277 0F               [12]  950 	inc	r7
      000278 80 D4            [24]  951 	sjmp	00114$
      00027A                        952 00109$:
                                    953 ;	./src/main.c:201: Write7219(0x01,0x08);
      00027A 75*60 08         [24]  954 	mov	_Write7219_PARM_2,#0x08
      00027D 75 82 01         [24]  955 	mov	dpl,#0x01
      000280 12r00r37         [24]  956 	lcall	_Write7219
                                    957 ;	./src/main.c:202: patt1 = 0x02;
      000283 75*5D 02         [24]  958 	mov	_patt1,#0x02
                                    959 ;	./src/main.c:203: led = ~patt1;
      000286 75 90 FD         [24]  960 	mov	_P1,#0xfd
                                    961 ;	./src/main.c:204: delay_ms(20);
      000289 90 00 14         [24]  962 	mov	dptr,#0x0014
                                    963 ;	./src/main.c:205: break;
                                    964 ;	./src/main.c:206: case 13:	//equal=
      00028C 02r00r00         [24]  965 	ljmp	_delay_ms
      00028F                        966 00110$:
                                    967 ;	./src/main.c:207: patt1 = 0x04;
      00028F 75*5D 04         [24]  968 	mov	_patt1,#0x04
                                    969 ;	./src/main.c:208: led = ~patt1;
      000292 75 90 FB         [24]  970 	mov	_P1,#0xfb
                                    971 ;	./src/main.c:209: delay_ms(20);
      000295 90 00 14         [24]  972 	mov	dptr,#0x0014
                                    973 ;	./src/main.c:213: }
                                    974 ;	./src/main.c:214: }
      000298 02r00r00         [24]  975 	ljmp	_delay_ms
                                    976 ;------------------------------------------------------------
                                    977 ;Allocation info for local variables in function 'main'
                                    978 ;------------------------------------------------------------
                                    979 ;i                         Allocated to registers r6 r7 
                                    980 ;i                         Allocated to registers r6 r7 
                                    981 ;------------------------------------------------------------
                                    982 ;	./src/main.c:233: void main(void)
                                    983 ;	-----------------------------------------
                                    984 ;	 function main
                                    985 ;	-----------------------------------------
      00029B                        986 _main:
                                    987 ;	./src/main.c:236: Initial();
      00029B 12r00r56         [24]  988 	lcall	_Initial
                                    989 ;	./src/main.c:237: for (int i = 0; i < 14; i++)
      00029E 7E 00            [12]  990 	mov	r6,#0x00
      0002A0 7F 00            [12]  991 	mov	r7,#0x00
      0002A2                        992 00127$:
      0002A2 C3               [12]  993 	clr	c
      0002A3 EE               [12]  994 	mov	a,r6
      0002A4 94 0E            [12]  995 	subb	a,#0x0e
      0002A6 EF               [12]  996 	mov	a,r7
      0002A7 64 80            [12]  997 	xrl	a,#0x80
      0002A9 94 80            [12]  998 	subb	a,#0x80
      0002AB 50 27            [24]  999 	jnc	00101$
                                   1000 ;	./src/main.c:239: curINPUT[i] = LEVEL_HIGH;
      0002AD EE               [12] 1001 	mov	a,r6
      0002AE 2E               [12] 1002 	add	a,r6
      0002AF FC               [12] 1003 	mov	r4,a
      0002B0 EF               [12] 1004 	mov	a,r7
      0002B1 33               [12] 1005 	rlc	a
      0002B2 EC               [12] 1006 	mov	a,r4
      0002B3 24r00            [12] 1007 	add	a,#_curINPUT
      0002B5 F8               [12] 1008 	mov	r0,a
      0002B6 76 01            [12] 1009 	mov	@r0,#0x01
      0002B8 08               [12] 1010 	inc	r0
      0002B9 76 00            [12] 1011 	mov	@r0,#0x00
                                   1012 ;	./src/main.c:240: state[i] = BTN_RELEASED;
      0002BB EC               [12] 1013 	mov	a,r4
      0002BC 24r1C            [12] 1014 	add	a,#_state
      0002BE F8               [12] 1015 	mov	r0,a
      0002BF 76 00            [12] 1016 	mov	@r0,#0x00
      0002C1 08               [12] 1017 	inc	r0
      0002C2 76 00            [12] 1018 	mov	@r0,#0x00
                                   1019 ;	./src/main.c:241: prestate[i] = BTN_RELEASED;
      0002C4 EC               [12] 1020 	mov	a,r4
      0002C5 24r38            [12] 1021 	add	a,#_prestate
      0002C7 F8               [12] 1022 	mov	r0,a
      0002C8 76 00            [12] 1023 	mov	@r0,#0x00
      0002CA 08               [12] 1024 	inc	r0
      0002CB 76 00            [12] 1025 	mov	@r0,#0x00
                                   1026 ;	./src/main.c:237: for (int i = 0; i < 14; i++)
      0002CD 0E               [12] 1027 	inc	r6
      0002CE BE 00 D1         [24] 1028 	cjne	r6,#0x00,00127$
      0002D1 0F               [12] 1029 	inc	r7
      0002D2 80 CE            [24] 1030 	sjmp	00127$
      0002D4                       1031 00101$:
                                   1032 ;	./src/main.c:243: func_call(12);
      0002D4 90 00 0C         [24] 1033 	mov	dptr,#0x000c
      0002D7 12r01rF8         [24] 1034 	lcall	_func_call
                                   1035 ;	./src/main.c:245: while(1)
      0002DA                       1036 00124$:
                                   1037 ;	./src/main.c:247: delay_ms(20);
      0002DA 90 00 14         [24] 1038 	mov	dptr,#0x0014
      0002DD 12r00r00         [24] 1039 	lcall	_delay_ms
                                   1040 ;	./src/main.c:250: read_curINPUT();
      0002E0 12r01r22         [24] 1041 	lcall	_read_curINPUT
                                   1042 ;	./src/main.c:251: for (int i = 0; i < 14; i++)
      0002E3 7E 00            [12] 1043 	mov	r6,#0x00
      0002E5 7F 00            [12] 1044 	mov	r7,#0x00
      0002E7                       1045 00130$:
      0002E7 C3               [12] 1046 	clr	c
      0002E8 EE               [12] 1047 	mov	a,r6
      0002E9 94 0E            [12] 1048 	subb	a,#0x0e
      0002EB EF               [12] 1049 	mov	a,r7
      0002EC 64 80            [12] 1050 	xrl	a,#0x80
      0002EE 94 80            [12] 1051 	subb	a,#0x80
      0002F0 50 E8            [24] 1052 	jnc	00124$
                                   1053 ;	./src/main.c:254: switch (state[i])
      0002F2 EE               [12] 1054 	mov	a,r6
      0002F3 2E               [12] 1055 	add	a,r6
      0002F4 FC               [12] 1056 	mov	r4,a
      0002F5 EF               [12] 1057 	mov	a,r7
      0002F6 33               [12] 1058 	rlc	a
      0002F7 FD               [12] 1059 	mov	r5,a
      0002F8 EC               [12] 1060 	mov	a,r4
      0002F9 24r1C            [12] 1061 	add	a,#_state
      0002FB F9               [12] 1062 	mov	r1,a
      0002FC 87 02            [24] 1063 	mov	ar2,@r1
      0002FE 09               [12] 1064 	inc	r1
      0002FF 87 03            [24] 1065 	mov	ar3,@r1
      000301 19               [12] 1066 	dec	r1
      000302 BA 00 05         [24] 1067 	cjne	r2,#0x00,00194$
      000305 BB 00 02         [24] 1068 	cjne	r3,#0x00,00194$
      000308 80 10            [24] 1069 	sjmp	00102$
      00030A                       1070 00194$:
      00030A BA 01 05         [24] 1071 	cjne	r2,#0x01,00195$
      00030D BB 00 02         [24] 1072 	cjne	r3,#0x00,00195$
      000310 80 26            [24] 1073 	sjmp	00106$
      000312                       1074 00195$:
                                   1075 ;	./src/main.c:256: case BTN_RELEASED:
      000312 BA 02 5D         [24] 1076 	cjne	r2,#0x02,00115$
      000315 BB 00 5A         [24] 1077 	cjne	r3,#0x00,00115$
      000318 80 3C            [24] 1078 	sjmp	00110$
      00031A                       1079 00102$:
                                   1080 ;	./src/main.c:257: if (curINPUT[i] == LEVEL_LOW)
      00031A EC               [12] 1081 	mov	a,r4
      00031B 24r00            [12] 1082 	add	a,#_curINPUT
      00031D F8               [12] 1083 	mov	r0,a
      00031E 86 02            [24] 1084 	mov	ar2,@r0
      000320 08               [12] 1085 	inc	r0
      000321 86 03            [24] 1086 	mov	ar3,@r0
      000323 18               [12] 1087 	dec	r0
      000324 EA               [12] 1088 	mov	a,r2
      000325 4B               [12] 1089 	orl	a,r3
      000326 70 08            [24] 1090 	jnz	00104$
                                   1091 ;	./src/main.c:258: state[i] = BTN_DEBOUNCED;
      000328 77 01            [12] 1092 	mov	@r1,#0x01
      00032A 09               [12] 1093 	inc	r1
      00032B 77 00            [12] 1094 	mov	@r1,#0x00
      00032D 19               [12] 1095 	dec	r1
      00032E 80 42            [24] 1096 	sjmp	00115$
      000330                       1097 00104$:
                                   1098 ;	./src/main.c:260: state[i] = BTN_RELEASED;
      000330 77 00            [12] 1099 	mov	@r1,#0x00
      000332 09               [12] 1100 	inc	r1
      000333 77 00            [12] 1101 	mov	@r1,#0x00
      000335 19               [12] 1102 	dec	r1
                                   1103 ;	./src/main.c:261: break;
                                   1104 ;	./src/main.c:262: case BTN_DEBOUNCED:
      000336 80 3A            [24] 1105 	sjmp	00115$
      000338                       1106 00106$:
                                   1107 ;	./src/main.c:263: if (curINPUT[i] == LEVEL_LOW)
      000338 EC               [12] 1108 	mov	a,r4
      000339 24r00            [12] 1109 	add	a,#_curINPUT
      00033B F8               [12] 1110 	mov	r0,a
      00033C 86 02            [24] 1111 	mov	ar2,@r0
      00033E 08               [12] 1112 	inc	r0
      00033F 86 03            [24] 1113 	mov	ar3,@r0
      000341 18               [12] 1114 	dec	r0
      000342 EA               [12] 1115 	mov	a,r2
      000343 4B               [12] 1116 	orl	a,r3
      000344 70 08            [24] 1117 	jnz	00108$
                                   1118 ;	./src/main.c:264: state[i] = BTN_PRESSED;
      000346 77 02            [12] 1119 	mov	@r1,#0x02
      000348 09               [12] 1120 	inc	r1
      000349 77 00            [12] 1121 	mov	@r1,#0x00
      00034B 19               [12] 1122 	dec	r1
      00034C 80 24            [24] 1123 	sjmp	00115$
      00034E                       1124 00108$:
                                   1125 ;	./src/main.c:266: state[i] = BTN_RELEASED;
      00034E 77 00            [12] 1126 	mov	@r1,#0x00
      000350 09               [12] 1127 	inc	r1
      000351 77 00            [12] 1128 	mov	@r1,#0x00
      000353 19               [12] 1129 	dec	r1
                                   1130 ;	./src/main.c:267: break;
                                   1131 ;	./src/main.c:268: case BTN_PRESSED:
      000354 80 1C            [24] 1132 	sjmp	00115$
      000356                       1133 00110$:
                                   1134 ;	./src/main.c:269: if (curINPUT[i] == LEVEL_LOW)
      000356 EC               [12] 1135 	mov	a,r4
      000357 24r00            [12] 1136 	add	a,#_curINPUT
      000359 F8               [12] 1137 	mov	r0,a
      00035A 86 04            [24] 1138 	mov	ar4,@r0
      00035C 08               [12] 1139 	inc	r0
      00035D 86 05            [24] 1140 	mov	ar5,@r0
      00035F 18               [12] 1141 	dec	r0
      000360 EC               [12] 1142 	mov	a,r4
      000361 4D               [12] 1143 	orl	a,r5
      000362 70 08            [24] 1144 	jnz	00112$
                                   1145 ;	./src/main.c:270: state[i] = BTN_PRESSED;
      000364 77 02            [12] 1146 	mov	@r1,#0x02
      000366 09               [12] 1147 	inc	r1
      000367 77 00            [12] 1148 	mov	@r1,#0x00
      000369 19               [12] 1149 	dec	r1
      00036A 80 06            [24] 1150 	sjmp	00115$
      00036C                       1151 00112$:
                                   1152 ;	./src/main.c:272: state[i] = BTN_RELEASED;
      00036C 77 00            [12] 1153 	mov	@r1,#0x00
      00036E 09               [12] 1154 	inc	r1
      00036F 77 00            [12] 1155 	mov	@r1,#0x00
      000371 19               [12] 1156 	dec	r1
                                   1157 ;	./src/main.c:276: }
      000372                       1158 00115$:
                                   1159 ;	./src/main.c:278: if ((state[i] == BTN_RELEASED) && (prestate[i] == BTN_PRESSED)){
      000372 EE               [12] 1160 	mov	a,r6
      000373 2E               [12] 1161 	add	a,r6
      000374 FC               [12] 1162 	mov	r4,a
      000375 EF               [12] 1163 	mov	a,r7
      000376 33               [12] 1164 	rlc	a
      000377 FD               [12] 1165 	mov	r5,a
      000378 EC               [12] 1166 	mov	a,r4
      000379 24r1C            [12] 1167 	add	a,#_state
      00037B F9               [12] 1168 	mov	r1,a
      00037C 87 02            [24] 1169 	mov	ar2,@r1
      00037E 09               [12] 1170 	inc	r1
      00037F 87 03            [24] 1171 	mov	ar3,@r1
      000381 19               [12] 1172 	dec	r1
      000382 EA               [12] 1173 	mov	a,r2
      000383 4B               [12] 1174 	orl	a,r3
      000384 70 50            [24] 1175 	jnz	00120$
      000386 EC               [12] 1176 	mov	a,r4
      000387 24r38            [12] 1177 	add	a,#_prestate
      000389 F9               [12] 1178 	mov	r1,a
      00038A 87 04            [24] 1179 	mov	ar4,@r1
      00038C 09               [12] 1180 	inc	r1
      00038D 87 05            [24] 1181 	mov	ar5,@r1
      00038F 19               [12] 1182 	dec	r1
      000390 BC 02 43         [24] 1183 	cjne	r4,#0x02,00120$
      000393 BD 00 40         [24] 1184 	cjne	r5,#0x00,00120$
                                   1185 ;	./src/main.c:280: if (i < 10){
      000396 C3               [12] 1186 	clr	c
      000397 EE               [12] 1187 	mov	a,r6
      000398 94 0A            [12] 1188 	subb	a,#0x0a
      00039A EF               [12] 1189 	mov	a,r7
      00039B 64 80            [12] 1190 	xrl	a,#0x80
      00039D 94 80            [12] 1191 	subb	a,#0x80
      00039F 50 26            [24] 1192 	jnc	00117$
                                   1193 ;	./src/main.c:281: sequence();
      0003A1 C0 07            [24] 1194 	push	ar7
      0003A3 C0 06            [24] 1195 	push	ar6
      0003A5 12r01rCA         [24] 1196 	lcall	_sequence
      0003A8 D0 06            [24] 1197 	pop	ar6
      0003AA D0 07            [24] 1198 	pop	ar7
                                   1199 ;	./src/main.c:282: display[0] = display_seg[i];
      0003AC EE               [12] 1200 	mov	a,r6
      0003AD 24r61            [12] 1201 	add	a,#_display_seg
      0003AF F9               [12] 1202 	mov	r1,a
      0003B0 87 05            [24] 1203 	mov	ar5,@r1
      0003B2 8D*54            [24] 1204 	mov	_display,r5
                                   1205 ;	./src/main.c:283: draw(display);
      0003B4 90r00r54         [24] 1206 	mov	dptr,#_display
      0003B7 75 F0 40         [24] 1207 	mov	b,#0x40
      0003BA C0 07            [24] 1208 	push	ar7
      0003BC C0 06            [24] 1209 	push	ar6
      0003BE 12r00r98         [24] 1210 	lcall	_draw
      0003C1 D0 06            [24] 1211 	pop	ar6
      0003C3 D0 07            [24] 1212 	pop	ar7
      0003C5 80 0F            [24] 1213 	sjmp	00120$
      0003C7                       1214 00117$:
                                   1215 ;	./src/main.c:285: func_call(i);
      0003C7 8E 82            [24] 1216 	mov	dpl,r6
      0003C9 8F 83            [24] 1217 	mov	dph,r7
      0003CB C0 07            [24] 1218 	push	ar7
      0003CD C0 06            [24] 1219 	push	ar6
      0003CF 12r01rF8         [24] 1220 	lcall	_func_call
      0003D2 D0 06            [24] 1221 	pop	ar6
      0003D4 D0 07            [24] 1222 	pop	ar7
      0003D6                       1223 00120$:
                                   1224 ;	./src/main.c:288: prestate[i] = state[i];
      0003D6 EE               [12] 1225 	mov	a,r6
      0003D7 2E               [12] 1226 	add	a,r6
      0003D8 FC               [12] 1227 	mov	r4,a
      0003D9 EF               [12] 1228 	mov	a,r7
      0003DA 33               [12] 1229 	rlc	a
      0003DB EC               [12] 1230 	mov	a,r4
      0003DC 24r38            [12] 1231 	add	a,#_prestate
      0003DE F9               [12] 1232 	mov	r1,a
      0003DF EC               [12] 1233 	mov	a,r4
      0003E0 24r1C            [12] 1234 	add	a,#_state
      0003E2 F8               [12] 1235 	mov	r0,a
      0003E3 86 04            [24] 1236 	mov	ar4,@r0
      0003E5 08               [12] 1237 	inc	r0
      0003E6 86 05            [24] 1238 	mov	ar5,@r0
      0003E8 18               [12] 1239 	dec	r0
      0003E9 A7 04            [24] 1240 	mov	@r1,ar4
      0003EB 09               [12] 1241 	inc	r1
      0003EC A7 05            [24] 1242 	mov	@r1,ar5
      0003EE 19               [12] 1243 	dec	r1
                                   1244 ;	./src/main.c:251: for (int i = 0; i < 14; i++)
      0003EF 0E               [12] 1245 	inc	r6
      0003F0 BE 00 01         [24] 1246 	cjne	r6,#0x00,00204$
      0003F3 0F               [12] 1247 	inc	r7
      0003F4                       1248 00204$:
                                   1249 ;	./src/main.c:291: }
      0003F4 02r02rE7         [24] 1250 	ljmp	00130$
                                   1251 	.area CSEG    (CODE)
                                   1252 	.area CONST   (CODE)
                                   1253 	.area XINIT   (CODE)
                                   1254 	.area CABS    (ABS,CODE)
