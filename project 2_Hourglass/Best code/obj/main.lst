                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.8 #13684 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sendbyte_PARM_4
                                     12 	.globl _sendbyte_PARM_3
                                     13 	.globl _sendbyte_PARM_2
                                     14 	.globl _main
                                     15 	.globl _Time
                                     16 	.globl _call
                                     17 	.globl _shift
                                     18 	.globl _sendbyte
                                     19 	.globl _MPU6050_INIT
                                     20 	.globl _Single_ReadI2C
                                     21 	.globl _Single_WriteI2C
                                     22 	.globl _CY
                                     23 	.globl _AC
                                     24 	.globl _F0
                                     25 	.globl _RS1
                                     26 	.globl _RS0
                                     27 	.globl _OV
                                     28 	.globl _F1
                                     29 	.globl _P
                                     30 	.globl _PS
                                     31 	.globl _PT1
                                     32 	.globl _PX1
                                     33 	.globl _PT0
                                     34 	.globl _PX0
                                     35 	.globl _RD
                                     36 	.globl _WR
                                     37 	.globl _T1
                                     38 	.globl _T0
                                     39 	.globl _INT1
                                     40 	.globl _INT0
                                     41 	.globl _TXD
                                     42 	.globl _RXD
                                     43 	.globl _P3_7
                                     44 	.globl _P3_6
                                     45 	.globl _P3_5
                                     46 	.globl _P3_4
                                     47 	.globl _P3_3
                                     48 	.globl _P3_2
                                     49 	.globl _P3_1
                                     50 	.globl _P3_0
                                     51 	.globl _EA
                                     52 	.globl _ES
                                     53 	.globl _ET1
                                     54 	.globl _EX1
                                     55 	.globl _ET0
                                     56 	.globl _EX0
                                     57 	.globl _P2_7
                                     58 	.globl _P2_6
                                     59 	.globl _P2_5
                                     60 	.globl _P2_4
                                     61 	.globl _P2_3
                                     62 	.globl _P2_2
                                     63 	.globl _P2_1
                                     64 	.globl _P2_0
                                     65 	.globl _SM0
                                     66 	.globl _SM1
                                     67 	.globl _SM2
                                     68 	.globl _REN
                                     69 	.globl _TB8
                                     70 	.globl _RB8
                                     71 	.globl _TI
                                     72 	.globl _RI
                                     73 	.globl _P1_7
                                     74 	.globl _P1_6
                                     75 	.globl _P1_5
                                     76 	.globl _P1_4
                                     77 	.globl _P1_3
                                     78 	.globl _P1_2
                                     79 	.globl _P1_1
                                     80 	.globl _P1_0
                                     81 	.globl _TF1
                                     82 	.globl _TR1
                                     83 	.globl _TF0
                                     84 	.globl _TR0
                                     85 	.globl _IE1
                                     86 	.globl _IT1
                                     87 	.globl _IE0
                                     88 	.globl _IT0
                                     89 	.globl _P0_7
                                     90 	.globl _P0_6
                                     91 	.globl _P0_5
                                     92 	.globl _P0_4
                                     93 	.globl _P0_3
                                     94 	.globl _P0_2
                                     95 	.globl _P0_1
                                     96 	.globl _P0_0
                                     97 	.globl _B
                                     98 	.globl _ACC
                                     99 	.globl _PSW
                                    100 	.globl _IP
                                    101 	.globl _P3
                                    102 	.globl _IE
                                    103 	.globl _P2
                                    104 	.globl _SBUF
                                    105 	.globl _SCON
                                    106 	.globl _P1
                                    107 	.globl _TH1
                                    108 	.globl _TH0
                                    109 	.globl _TL1
                                    110 	.globl _TL0
                                    111 	.globl _TMOD
                                    112 	.globl _TCON
                                    113 	.globl _PCON
                                    114 	.globl _DPH
                                    115 	.globl _DPL
                                    116 	.globl _SP
                                    117 	.globl _P0
                                    118 	.globl _Gscale
                                    119 	.globl _Ascale
                                    120 	.globl _ud
                                    121 	.globl _cnt
                                    122 	.globl _accel
                                    123 	.globl _m
                                    124 	.globl _m_1
                                    125 ;--------------------------------------------------------
                                    126 ; special function registers
                                    127 ;--------------------------------------------------------
                                    128 	.area RSEG    (ABS,DATA)
      000000                        129 	.org 0x0000
                           000080   130 _P0	=	0x0080
                           000081   131 _SP	=	0x0081
                           000082   132 _DPL	=	0x0082
                           000083   133 _DPH	=	0x0083
                           000087   134 _PCON	=	0x0087
                           000088   135 _TCON	=	0x0088
                           000089   136 _TMOD	=	0x0089
                           00008A   137 _TL0	=	0x008a
                           00008B   138 _TL1	=	0x008b
                           00008C   139 _TH0	=	0x008c
                           00008D   140 _TH1	=	0x008d
                           000090   141 _P1	=	0x0090
                           000098   142 _SCON	=	0x0098
                           000099   143 _SBUF	=	0x0099
                           0000A0   144 _P2	=	0x00a0
                           0000A8   145 _IE	=	0x00a8
                           0000B0   146 _P3	=	0x00b0
                           0000B8   147 _IP	=	0x00b8
                           0000D0   148 _PSW	=	0x00d0
                           0000E0   149 _ACC	=	0x00e0
                           0000F0   150 _B	=	0x00f0
                                    151 ;--------------------------------------------------------
                                    152 ; special function bits
                                    153 ;--------------------------------------------------------
                                    154 	.area RSEG    (ABS,DATA)
      000000                        155 	.org 0x0000
                           000080   156 _P0_0	=	0x0080
                           000081   157 _P0_1	=	0x0081
                           000082   158 _P0_2	=	0x0082
                           000083   159 _P0_3	=	0x0083
                           000084   160 _P0_4	=	0x0084
                           000085   161 _P0_5	=	0x0085
                           000086   162 _P0_6	=	0x0086
                           000087   163 _P0_7	=	0x0087
                           000088   164 _IT0	=	0x0088
                           000089   165 _IE0	=	0x0089
                           00008A   166 _IT1	=	0x008a
                           00008B   167 _IE1	=	0x008b
                           00008C   168 _TR0	=	0x008c
                           00008D   169 _TF0	=	0x008d
                           00008E   170 _TR1	=	0x008e
                           00008F   171 _TF1	=	0x008f
                           000090   172 _P1_0	=	0x0090
                           000091   173 _P1_1	=	0x0091
                           000092   174 _P1_2	=	0x0092
                           000093   175 _P1_3	=	0x0093
                           000094   176 _P1_4	=	0x0094
                           000095   177 _P1_5	=	0x0095
                           000096   178 _P1_6	=	0x0096
                           000097   179 _P1_7	=	0x0097
                           000098   180 _RI	=	0x0098
                           000099   181 _TI	=	0x0099
                           00009A   182 _RB8	=	0x009a
                           00009B   183 _TB8	=	0x009b
                           00009C   184 _REN	=	0x009c
                           00009D   185 _SM2	=	0x009d
                           00009E   186 _SM1	=	0x009e
                           00009F   187 _SM0	=	0x009f
                           0000A0   188 _P2_0	=	0x00a0
                           0000A1   189 _P2_1	=	0x00a1
                           0000A2   190 _P2_2	=	0x00a2
                           0000A3   191 _P2_3	=	0x00a3
                           0000A4   192 _P2_4	=	0x00a4
                           0000A5   193 _P2_5	=	0x00a5
                           0000A6   194 _P2_6	=	0x00a6
                           0000A7   195 _P2_7	=	0x00a7
                           0000A8   196 _EX0	=	0x00a8
                           0000A9   197 _ET0	=	0x00a9
                           0000AA   198 _EX1	=	0x00aa
                           0000AB   199 _ET1	=	0x00ab
                           0000AC   200 _ES	=	0x00ac
                           0000AF   201 _EA	=	0x00af
                           0000B0   202 _P3_0	=	0x00b0
                           0000B1   203 _P3_1	=	0x00b1
                           0000B2   204 _P3_2	=	0x00b2
                           0000B3   205 _P3_3	=	0x00b3
                           0000B4   206 _P3_4	=	0x00b4
                           0000B5   207 _P3_5	=	0x00b5
                           0000B6   208 _P3_6	=	0x00b6
                           0000B7   209 _P3_7	=	0x00b7
                           0000B0   210 _RXD	=	0x00b0
                           0000B1   211 _TXD	=	0x00b1
                           0000B2   212 _INT0	=	0x00b2
                           0000B3   213 _INT1	=	0x00b3
                           0000B4   214 _T0	=	0x00b4
                           0000B5   215 _T1	=	0x00b5
                           0000B6   216 _WR	=	0x00b6
                           0000B7   217 _RD	=	0x00b7
                           0000B8   218 _PX0	=	0x00b8
                           0000B9   219 _PT0	=	0x00b9
                           0000BA   220 _PX1	=	0x00ba
                           0000BB   221 _PT1	=	0x00bb
                           0000BC   222 _PS	=	0x00bc
                           0000D0   223 _P	=	0x00d0
                           0000D1   224 _F1	=	0x00d1
                           0000D2   225 _OV	=	0x00d2
                           0000D3   226 _RS0	=	0x00d3
                           0000D4   227 _RS1	=	0x00d4
                           0000D5   228 _F0	=	0x00d5
                           0000D6   229 _AC	=	0x00d6
                           0000D7   230 _CY	=	0x00d7
                                    231 ;--------------------------------------------------------
                                    232 ; overlayable register banks
                                    233 ;--------------------------------------------------------
                                    234 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        235 	.ds 8
                                    236 ;--------------------------------------------------------
                                    237 ; overlayable bit register bank
                                    238 ;--------------------------------------------------------
                                    239 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        240 bits:
      000000                        241 	.ds 1
                           008000   242 	b0 = bits[0]
                           008100   243 	b1 = bits[1]
                           008200   244 	b2 = bits[2]
                           008300   245 	b3 = bits[3]
                           008400   246 	b4 = bits[4]
                           008500   247 	b5 = bits[5]
                           008600   248 	b6 = bits[6]
                           008700   249 	b7 = bits[7]
                                    250 ;--------------------------------------------------------
                                    251 ; internal ram data
                                    252 ;--------------------------------------------------------
                                    253 	.area DSEG    (DATA)
      000000                        254 _m_1::
      000000                        255 	.ds 20
      000014                        256 _m::
      000014                        257 	.ds 20
      000028                        258 _accel::
      000028                        259 	.ds 2
      00002A                        260 _cnt::
      00002A                        261 	.ds 2
      00002C                        262 _ud::
      00002C                        263 	.ds 2
      00002E                        264 _Ascale::
      00002E                        265 	.ds 1
      00002F                        266 _Gscale::
      00002F                        267 	.ds 1
                                    268 ;--------------------------------------------------------
                                    269 ; overlayable items in internal ram
                                    270 ;--------------------------------------------------------
                                    271 	.area	OSEG    (OVR,DATA)
      000000                        272 _sendbyte_PARM_2:
      000000                        273 	.ds 1
      000001                        274 _sendbyte_PARM_3:
      000001                        275 	.ds 1
      000002                        276 _sendbyte_PARM_4:
      000002                        277 	.ds 1
                                    278 	.area	OSEG    (OVR,DATA)
                                    279 ;--------------------------------------------------------
                                    280 ; Stack segment in internal ram
                                    281 ;--------------------------------------------------------
                                    282 	.area SSEG
      000000                        283 __start__stack:
      000000                        284 	.ds	1
                                    285 
                                    286 ;--------------------------------------------------------
                                    287 ; indirectly addressable internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area ISEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; absolute internal ram data
                                    292 ;--------------------------------------------------------
                                    293 	.area IABS    (ABS,DATA)
                                    294 	.area IABS    (ABS,DATA)
                                    295 ;--------------------------------------------------------
                                    296 ; bit data
                                    297 ;--------------------------------------------------------
                                    298 	.area BSEG    (BIT)
                                    299 ;--------------------------------------------------------
                                    300 ; paged external ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area PSEG    (PAG,XDATA)
                                    303 ;--------------------------------------------------------
                                    304 ; uninitialized external ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area XSEG    (XDATA)
                                    307 ;--------------------------------------------------------
                                    308 ; absolute external ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area XABS    (ABS,XDATA)
                                    311 ;--------------------------------------------------------
                                    312 ; initialized external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area XISEG   (XDATA)
                                    315 	.area HOME    (CODE)
                                    316 	.area GSINIT0 (CODE)
                                    317 	.area GSINIT1 (CODE)
                                    318 	.area GSINIT2 (CODE)
                                    319 	.area GSINIT3 (CODE)
                                    320 	.area GSINIT4 (CODE)
                                    321 	.area GSINIT5 (CODE)
                                    322 	.area GSINIT  (CODE)
                                    323 	.area GSFINAL (CODE)
                                    324 	.area CSEG    (CODE)
                                    325 ;--------------------------------------------------------
                                    326 ; interrupt vector
                                    327 ;--------------------------------------------------------
                                    328 	.area HOME    (CODE)
      000000                        329 __interrupt_vect:
      000000 02r00r00         [24]  330 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  331 	reti
      000004                        332 	.ds	7
      00000B 02r01r8D         [24]  333 	ljmp	_Time
                                    334 ;--------------------------------------------------------
                                    335 ; global & static initialisations
                                    336 ;--------------------------------------------------------
                                    337 	.area HOME    (CODE)
                                    338 	.area GSINIT  (CODE)
                                    339 	.area GSFINAL (CODE)
                                    340 	.area GSINIT  (CODE)
                                    341 	.globl __sdcc_gsinit_startup
                                    342 	.globl __sdcc_program_startup
                                    343 	.globl __start__stack
                                    344 	.globl __mcs51_genXINIT
                                    345 	.globl __mcs51_genXRAMCLEAR
                                    346 	.globl __mcs51_genRAMCLEAR
                                    347 ;	./src/main.c:13: unsigned char m_1[20], m[20] = {0,255,255,255,255,255,255,255,255};
      000000 75*14 00         [24]  348 	mov	_m,#0x00
      000003 75*15 FF         [24]  349 	mov	(_m + 0x0001),#0xff
      000006 75*16 FF         [24]  350 	mov	(_m + 0x0002),#0xff
      000009 75*17 FF         [24]  351 	mov	(_m + 0x0003),#0xff
      00000C 75*18 FF         [24]  352 	mov	(_m + 0x0004),#0xff
      00000F 75*19 FF         [24]  353 	mov	(_m + 0x0005),#0xff
      000012 75*1A FF         [24]  354 	mov	(_m + 0x0006),#0xff
      000015 75*1B FF         [24]  355 	mov	(_m + 0x0007),#0xff
      000018 75*1C FF         [24]  356 	mov	(_m + 0x0008),#0xff
                                    357 ;	./src/main.c:14: int accel, cnt = 0, ud;
      00001B E4               [12]  358 	clr	a
      00001C F5*2A            [12]  359 	mov	_cnt,a
      00001E F5*2B            [12]  360 	mov	(_cnt + 1),a
                                    361 ;	./src/main.c:18: uint8_t Ascale = AFS_2G;
                                    362 ;	1-genFromRTrack replaced	mov	_Ascale,#0x00
      000020 F5*2E            [12]  363 	mov	_Ascale,a
                                    364 ;	./src/main.c:19: uint8_t Gscale = GFS_500DPS;
      000022 75*2F 01         [24]  365 	mov	_Gscale,#0x01
                                    366 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  367 	ljmp	__sdcc_program_startup
                                    368 ;--------------------------------------------------------
                                    369 ; Home
                                    370 ;--------------------------------------------------------
                                    371 	.area HOME    (CODE)
                                    372 	.area HOME    (CODE)
      00000E                        373 __sdcc_program_startup:
      00000E 02r03rEE         [24]  374 	ljmp	_main
                                    375 ;	return from main will return to caller
                                    376 ;--------------------------------------------------------
                                    377 ; code
                                    378 ;--------------------------------------------------------
                                    379 	.area CSEG    (CODE)
                                    380 ;------------------------------------------------------------
                                    381 ;Allocation info for local variables in function 'MPU6050_INIT'
                                    382 ;------------------------------------------------------------
                                    383 ;i                         Allocated to registers r6 r7 
                                    384 ;mpu                       Allocated to registers 
                                    385 ;------------------------------------------------------------
                                    386 ;	./src/main.c:21: void MPU6050_INIT(void) 
                                    387 ;	-----------------------------------------
                                    388 ;	 function MPU6050_INIT
                                    389 ;	-----------------------------------------
      000000                        390 _MPU6050_INIT:
                           000007   391 	ar7 = 0x07
                           000006   392 	ar6 = 0x06
                           000005   393 	ar5 = 0x05
                           000004   394 	ar4 = 0x04
                           000003   395 	ar3 = 0x03
                           000002   396 	ar2 = 0x02
                           000001   397 	ar1 = 0x01
                           000000   398 	ar0 = 0x00
                                    399 ;	./src/main.c:26: for (i = 0; i < 900; i++);
      000000 7E 84            [12]  400 	mov	r6,#0x84
      000002 7F 03            [12]  401 	mov	r7,#0x03
      000004                        402 00105$:
      000004 1E               [12]  403 	dec	r6
      000005 BE FF 01         [24]  404 	cjne	r6,#0xff,00133$
      000008 1F               [12]  405 	dec	r7
      000009                        406 00133$:
      000009 EE               [12]  407 	mov	a,r6
      00000A 4F               [12]  408 	orl	a,r7
                                    409 ;	./src/main.c:27: Single_WriteI2C(208, 0x6B, 0);
      00000B 70 F7            [24]  410 	jnz	00105$
      00000D 75*00 6B         [24]  411 	mov	_Single_WriteI2C_PARM_2,#0x6b
      000010 F5*00            [12]  412 	mov	_Single_WriteI2C_PARM_3,a
      000012 75 82 D0         [24]  413 	mov	dpl,#0xd0
      000015 12r00r00         [24]  414 	lcall	_Single_WriteI2C
                                    415 ;	./src/main.c:28: for (i = 0; i < 900; i++);
      000018 7E 84            [12]  416 	mov	r6,#0x84
      00001A 7F 03            [12]  417 	mov	r7,#0x03
      00001C                        418 00108$:
      00001C 1E               [12]  419 	dec	r6
      00001D BE FF 01         [24]  420 	cjne	r6,#0xff,00135$
      000020 1F               [12]  421 	dec	r7
      000021                        422 00135$:
      000021 EE               [12]  423 	mov	a,r6
      000022 4F               [12]  424 	orl	a,r7
      000023 70 F7            [24]  425 	jnz	00108$
                                    426 ;	./src/main.c:29: Single_WriteI2C(208, 0x68, 7);
      000025 75*00 68         [24]  427 	mov	_Single_WriteI2C_PARM_2,#0x68
      000028 75*00 07         [24]  428 	mov	_Single_WriteI2C_PARM_3,#0x07
      00002B 75 82 D0         [24]  429 	mov	dpl,#0xd0
      00002E 12r00r00         [24]  430 	lcall	_Single_WriteI2C
                                    431 ;	./src/main.c:30: Single_WriteI2C(208, 0x6B, 1);
      000031 75*00 6B         [24]  432 	mov	_Single_WriteI2C_PARM_2,#0x6b
      000034 75*00 01         [24]  433 	mov	_Single_WriteI2C_PARM_3,#0x01
      000037 75 82 D0         [24]  434 	mov	dpl,#0xd0
      00003A 12r00r00         [24]  435 	lcall	_Single_WriteI2C
                                    436 ;	./src/main.c:31: Single_WriteI2C(208, 0x1D, 3); 
      00003D 75*00 1D         [24]  437 	mov	_Single_WriteI2C_PARM_2,#0x1d
      000040 75*00 03         [24]  438 	mov	_Single_WriteI2C_PARM_3,#0x03
      000043 75 82 D0         [24]  439 	mov	dpl,#0xd0
      000046 12r00r00         [24]  440 	lcall	_Single_WriteI2C
                                    441 ;	./src/main.c:32: Single_WriteI2C(208, 0x19, 0);
      000049 75*00 19         [24]  442 	mov	_Single_WriteI2C_PARM_2,#0x19
      00004C 75*00 00         [24]  443 	mov	_Single_WriteI2C_PARM_3,#0x00
      00004F 75 82 D0         [24]  444 	mov	dpl,#0xd0
      000052 12r00r00         [24]  445 	lcall	_Single_WriteI2C
                                    446 ;	./src/main.c:33: mpu = (Gscale << 3) | 0x00;
      000055 E5*2F            [12]  447 	mov	a,_Gscale
      000057 C4               [12]  448 	swap	a
      000058 03               [12]  449 	rr	a
      000059 54 F8            [12]  450 	anl	a,#0xf8
      00005B F5*00            [12]  451 	mov	_Single_WriteI2C_PARM_3,a
                                    452 ;	./src/main.c:34: Single_WriteI2C(208, 0x1B, mpu);
      00005D 75*00 1B         [24]  453 	mov	_Single_WriteI2C_PARM_2,#0x1b
      000060 75 82 D0         [24]  454 	mov	dpl,#0xd0
      000063 12r00r00         [24]  455 	lcall	_Single_WriteI2C
                                    456 ;	./src/main.c:35: mpu = (Ascale << 3);
      000066 E5*2E            [12]  457 	mov	a,_Ascale
      000068 C4               [12]  458 	swap	a
      000069 03               [12]  459 	rr	a
      00006A 54 F8            [12]  460 	anl	a,#0xf8
      00006C F5*00            [12]  461 	mov	_Single_WriteI2C_PARM_3,a
                                    462 ;	./src/main.c:36: Single_WriteI2C(208, 0x1C, mpu);
      00006E 75*00 1C         [24]  463 	mov	_Single_WriteI2C_PARM_2,#0x1c
      000071 75 82 D0         [24]  464 	mov	dpl,#0xd0
      000074 12r00r00         [24]  465 	lcall	_Single_WriteI2C
                                    466 ;	./src/main.c:38: Single_WriteI2C(208, 0x1D, mpu);
      000077 75*00 1D         [24]  467 	mov	_Single_WriteI2C_PARM_2,#0x1d
      00007A 75*00 03         [24]  468 	mov	_Single_WriteI2C_PARM_3,#0x03
      00007D 75 82 D0         [24]  469 	mov	dpl,#0xd0
      000080 12r00r00         [24]  470 	lcall	_Single_WriteI2C
                                    471 ;	./src/main.c:39: Single_WriteI2C(208, 0x37, 34);
      000083 75*00 37         [24]  472 	mov	_Single_WriteI2C_PARM_2,#0x37
      000086 75*00 22         [24]  473 	mov	_Single_WriteI2C_PARM_3,#0x22
      000089 75 82 D0         [24]  474 	mov	dpl,#0xd0
      00008C 12r00r00         [24]  475 	lcall	_Single_WriteI2C
                                    476 ;	./src/main.c:40: Single_WriteI2C(208, 0x38, 0);
      00008F 75*00 38         [24]  477 	mov	_Single_WriteI2C_PARM_2,#0x38
      000092 75*00 00         [24]  478 	mov	_Single_WriteI2C_PARM_3,#0x00
      000095 75 82 D0         [24]  479 	mov	dpl,#0xd0
                                    480 ;	./src/main.c:41: }
      000098 02r00r00         [24]  481 	ljmp	_Single_WriteI2C
                                    482 ;------------------------------------------------------------
                                    483 ;Allocation info for local variables in function 'sendbyte'
                                    484 ;------------------------------------------------------------
                                    485 ;dat_1                     Allocated with name '_sendbyte_PARM_2'
                                    486 ;add_2                     Allocated with name '_sendbyte_PARM_3'
                                    487 ;dat_2                     Allocated with name '_sendbyte_PARM_4'
                                    488 ;add_1                     Allocated to registers r7 
                                    489 ;i                         Allocated to registers r5 
                                    490 ;j                         Allocated to registers r6 
                                    491 ;------------------------------------------------------------
                                    492 ;	./src/main.c:43: void sendbyte(char add_1, char dat_1, char add_2, char dat_2) 
                                    493 ;	-----------------------------------------
                                    494 ;	 function sendbyte
                                    495 ;	-----------------------------------------
      00009B                        496 _sendbyte:
      00009B AF 82            [24]  497 	mov	r7,dpl
                                    498 ;	./src/main.c:46: LOAD = 0;
                                    499 ;	assignBit
      00009D C2 A1            [12]  500 	clr	_P2_1
                                    501 ;	./src/main.c:47: for (j = 0; j < 4; j++) {
      00009F 7E 00            [12]  502 	mov	r6,#0x00
      0000A1                        503 00105$:
                                    504 ;	./src/main.c:48: for (i = 128; i > 0; i >>= 1) {
      0000A1 7D 80            [12]  505 	mov	r5,#0x80
      0000A3                        506 00103$:
                                    507 ;	./src/main.c:49: CLK = 0;
                                    508 ;	assignBit
      0000A3 C2 A0            [12]  509 	clr	_P2_0
                                    510 ;	./src/main.c:50: DIN = (add_2 & i);
      0000A5 ED               [12]  511 	mov	a,r5
      0000A6 55*01            [12]  512 	anl	a,_sendbyte_PARM_3
                                    513 ;	assignBit
      0000A8 24 FF            [12]  514 	add	a,#0xff
      0000AA 92 A2            [24]  515 	mov	_P2_2,c
                                    516 ;	./src/main.c:51: CLK = 1;
                                    517 ;	assignBit
      0000AC D2 A0            [12]  518 	setb	_P2_0
                                    519 ;	./src/main.c:48: for (i = 128; i > 0; i >>= 1) {
      0000AE ED               [12]  520 	mov	a,r5
      0000AF C3               [12]  521 	clr	c
      0000B0 13               [12]  522 	rrc	a
      0000B1 FD               [12]  523 	mov	r5,a
      0000B2 70 EF            [24]  524 	jnz	00103$
                                    525 ;	./src/main.c:52: } add_2 = dat_2; dat_2 = add_1; add_1 = dat_1;
      0000B4 85*02*01         [24]  526 	mov	_sendbyte_PARM_3,_sendbyte_PARM_4
      0000B7 8F*02            [24]  527 	mov	_sendbyte_PARM_4,r7
      0000B9 AF*00            [24]  528 	mov	r7,_sendbyte_PARM_2
                                    529 ;	./src/main.c:47: for (j = 0; j < 4; j++) {
      0000BB 0E               [12]  530 	inc	r6
      0000BC BE 04 00         [24]  531 	cjne	r6,#0x04,00129$
      0000BF                        532 00129$:
      0000BF 40 E0            [24]  533 	jc	00105$
                                    534 ;	./src/main.c:53: } LOAD = 1;
                                    535 ;	assignBit
      0000C1 D2 A1            [12]  536 	setb	_P2_1
                                    537 ;	./src/main.c:54: }
      0000C3 22               [24]  538 	ret
                                    539 ;------------------------------------------------------------
                                    540 ;Allocation info for local variables in function 'shift'
                                    541 ;------------------------------------------------------------
                                    542 ;i                         Allocated to registers r6 
                                    543 ;------------------------------------------------------------
                                    544 ;	./src/main.c:56: void shift(void) 
                                    545 ;	-----------------------------------------
                                    546 ;	 function shift
                                    547 ;	-----------------------------------------
      0000C4                        548 _shift:
                                    549 ;	./src/main.c:59: for (i = (17*ud+19)>>1; ud != 0 && i != (-19*ud+19)>>1; i -= ud)
      0000C4 85*2C*00         [24]  550 	mov	__mulint_PARM_2,_ud
      0000C7 85*2D*01         [24]  551 	mov	(__mulint_PARM_2 + 1),(_ud + 1)
      0000CA 90 00 11         [24]  552 	mov	dptr,#0x0011
      0000CD 12r00r00         [24]  553 	lcall	__mulint
      0000D0 E5 82            [12]  554 	mov	a,dpl
      0000D2 85 83 F0         [24]  555 	mov	b,dph
      0000D5 24 13            [12]  556 	add	a,#0x13
      0000D7 FE               [12]  557 	mov	r6,a
      0000D8 E4               [12]  558 	clr	a
      0000D9 35 F0            [12]  559 	addc	a,b
      0000DB A2 E7            [12]  560 	mov	c,acc.7
      0000DD 13               [12]  561 	rrc	a
      0000DE CE               [12]  562 	xch	a,r6
      0000DF 13               [12]  563 	rrc	a
      0000E0 CE               [12]  564 	xch	a,r6
      0000E1 FF               [12]  565 	mov	r7,a
      0000E2                        566 00107$:
      0000E2 E5*2C            [12]  567 	mov	a,_ud
      0000E4 45*2D            [12]  568 	orl	a,(_ud + 1)
      0000E6 70 01            [24]  569 	jnz	00127$
      0000E8 22               [24]  570 	ret
      0000E9                        571 00127$:
      0000E9 85*2C*00         [24]  572 	mov	__mulint_PARM_2,_ud
      0000EC 85*2D*01         [24]  573 	mov	(__mulint_PARM_2 + 1),(_ud + 1)
      0000EF 90 FF ED         [24]  574 	mov	dptr,#0xffed
      0000F2 C0 06            [24]  575 	push	ar6
      0000F4 12r00r00         [24]  576 	lcall	__mulint
      0000F7 E5 82            [12]  577 	mov	a,dpl
      0000F9 85 83 F0         [24]  578 	mov	b,dph
      0000FC D0 06            [24]  579 	pop	ar6
      0000FE 24 13            [12]  580 	add	a,#0x13
      000100 FD               [12]  581 	mov	r5,a
      000101 E4               [12]  582 	clr	a
      000102 35 F0            [12]  583 	addc	a,b
      000104 A2 E7            [12]  584 	mov	c,acc.7
      000106 13               [12]  585 	rrc	a
      000107 CD               [12]  586 	xch	a,r5
      000108 13               [12]  587 	rrc	a
      000109 CD               [12]  588 	xch	a,r5
      00010A FF               [12]  589 	mov	r7,a
      00010B 8E 03            [24]  590 	mov	ar3,r6
      00010D 7C 00            [12]  591 	mov	r4,#0x00
      00010F EB               [12]  592 	mov	a,r3
      000110 B5 05 05         [24]  593 	cjne	a,ar5,00128$
      000113 EC               [12]  594 	mov	a,r4
      000114 B5 07 01         [24]  595 	cjne	a,ar7,00128$
      000117 22               [24]  596 	ret
      000118                        597 00128$:
                                    598 ;	./src/main.c:60: if (i > 10 || i < 9) { m_1[i] = m_1[i + ud] & m[i];
      000118 EE               [12]  599 	mov	a,r6
      000119 24 F5            [12]  600 	add	a,#0xff - 0x0a
      00011B 40 05            [24]  601 	jc	00101$
      00011D BE 09 00         [24]  602 	cjne	r6,#0x09,00130$
      000120                        603 00130$:
      000120 50 2D            [24]  604 	jnc	00108$
      000122                        605 00101$:
      000122 EE               [12]  606 	mov	a,r6
      000123 24r00            [12]  607 	add	a,#_m_1
      000125 F9               [12]  608 	mov	r1,a
      000126 AF*2C            [24]  609 	mov	r7,_ud
      000128 8E 05            [24]  610 	mov	ar5,r6
      00012A EF               [12]  611 	mov	a,r7
      00012B 2D               [12]  612 	add	a,r5
      00012C 24r00            [12]  613 	add	a,#_m_1
      00012E F8               [12]  614 	mov	r0,a
      00012F 86 07            [24]  615 	mov	ar7,@r0
      000131 EE               [12]  616 	mov	a,r6
      000132 24r14            [12]  617 	add	a,#_m
      000134 F8               [12]  618 	mov	r0,a
      000135 E6               [12]  619 	mov	a,@r0
      000136 5F               [12]  620 	anl	a,r7
      000137 F7               [12]  621 	mov	@r1,a
                                    622 ;	./src/main.c:61: m[i] = (m_1[i + ud] & m[i]) | m[i - ud]; }
      000138 E5*2C            [12]  623 	mov	a,_ud
      00013A FF               [12]  624 	mov	r7,a
      00013B 2D               [12]  625 	add	a,r5
      00013C 24r00            [12]  626 	add	a,#_m_1
      00013E F9               [12]  627 	mov	r1,a
      00013F 87 04            [24]  628 	mov	ar4,@r1
      000141 E6               [12]  629 	mov	a,@r0
      000142 FB               [12]  630 	mov	r3,a
      000143 52 04            [12]  631 	anl	ar4,a
      000145 ED               [12]  632 	mov	a,r5
      000146 C3               [12]  633 	clr	c
      000147 9F               [12]  634 	subb	a,r7
      000148 24r14            [12]  635 	add	a,#_m
      00014A F9               [12]  636 	mov	r1,a
      00014B E7               [12]  637 	mov	a,@r1
      00014C FF               [12]  638 	mov	r7,a
      00014D 4C               [12]  639 	orl	a,r4
      00014E F6               [12]  640 	mov	@r0,a
      00014F                        641 00108$:
                                    642 ;	./src/main.c:59: for (i = (17*ud+19)>>1; ud != 0 && i != (-19*ud+19)>>1; i -= ud)
      00014F AF*2C            [24]  643 	mov	r7,_ud
      000151 8E 05            [24]  644 	mov	ar5,r6
      000153 ED               [12]  645 	mov	a,r5
      000154 C3               [12]  646 	clr	c
      000155 9F               [12]  647 	subb	a,r7
      000156 FE               [12]  648 	mov	r6,a
                                    649 ;	./src/main.c:62: }
      000157 02r00rE2         [24]  650 	ljmp	00107$
                                    651 ;------------------------------------------------------------
                                    652 ;Allocation info for local variables in function 'call'
                                    653 ;------------------------------------------------------------
                                    654 ;j                         Allocated to registers r6 r7 
                                    655 ;k                         Allocated to registers r4 r5 
                                    656 ;------------------------------------------------------------
                                    657 ;	./src/main.c:64: void call(void) 
                                    658 ;	-----------------------------------------
                                    659 ;	 function call
                                    660 ;	-----------------------------------------
      00015A                        661 _call:
                                    662 ;	./src/main.c:67: for (j = 0; j < 100; j++) { 
      00015A 7E 00            [12]  663 	mov	r6,#0x00
      00015C 7F 00            [12]  664 	mov	r7,#0x00
      00015E                        665 00110$:
                                    666 ;	./src/main.c:68: P3_7 = 0; for (k = 0; k < 100; k++);
                                    667 ;	assignBit
      00015E C2 B7            [12]  668 	clr	_P3_7
      000160 7C 64            [12]  669 	mov	r4,#0x64
      000162 7D 00            [12]  670 	mov	r5,#0x00
      000164                        671 00106$:
      000164 1C               [12]  672 	dec	r4
      000165 BC FF 01         [24]  673 	cjne	r4,#0xff,00137$
      000168 1D               [12]  674 	dec	r5
      000169                        675 00137$:
      000169 EC               [12]  676 	mov	a,r4
      00016A 4D               [12]  677 	orl	a,r5
      00016B 70 F7            [24]  678 	jnz	00106$
                                    679 ;	./src/main.c:69: P3_7 = 1; for (k = 0; k < 100; k++);
                                    680 ;	assignBit
      00016D D2 B7            [12]  681 	setb	_P3_7
      00016F 7C 64            [12]  682 	mov	r4,#0x64
      000171 7D 00            [12]  683 	mov	r5,#0x00
      000173                        684 00109$:
      000173 1C               [12]  685 	dec	r4
      000174 BC FF 01         [24]  686 	cjne	r4,#0xff,00139$
      000177 1D               [12]  687 	dec	r5
      000178                        688 00139$:
      000178 EC               [12]  689 	mov	a,r4
      000179 4D               [12]  690 	orl	a,r5
      00017A 70 F7            [24]  691 	jnz	00109$
                                    692 ;	./src/main.c:67: for (j = 0; j < 100; j++) { 
      00017C 0E               [12]  693 	inc	r6
      00017D BE 00 01         [24]  694 	cjne	r6,#0x00,00141$
      000180 0F               [12]  695 	inc	r7
      000181                        696 00141$:
      000181 C3               [12]  697 	clr	c
      000182 EE               [12]  698 	mov	a,r6
      000183 94 64            [12]  699 	subb	a,#0x64
      000185 EF               [12]  700 	mov	a,r7
      000186 64 80            [12]  701 	xrl	a,#0x80
      000188 94 80            [12]  702 	subb	a,#0x80
      00018A 40 D2            [24]  703 	jc	00110$
                                    704 ;	./src/main.c:71: }
      00018C 22               [24]  705 	ret
                                    706 ;------------------------------------------------------------
                                    707 ;Allocation info for local variables in function 'Time'
                                    708 ;------------------------------------------------------------
                                    709 ;i                         Allocated to registers r7 
                                    710 ;j                         Allocated to registers r6 
                                    711 ;------------------------------------------------------------
                                    712 ;	./src/main.c:73: void Time(void) __interrupt (1) 
                                    713 ;	-----------------------------------------
                                    714 ;	 function Time
                                    715 ;	-----------------------------------------
      00018D                        716 _Time:
      00018D C0*00            [24]  717 	push	bits
      00018F C0 E0            [24]  718 	push	acc
      000191 C0 F0            [24]  719 	push	b
      000193 C0 82            [24]  720 	push	dpl
      000195 C0 83            [24]  721 	push	dph
      000197 C0 07            [24]  722 	push	(0+7)
      000199 C0 06            [24]  723 	push	(0+6)
      00019B C0 05            [24]  724 	push	(0+5)
      00019D C0 04            [24]  725 	push	(0+4)
      00019F C0 03            [24]  726 	push	(0+3)
      0001A1 C0 02            [24]  727 	push	(0+2)
      0001A3 C0 01            [24]  728 	push	(0+1)
      0001A5 C0 00            [24]  729 	push	(0+0)
      0001A7 C0 D0            [24]  730 	push	psw
      0001A9 75 D0 00         [24]  731 	mov	psw,#0x00
                                    732 ;	./src/main.c:76: TH0 = (15536) >> 8;
      0001AC 75 8C 3C         [24]  733 	mov	_TH0,#0x3c
                                    734 ;	./src/main.c:77: TL0 = (15536) % 256;
      0001AF 75 8A B0         [24]  735 	mov	_TL0,#0xb0
                                    736 ;	./src/main.c:79: accel = (int)(((int)Single_ReadI2C(208, Y_H) << 8) | Single_ReadI2C(208, Y_L));
      0001B2 75*00 3D         [24]  737 	mov	_Single_ReadI2C_PARM_2,#0x3d
      0001B5 75 82 D0         [24]  738 	mov	dpl,#0xd0
      0001B8 12r00r00         [24]  739 	lcall	_Single_ReadI2C
      0001BB AE 82            [24]  740 	mov	r6,dpl
      0001BD 7F 00            [12]  741 	mov	r7,#0x00
      0001BF 75*00 3E         [24]  742 	mov	_Single_ReadI2C_PARM_2,#0x3e
      0001C2 75 82 D0         [24]  743 	mov	dpl,#0xd0
      0001C5 C0 07            [24]  744 	push	ar7
      0001C7 C0 06            [24]  745 	push	ar6
      0001C9 12r00r00         [24]  746 	lcall	_Single_ReadI2C
      0001CC AD 82            [24]  747 	mov	r5,dpl
      0001CE D0 06            [24]  748 	pop	ar6
      0001D0 D0 07            [24]  749 	pop	ar7
      0001D2 7C 00            [12]  750 	mov	r4,#0x00
      0001D4 ED               [12]  751 	mov	a,r5
      0001D5 4F               [12]  752 	orl	a,r7
      0001D6 F5*28            [12]  753 	mov	_accel,a
      0001D8 EC               [12]  754 	mov	a,r4
      0001D9 4E               [12]  755 	orl	a,r6
      0001DA F5*29            [12]  756 	mov	(_accel + 1),a
                                    757 ;	./src/main.c:80: ud = 0;
      0001DC E4               [12]  758 	clr	a
      0001DD F5*2C            [12]  759 	mov	_ud,a
      0001DF F5*2D            [12]  760 	mov	(_ud + 1),a
                                    761 ;	./src/main.c:81: if (accel > 5000) {ud = 1; m_1[9] = m_1[19] = 255; m[0] = m[10] = 0;}
      0001E1 C3               [12]  762 	clr	c
      0001E2 74 88            [12]  763 	mov	a,#0x88
      0001E4 95*28            [12]  764 	subb	a,_accel
      0001E6 74 93            [12]  765 	mov	a,#(0x13 ^ 0x80)
      0001E8 85*29 F0         [24]  766 	mov	b,(_accel + 1)
      0001EB 63 F0 80         [24]  767 	xrl	b,#0x80
      0001EE 95 F0            [12]  768 	subb	a,b
      0001F0 50 12            [24]  769 	jnc	00102$
      0001F2 75*2C 01         [24]  770 	mov	_ud,#0x01
      0001F5 75*2D 00         [24]  771 	mov	(_ud + 1),#0x00
      0001F8 75*13 FF         [24]  772 	mov	(_m_1 + 0x0013),#0xff
      0001FB 75*09 FF         [24]  773 	mov	(_m_1 + 0x0009),#0xff
      0001FE 75*1E 00         [24]  774 	mov	(_m + 0x000a),#0x00
      000201 75*14 00         [24]  775 	mov	_m,#0x00
      000204                        776 00102$:
                                    777 ;	./src/main.c:82: if (accel < -5000) {ud = -1; m[9] = m[19] = 0; m_1[0] = m_1[10] = 255;}
      000204 C3               [12]  778 	clr	c
      000205 E5*28            [12]  779 	mov	a,_accel
      000207 94 78            [12]  780 	subb	a,#0x78
      000209 E5*29            [12]  781 	mov	a,(_accel + 1)
      00020B 64 80            [12]  782 	xrl	a,#0x80
      00020D 94 6C            [12]  783 	subb	a,#0x6c
      00020F 50 12            [24]  784 	jnc	00104$
      000211 75*2C FF         [24]  785 	mov	_ud,#0xff
      000214 75*2D FF         [24]  786 	mov	(_ud + 1),#0xff
      000217 75*27 00         [24]  787 	mov	(_m + 0x0013),#0x00
      00021A 75*1D 00         [24]  788 	mov	(_m + 0x0009),#0x00
      00021D 75*0A FF         [24]  789 	mov	(_m_1 + 0x000a),#0xff
      000220 75*00 FF         [24]  790 	mov	_m_1,#0xff
      000223                        791 00104$:
                                    792 ;	./src/main.c:83: if (cnt % 10 == 0) {
      000223 75*00 0A         [24]  793 	mov	__modsint_PARM_2,#0x0a
      000226 75*01 00         [24]  794 	mov	(__modsint_PARM_2 + 1),#0x00
      000229 85*2A 82         [24]  795 	mov	dpl,_cnt
      00022C 85*2B 83         [24]  796 	mov	dph,(_cnt + 1)
      00022F 12r00r00         [24]  797 	lcall	__modsint
      000232 E5 82            [12]  798 	mov	a,dpl
      000234 85 83 F0         [24]  799 	mov	b,dph
      000237 45 F0            [12]  800 	orl	a,b
      000239 60 03            [24]  801 	jz	00288$
      00023B 02r03r98         [24]  802 	ljmp	00131$
      00023E                        803 00288$:
                                    804 ;	./src/main.c:84: if (cnt % 40 == 0 && m[8] << 7 && ud == 1) {m[8] -= 1; m[11] += 128;}
      00023E 75*00 28         [24]  805 	mov	__modsint_PARM_2,#0x28
      000241 75*01 00         [24]  806 	mov	(__modsint_PARM_2 + 1),#0x00
      000244 85*2A 82         [24]  807 	mov	dpl,_cnt
      000247 85*2B 83         [24]  808 	mov	dph,(_cnt + 1)
      00024A 12r00r00         [24]  809 	lcall	__modsint
      00024D E5 82            [12]  810 	mov	a,dpl
      00024F 85 83 F0         [24]  811 	mov	b,dph
      000252 45 F0            [12]  812 	orl	a,b
      000254 70 2A            [24]  813 	jnz	00106$
      000256 AF*1C            [24]  814 	mov	r7,(_m + 0x0008)
      000258 8F 05            [24]  815 	mov	ar5,r7
      00025A E4               [12]  816 	clr	a
      00025B 54 01            [12]  817 	anl	a,#0x01
      00025D A2 E0            [12]  818 	mov	c,acc.0
      00025F CD               [12]  819 	xch	a,r5
      000260 13               [12]  820 	rrc	a
      000261 CD               [12]  821 	xch	a,r5
      000262 13               [12]  822 	rrc	a
      000263 CD               [12]  823 	xch	a,r5
      000264 FE               [12]  824 	mov	r6,a
      000265 4D               [12]  825 	orl	a,r5
      000266 60 18            [24]  826 	jz	00106$
      000268 74 01            [12]  827 	mov	a,#0x01
      00026A B5*2C 06         [24]  828 	cjne	a,_ud,00291$
      00026D 14               [12]  829 	dec	a
      00026E B5*2D 02         [24]  830 	cjne	a,(_ud + 1),00291$
      000271 80 02            [24]  831 	sjmp	00292$
      000273                        832 00291$:
      000273 80 0B            [24]  833 	sjmp	00106$
      000275                        834 00292$:
      000275 EF               [12]  835 	mov	a,r7
      000276 14               [12]  836 	dec	a
      000277 F5*1C            [12]  837 	mov	(_m + 0x0008),a
      000279 AF*1F            [24]  838 	mov	r7,(_m + 0x000b)
      00027B 74 80            [12]  839 	mov	a,#0x80
      00027D 2F               [12]  840 	add	a,r7
      00027E F5*1F            [12]  841 	mov	(_m + 0x000b),a
      000280                        842 00106$:
                                    843 ;	./src/main.c:85: if (cnt % 40 == 0 && m[11] >> 7 && ud == -1) {m[11] -= 128; m[8] += 1;}
      000280 75*00 28         [24]  844 	mov	__modsint_PARM_2,#0x28
      000283 75*01 00         [24]  845 	mov	(__modsint_PARM_2 + 1),#0x00
      000286 85*2A 82         [24]  846 	mov	dpl,_cnt
      000289 85*2B 83         [24]  847 	mov	dph,(_cnt + 1)
      00028C 12r00r00         [24]  848 	lcall	__modsint
      00028F E5 82            [12]  849 	mov	a,dpl
      000291 85 83 F0         [24]  850 	mov	b,dph
      000294 45 F0            [12]  851 	orl	a,b
      000296 70 1C            [24]  852 	jnz	00163$
      000298 E5*1F            [12]  853 	mov	a,(_m + 0x000b)
      00029A FF               [12]  854 	mov	r7,a
      00029B 23               [12]  855 	rl	a
      00029C 54 01            [12]  856 	anl	a,#0x01
      00029E FE               [12]  857 	mov	r6,a
      00029F 60 13            [24]  858 	jz	00163$
      0002A1 74 FF            [12]  859 	mov	a,#0xff
      0002A3 B5*2C 0E         [24]  860 	cjne	a,_ud,00163$
      0002A6 B5*2D 0B         [24]  861 	cjne	a,(_ud + 1),00163$
      0002A9 EF               [12]  862 	mov	a,r7
      0002AA 24 80            [12]  863 	add	a,#0x80
      0002AC F5*1F            [12]  864 	mov	(_m + 0x000b),a
      0002AE E5*1C            [12]  865 	mov	a,(_m + 0x0008)
      0002B0 FF               [12]  866 	mov	r7,a
      0002B1 04               [12]  867 	inc	a
      0002B2 F5*1C            [12]  868 	mov	(_m + 0x0008),a
                                    869 ;	./src/main.c:86: for (i = 1; i < 9; i++) sendbyte(i, m[i], i, m[i + 10]);
      0002B4                        870 00163$:
      0002B4 7F 01            [12]  871 	mov	r7,#0x01
      0002B6                        872 00138$:
      0002B6 EF               [12]  873 	mov	a,r7
      0002B7 24r14            [12]  874 	add	a,#_m
      0002B9 F9               [12]  875 	mov	r1,a
      0002BA 87*00            [24]  876 	mov	_sendbyte_PARM_2,@r1
      0002BC 8F 06            [24]  877 	mov	ar6,r7
      0002BE 74 0A            [12]  878 	mov	a,#0x0a
      0002C0 2E               [12]  879 	add	a,r6
      0002C1 24r14            [12]  880 	add	a,#_m
      0002C3 F9               [12]  881 	mov	r1,a
      0002C4 87*02            [24]  882 	mov	_sendbyte_PARM_4,@r1
      0002C6 8F*01            [24]  883 	mov	_sendbyte_PARM_3,r7
      0002C8 8F 82            [24]  884 	mov	dpl,r7
      0002CA C0 07            [24]  885 	push	ar7
      0002CC 12r00r9B         [24]  886 	lcall	_sendbyte
      0002CF D0 07            [24]  887 	pop	ar7
      0002D1 0F               [12]  888 	inc	r7
      0002D2 BF 09 00         [24]  889 	cjne	r7,#0x09,00297$
      0002D5                        890 00297$:
      0002D5 40 DF            [24]  891 	jc	00138$
                                    892 ;	./src/main.c:88: if (cnt % 30 == 0 || cnt % 50 == 0) shift();
      0002D7 75*00 1E         [24]  893 	mov	__modsint_PARM_2,#0x1e
      0002DA 75*01 00         [24]  894 	mov	(__modsint_PARM_2 + 1),#0x00
      0002DD 85*2A 82         [24]  895 	mov	dpl,_cnt
      0002E0 85*2B 83         [24]  896 	mov	dph,(_cnt + 1)
      0002E3 12r00r00         [24]  897 	lcall	__modsint
      0002E6 E5 82            [12]  898 	mov	a,dpl
      0002E8 85 83 F0         [24]  899 	mov	b,dph
      0002EB 45 F0            [12]  900 	orl	a,b
      0002ED 60 18            [24]  901 	jz	00114$
      0002EF 75*00 32         [24]  902 	mov	__modsint_PARM_2,#0x32
      0002F2 75*01 00         [24]  903 	mov	(__modsint_PARM_2 + 1),#0x00
      0002F5 85*2A 82         [24]  904 	mov	dpl,_cnt
      0002F8 85*2B 83         [24]  905 	mov	dph,(_cnt + 1)
      0002FB 12r00r00         [24]  906 	lcall	__modsint
      0002FE E5 82            [12]  907 	mov	a,dpl
      000300 85 83 F0         [24]  908 	mov	b,dph
      000303 45 F0            [12]  909 	orl	a,b
      000305 70 03            [24]  910 	jnz	00173$
      000307                        911 00114$:
      000307 12r00rC4         [24]  912 	lcall	_shift
                                    913 ;	./src/main.c:89: for (i = 1; i < 19; i++) {
      00030A                        914 00173$:
      00030A 7F 01            [12]  915 	mov	r7,#0x01
      00030C                        916 00146$:
                                    917 ;	./src/main.c:90: if (ud == 1) { for (j = 1; (m[i] & j) > 0; j <<= 1); m[i] = m[i] >> 1  | (j - 1);
      00030C 74 01            [12]  918 	mov	a,#0x01
      00030E B5*2C 06         [24]  919 	cjne	a,_ud,00301$
      000311 14               [12]  920 	dec	a
      000312 B5*2D 02         [24]  921 	cjne	a,(_ud + 1),00301$
      000315 80 02            [24]  922 	sjmp	00302$
      000317                        923 00301$:
      000317 80 1D            [24]  924 	sjmp	00124$
      000319                        925 00302$:
      000319 7E 01            [12]  926 	mov	r6,#0x01
      00031B EF               [12]  927 	mov	a,r7
      00031C 24r14            [12]  928 	add	a,#_m
      00031E F9               [12]  929 	mov	r1,a
      00031F                        930 00141$:
      00031F 87 05            [24]  931 	mov	ar5,@r1
      000321 EE               [12]  932 	mov	a,r6
      000322 5D               [12]  933 	anl	a,r5
      000323 60 07            [24]  934 	jz	00117$
      000325 8E 04            [24]  935 	mov	ar4,r6
      000327 EC               [12]  936 	mov	a,r4
      000328 2C               [12]  937 	add	a,r4
      000329 FE               [12]  938 	mov	r6,a
      00032A 80 F3            [24]  939 	sjmp	00141$
      00032C                        940 00117$:
      00032C ED               [12]  941 	mov	a,r5
      00032D C3               [12]  942 	clr	c
      00032E 13               [12]  943 	rrc	a
      00032F FD               [12]  944 	mov	r5,a
      000330 EE               [12]  945 	mov	a,r6
      000331 14               [12]  946 	dec	a
      000332 4D               [12]  947 	orl	a,r5
      000333 F7               [12]  948 	mov	@r1,a
      000334 80 29            [24]  949 	sjmp	00147$
      000336                        950 00124$:
                                    951 ;	./src/main.c:91: } else if (ud == -1) { for (j = 128; (m[i] & j) > 0; j >>= 1); if (j != 0) m[i] = (m[i] << 1) | (128 - j) << 1; }
      000336 74 FF            [12]  952 	mov	a,#0xff
      000338 B5*2C 24         [24]  953 	cjne	a,_ud,00147$
      00033B B5*2D 21         [24]  954 	cjne	a,(_ud + 1),00147$
      00033E 7E 80            [12]  955 	mov	r6,#0x80
      000340 EF               [12]  956 	mov	a,r7
      000341 24r14            [12]  957 	add	a,#_m
      000343 F9               [12]  958 	mov	r1,a
      000344                        959 00144$:
      000344 87 05            [24]  960 	mov	ar5,@r1
      000346 EE               [12]  961 	mov	a,r6
      000347 5D               [12]  962 	anl	a,r5
      000348 60 06            [24]  963 	jz	00118$
      00034A EE               [12]  964 	mov	a,r6
      00034B C3               [12]  965 	clr	c
      00034C 13               [12]  966 	rrc	a
      00034D FE               [12]  967 	mov	r6,a
      00034E 80 F4            [24]  968 	sjmp	00144$
      000350                        969 00118$:
      000350 EE               [12]  970 	mov	a,r6
      000351 60 0C            [24]  971 	jz	00147$
      000353 ED               [12]  972 	mov	a,r5
      000354 2D               [12]  973 	add	a,r5
      000355 FD               [12]  974 	mov	r5,a
      000356 74 80            [12]  975 	mov	a,#0x80
      000358 C3               [12]  976 	clr	c
      000359 9E               [12]  977 	subb	a,r6
      00035A 25 E0            [12]  978 	add	a,acc
      00035C FE               [12]  979 	mov	r6,a
      00035D 4D               [12]  980 	orl	a,r5
      00035E F7               [12]  981 	mov	@r1,a
      00035F                        982 00147$:
                                    983 ;	./src/main.c:89: for (i = 1; i < 19; i++) {
      00035F 0F               [12]  984 	inc	r7
      000360 BF 13 00         [24]  985 	cjne	r7,#0x13,00308$
      000363                        986 00308$:
      000363 40 A7            [24]  987 	jc	00146$
                                    988 ;	./src/main.c:93: if (cnt % 30 != 0 && cnt % 50 != 0) shift();
      000365 75*00 1E         [24]  989 	mov	__modsint_PARM_2,#0x1e
      000368 75*01 00         [24]  990 	mov	(__modsint_PARM_2 + 1),#0x00
      00036B 85*2A 82         [24]  991 	mov	dpl,_cnt
      00036E 85*2B 83         [24]  992 	mov	dph,(_cnt + 1)
      000371 12r00r00         [24]  993 	lcall	__modsint
      000374 E5 82            [12]  994 	mov	a,dpl
      000376 85 83 F0         [24]  995 	mov	b,dph
      000379 45 F0            [12]  996 	orl	a,b
      00037B 60 1B            [24]  997 	jz	00131$
      00037D 75*00 32         [24]  998 	mov	__modsint_PARM_2,#0x32
      000380 75*01 00         [24]  999 	mov	(__modsint_PARM_2 + 1),#0x00
      000383 85*2A 82         [24] 1000 	mov	dpl,_cnt
      000386 85*2B 83         [24] 1001 	mov	dph,(_cnt + 1)
      000389 12r00r00         [24] 1002 	lcall	__modsint
      00038C E5 82            [12] 1003 	mov	a,dpl
      00038E 85 83 F0         [24] 1004 	mov	b,dph
      000391 45 F0            [12] 1005 	orl	a,b
      000393 60 03            [24] 1006 	jz	00131$
      000395 12r00rC4         [24] 1007 	lcall	_shift
      000398                       1008 00131$:
                                   1009 ;	./src/main.c:95: if (++cnt == 2560 || cnt == 2570 || cnt == 2580) call();
      000398 05*2A            [12] 1010 	inc	_cnt
      00039A E4               [12] 1011 	clr	a
      00039B B5*2A 02         [24] 1012 	cjne	a,_cnt,00312$
      00039E 05*2B            [12] 1013 	inc	(_cnt + 1)
      0003A0                       1014 00312$:
      0003A0 E4               [12] 1015 	clr	a
      0003A1 B5*2A 07         [24] 1016 	cjne	a,_cnt,00313$
      0003A4 74 0A            [12] 1017 	mov	a,#0x0a
      0003A6 B5*2B 02         [24] 1018 	cjne	a,(_cnt + 1),00313$
      0003A9 80 14            [24] 1019 	sjmp	00132$
      0003AB                       1020 00313$:
      0003AB 74 0A            [12] 1021 	mov	a,#0x0a
      0003AD B5*2A 05         [24] 1022 	cjne	a,_cnt,00314$
      0003B0 B5*2B 02         [24] 1023 	cjne	a,(_cnt + 1),00314$
      0003B3 80 0A            [24] 1024 	sjmp	00132$
      0003B5                       1025 00314$:
      0003B5 74 14            [12] 1026 	mov	a,#0x14
      0003B7 B5*2A 08         [24] 1027 	cjne	a,_cnt,00133$
      0003BA 74 0A            [12] 1028 	mov	a,#0x0a
      0003BC B5*2B 03         [24] 1029 	cjne	a,(_cnt + 1),00133$
      0003BF                       1030 00132$:
      0003BF 12r01r5A         [24] 1031 	lcall	_call
      0003C2                       1032 00133$:
                                   1033 ;	./src/main.c:97: if (cnt == 2580) cnt = 0;
      0003C2 74 14            [12] 1034 	mov	a,#0x14
      0003C4 B5*2A 0A         [24] 1035 	cjne	a,_cnt,00148$
      0003C7 74 0A            [12] 1036 	mov	a,#0x0a
      0003C9 B5*2B 05         [24] 1037 	cjne	a,(_cnt + 1),00148$
      0003CC E4               [12] 1038 	clr	a
      0003CD F5*2A            [12] 1039 	mov	_cnt,a
      0003CF F5*2B            [12] 1040 	mov	(_cnt + 1),a
      0003D1                       1041 00148$:
                                   1042 ;	./src/main.c:98: }
      0003D1 D0 D0            [24] 1043 	pop	psw
      0003D3 D0 00            [24] 1044 	pop	(0+0)
      0003D5 D0 01            [24] 1045 	pop	(0+1)
      0003D7 D0 02            [24] 1046 	pop	(0+2)
      0003D9 D0 03            [24] 1047 	pop	(0+3)
      0003DB D0 04            [24] 1048 	pop	(0+4)
      0003DD D0 05            [24] 1049 	pop	(0+5)
      0003DF D0 06            [24] 1050 	pop	(0+6)
      0003E1 D0 07            [24] 1051 	pop	(0+7)
      0003E3 D0 83            [24] 1052 	pop	dph
      0003E5 D0 82            [24] 1053 	pop	dpl
      0003E7 D0 F0            [24] 1054 	pop	b
      0003E9 D0 E0            [24] 1055 	pop	acc
      0003EB D0*00            [24] 1056 	pop	bits
      0003ED 32               [24] 1057 	reti
                                   1058 ;------------------------------------------------------------
                                   1059 ;Allocation info for local variables in function 'main'
                                   1060 ;------------------------------------------------------------
                                   1061 ;	./src/main.c:100: void main(void) 
                                   1062 ;	-----------------------------------------
                                   1063 ;	 function main
                                   1064 ;	-----------------------------------------
      0003EE                       1065 _main:
                                   1066 ;	./src/main.c:102: sendbyte(12,1,12,1);
      0003EE 75*00 01         [24] 1067 	mov	_sendbyte_PARM_2,#0x01
      0003F1 75*01 0C         [24] 1068 	mov	_sendbyte_PARM_3,#0x0c
      0003F4 75*02 01         [24] 1069 	mov	_sendbyte_PARM_4,#0x01
      0003F7 75 82 0C         [24] 1070 	mov	dpl,#0x0c
      0003FA 12r00r9B         [24] 1071 	lcall	_sendbyte
                                   1072 ;	./src/main.c:103: sendbyte(15,0,15,0);
      0003FD 75*00 00         [24] 1073 	mov	_sendbyte_PARM_2,#0x00
      000400 75*01 0F         [24] 1074 	mov	_sendbyte_PARM_3,#0x0f
      000403 75*02 00         [24] 1075 	mov	_sendbyte_PARM_4,#0x00
      000406 75 82 0F         [24] 1076 	mov	dpl,#0x0f
      000409 12r00r9B         [24] 1077 	lcall	_sendbyte
                                   1078 ;	./src/main.c:104: sendbyte(9,0,9,0);
      00040C 75*00 00         [24] 1079 	mov	_sendbyte_PARM_2,#0x00
      00040F 75*01 09         [24] 1080 	mov	_sendbyte_PARM_3,#0x09
      000412 75*02 00         [24] 1081 	mov	_sendbyte_PARM_4,#0x00
      000415 75 82 09         [24] 1082 	mov	dpl,#0x09
      000418 12r00r9B         [24] 1083 	lcall	_sendbyte
                                   1084 ;	./src/main.c:105: sendbyte(11,7,11,7);
      00041B 75*00 07         [24] 1085 	mov	_sendbyte_PARM_2,#0x07
      00041E 75*01 0B         [24] 1086 	mov	_sendbyte_PARM_3,#0x0b
      000421 75*02 07         [24] 1087 	mov	_sendbyte_PARM_4,#0x07
      000424 75 82 0B         [24] 1088 	mov	dpl,#0x0b
      000427 12r00r9B         [24] 1089 	lcall	_sendbyte
                                   1090 ;	./src/main.c:106: sendbyte(10,0,10,0);
      00042A 75*00 00         [24] 1091 	mov	_sendbyte_PARM_2,#0x00
      00042D 75*01 0A         [24] 1092 	mov	_sendbyte_PARM_3,#0x0a
      000430 75*02 00         [24] 1093 	mov	_sendbyte_PARM_4,#0x00
      000433 75 82 0A         [24] 1094 	mov	dpl,#0x0a
      000436 12r00r9B         [24] 1095 	lcall	_sendbyte
                                   1096 ;	./src/main.c:107: MPU6050_INIT();
      000439 12r00r00         [24] 1097 	lcall	_MPU6050_INIT
                                   1098 ;	./src/main.c:108: TMOD = 0x01;
      00043C 75 89 01         [24] 1099 	mov	_TMOD,#0x01
                                   1100 ;	./src/main.c:109: TH0 = (15536) >> 8;
      00043F 75 8C 3C         [24] 1101 	mov	_TH0,#0x3c
                                   1102 ;	./src/main.c:110: TL0 = (15536) % 256;
      000442 75 8A B0         [24] 1103 	mov	_TL0,#0xb0
                                   1104 ;	./src/main.c:111: ET0 = EA = TR0 = 1;
                                   1105 ;	assignBit
      000445 D2 8C            [12] 1106 	setb	_TR0
                                   1107 ;	assignBit
      000447 A2 8C            [12] 1108 	mov	c,_TR0
      000449 92 AF            [24] 1109 	mov	_EA,c
                                   1110 ;	assignBit
      00044B A2 AF            [12] 1111 	mov	c,_EA
      00044D 92 A9            [24] 1112 	mov	_ET0,c
                                   1113 ;	./src/main.c:112: while(1);
      00044F                       1114 00102$:
                                   1115 ;	./src/main.c:113: }
      00044F 80 FE            [24] 1116 	sjmp	00102$
                                   1117 	.area CSEG    (CODE)
                                   1118 	.area CONST   (CODE)
                                   1119 	.area XINIT   (CODE)
                                   1120 	.area CABS    (ABS,CODE)
